CREATE OR REPLACE PACKAGE Avidal_CIM10 AS
--////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles entrées
--////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PROCEDURE GetSPCIM10s_id ( idSP              IN    INTEGER,
                        RefSPCIM10        OUT   CIM10_Pubres.CIM10CurTyp,
                        Ret               OUT   NUMBER);

PROCEDURE GetCIM10SPs_txt ( Libelle  	 	  In    GROUPINDIC_Pubres.LIBELLE	 Default Null,
	   			        RefGROUPINDIC	  Out   GROUPINDIC_Pubres.GROUPINDICCurTyp,
			            Ret			      Out   Number);

PROCEDURE GetCIndicCIM10s_id ( Id_CIndic     IN    INTEGER,
                            RefSPCIM10    OUT   CIM10_Pubres.CIM10CurTyp,
                            Ret           OUT   NUMBER);

PROCEDURE GetCIM10CIndics_txt (LIBELLE	      In    T_CI_Pubres.LIBELLE	 Default Null,
	   			           RefT_CI        Out   T_CI_Pubres.T_CICurTyp2,
	   			           Ret		      Out	Number);



   -- =====================================================================
   -- Function            : GetSPCIM10s
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   --                       Modified by M.R. 08 Mar 2001
   -- =====================================================================
--////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles entrées
--////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION GetSPCIM10s_id ( idSP              IN     INTEGER,
                       RefSPCIM10        OUT    CIM10_Pubres. CIM10CurTyp)
                                         RETURN NUMBER;

FUNCTION GetCIM10SPs_txt ( Libelle  	 	 In     GROUPINDIC_Pubres.LIBELLE	 Default Null,
	   			       RefGROUPINDIC	 Out    GROUPINDIC_Pubres.GROUPINDICCurTyp)
			                             RETURN NUMBER;

FUNCTION GetCIndicCIM10s_id ( Id_CIndic     IN     INTEGER,
                           RefSPCIM10    OUT    CIM10_Pubres.CIM10CurTyp)
                                         RETURN NUMBER;

FUNCTION GetCIM10CIndics_txt (LIBELLE	     In     T_CI_Pubres.LIBELLE	 Default Null,
	   		              RefT_CI        Out    T_CI_Pubres.T_CICurTyp2)
	   			                         RETURN NUMBER;

-- ====================================================================
-- Fin de package
-- ====================================================================
END Avidal_CIM10;
/

CREATE OR REPLACE PACKAGE BODY "AVIDAL_CIM10"  AS

-- ====================================================================
-- Script      : AVIDAL_CIM10    Type : Package Body
-- Objet       : Ressources Select tables
-- Owner       : VIDAL
-- Création    : 15/05/02
-- Auteur      : Malika Laghla
-- Généré par  : VIDAL
-- ====================================================================
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCIM10
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
           PROCEDURE GetSPCIM10s_id ( idSP              IN    INTEGER,
                                   RefSPCIM10        OUT   CIM10_Pubres.CIM10CurTyp,
                                   Ret               OUT   NUMBER)
           IS
           BEGIN
                 Ret:= GetSPCIM10s_id(idSP, RefSPCIM10);
           END GetSPCIM10s_id;

           FUNCTION GetSPCIM10s_id ( idSP              IN    INTEGER,
                                  RefSPCIM10        OUT   CIM10_Pubres.CIM10CurTyp)
                                                    RETURN NUMBER IS

           BEGIN

		   ---------------------------------------
		   -- requete par id de group d'indication
		   ---------------------------------------
		   	   -- partie commune de la requete quelque soit le tri
--ML : 20/12/2002 Modif due aux modifications de la structure dans la base
		   OPEN GetSPCIM10s_id.RefSPCIM10 FOR
		       select a.id_dicorf_cim, a.libelle
			 --  from   DICORF_CIM a, RECHINDICCIM_REL b, TERMERECHGROUPINDIC_REL c, GROUPINDIC d
         from   DICORF_CIM a, GROUPINDIC d, GROUPINDIC_DICORF_CIM_REL b
			   where  d.id_groupindic       = GetSPCIM10s_id.idSP
         and    a.ID_DICORF_CIM       = b.ID_DICORF_CIM
         and    d.ID_GROUPINDIC       = b.ID_GROUPINDIC;
--				and   d.ID_GROUPINDIC       = c.ID_GROUPINDIC
--				and   c.ID_TERMERECHINDIC   = b.ID_TERMERECHINDIC
--				and   b.ID_CIMTERMRECHINDIC = a.ID_DICORF_CIM;

      -------------------------------------------------------------
      --Statistiques sur la procedure - rempli la table Marqueurs
      --le 25/05/2004
      -------------------------------------------------------------
       --        Update Marqueurs SET
       --                 Compteur = Compteur + 1
       --                 where upper(proc_name) Like UPPER('%GetSPCIM10s_id%');
       --       COMMIT;
      -------------------------------------------------------------

			 RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
			END GetSPCIM10s_id;

-- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCIM10SPs
  -- Toutes les colonnes
  -- Retour par ref_Cursor
-- ---------------------------------------------------------------
       PROCEDURE GetCIM10SPs_txt ( Libelle            In    GROUPINDIC_Pubres.LIBELLE	 Default Null,
	   			               RefGROUPINDIC	  Out   GROUPINDIC_Pubres.GROUPINDICCurTyp,
			                   Ret			      Out   Number)

           IS
           BEGIN
                 Ret:=  GetCIM10SPs_txt(libelle, RefGROUPINDIC);
           END ;

           FUNCTION GetCIM10SPs_txt ( Libelle  	 	 In     GROUPINDIC_Pubres.LIBELLE	 Default Null,
	   			                  RefGROUPINDIC	 Out    GROUPINDIC_Pubres.GROUPINDICCurTyp)
			                                     RETURN NUMBER  IS


           BEGIN
--ML : 20/12/2002 Modif due aux modifications de la structure dans la base
		     OPEN GetCIM10SPs_txt.RefGROUPINDIC	 FOR
		     select distinct d.id_groupindic, d.LIBELLE, d.TYPE_
--			   from   DICORF_CIM a, RECHINDICCIM_REL b, TERMERECHGROUPINDIC_REL c, GROUPINDIC d
			   from   DICORF_CIM a, GROUPINDIC d, GROUPINDIC_DICORF_CIM_REL b
			   where  UPPER(a.LIBELLE)      like UPPER(GetCIM10SPs_txt.Libelle)
         and    a.ID_DICORF_CIM       = b.ID_DICORF_CIM
         and    d.ID_GROUPINDIC       = b.ID_GROUPINDIC;
--				and   d.ID_GROUPINDIC       = c.ID_GROUPINDIC
--				and   c.ID_TERMERECHINDIC   = b.ID_TERMERECHINDIC
--				and   b.ID_CIMTERMRECHINDIC = a.ID_DICORF_CIM;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCIM10SPs_txt%');
--         COMMIT;

		   RETURN 1;
           EXCEPTION
              WHEN OTHERS THEN
              RETURN SQLCODE;
		   END GetCIM10SPs_txt;

-- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCIndicCIM10s
  -- Toutes les colonnes
  -- Retour par ref_Cursor
-- ---------------------------------------------------------------
          PROCEDURE GetCIndicCIM10s_id ( Id_CIndic     IN    INTEGER,
                                      RefSPCIM10    OUT   CIM10_Pubres.CIM10CurTyp,
                                      Ret           OUT   NUMBER)

           IS
           BEGIN
                 Ret := GetCIndicCIM10s_id(Id_CIndic,RefSPCIM10);
           END ;

           FUNCTION GetCIndicCIM10s_id ( Id_CIndic  	In     INTEGER,
	   			                      RefSPCIM10	   OUT   CIM10_Pubres.CIM10CurTyp)
			                               RETURN NUMBER  IS


           BEGIN
     		   OPEN GetCIndicCIM10s_id.RefSPCIM10 FOR
        	select d.ID_DICORF_CIM, d.libelle
			      from   T_CI a, T_CI_CIMCI_REL b, CIMCI c, DICORF_CIM d
			      where  d.LIBELLE   = c.CODECIM
				  and   c.id_CIMCI  = b.id_CIMCI
				  and   b.ID_T_CI   = a.ID_T_CI
				  and   a.ID_T_CI   = GetCIndicCIM10s_id.Id_CIndic;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCIndicCIM10s_id%');
--         COMMIT;

		   RETURN 1;
           EXCEPTION
              WHEN OTHERS THEN
              RETURN SQLCODE;
		   END GetCIndicCIM10s_id;

-- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCIM10CIndics
  -- Toutes les colonnes
  -- Retour par ref_Cursor
-- ---------------------------------------------------------------
         PROCEDURE GetCIM10CIndics_txt (LIBELLE	      In    T_CI_Pubres.LIBELLE	 Default Null,
	   			                    RefT_CI       Out   T_CI_Pubres.T_CICurTyp2,
	   			                    Ret		      Out	Number)

           IS
           BEGIN
                 Ret := GetCIM10CIndics_txt(LIBELLE, RefT_CI);
           END ;

           FUNCTION GetCIM10CIndics_txt (LIBELLE	     In     T_CI_Pubres.LIBELLE	 Default Null,
	   		                         RefT_CI         Out    T_CI_Pubres.T_CICurTyp2)
	   			                         RETURN NUMBER IS

           BEGIN
		  	   OPEN GetCIM10CIndics_txt.RefT_CI  FOR
	              select distinct a.Id_T_CI ,a.Libelle, Texte, a.Creation, Validation,
				         Remarques, DECODE(e.ID_T_CI_F, Null, 0, 1) HasChild
				  from   T_CI a, T_CI_CIMCI_REL b, CIMCI c, DICORF_CIM d ,  HIERARCHIECI_REL e
                  Where  d.LIBELLE   = c.CODECIM
				  and    c.id_CIMCI  = b.id_CIMCI
				  and    b.ID_T_CI   = a.ID_T_CI
	  			  And    e.ID_T_CI_P(+) = a.ID_T_CI
				  and    UPPER(d.LIBELLE) like UPPER(GetCIM10CIndics_txt.LIBELLE);

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--          Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCIM10CIndics_txt%');
--          COMMIT;

		   RETURN 1;
           EXCEPTION
              WHEN OTHERS THEN
              RETURN SQLCODE;
		   END GetCIM10CIndics_txt;



END Avidal_CIM10;
/
CREATE OR REPLACE PACKAGE Avidal_Cip AS
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
           PROCEDURE GetCips_id ( Terme                IN    NUMBER,
                               Typ                  IN    INTEGER,
                               Domain               IN    INTEGER,
                               ordre                IN    INTEGER                                         DEFAULT 1,
                               RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurRef,
                               Ret                  OUT   NUMBER);
           PROCEDURE GetCips_txt ( Terme                IN    VARCHAR2,
                               Typ                  IN    INTEGER,
                               Domain               IN    INTEGER,
                               ordre                IN    INTEGER                                         DEFAULT 1,
                               RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurRef,
                               Ret                  OUT   NUMBER);
           PROCEDURE GetCip_id ( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation       DEFAULT NULL,
                              RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp1,
                              Ret                  OUT   NUMBER);

          PROCEDURE GetCipFull_id ( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation      DEFAULT NULL,
                                  RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONFULLCurTyp,
                                  Ret                  OUT   NUMBER);

           PROCEDURE GetCip_txt ( Cip                  IN    Spepresentation_Pubres.Cip                      DEFAULT NULL,
                              RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp1,
                              Ret                  OUT   NUMBER);
           PROCEDURE GetCipSpe_id ( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation    DEFAULT NULL,
                                 RefSPECIALITE        OUT   Specialite_Pubres.SPECIALITECurTyp,
                                 Ret                  OUT   NUMBER);
           PROCEDURE GetCipSpe_txt ( Cip             IN    Spepresentation_Pubres.Cip              DEFAULT NULL,
                                 RefSPECIALITE   OUT   Specialite_Pubres.SPECIALITECurTyp,
                                 Ret             OUT   NUMBER);
           PROCEDURE GetCipDoc_id ( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation,
                                 RefSpesuiviSgml      OUT   Spesuivisgml_Pubres.SPESUIVISGMLCurTypR,
                                 Ret                  OUT   NUMBER);
		       PROCEDURE GetCipDoc_txt ( Cip   				  IN    Spepresentation_Pubres.Cip,
                                 RefSpesuiviSgml      OUT   Spesuivisgml_Pubres.SPESUIVISGMLCurTypR,
                                 Ret                  OUT   NUMBER);
		       PROCEDURE GetCipGen_id ( Id_Spepresentation IN Spepresentation_Pubres.Id_Spepresentation	DEFAULT NULL,
		   			 		     RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp,
                                 Ret                  OUT   NUMBER);

           PROCEDURE GetCipNoHOP_id ( Id_Specialite   IN    Spepresentation_Pubres.Id_Spepresentation       DEFAULT NULL,
                              RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp1,
                              Ret                  OUT   NUMBER);

           PROCEDURE GetCipsNoHOP_txt ( Terme       IN    VARCHAR2,
                               Typ                  IN    INTEGER,
                               Domain               IN    INTEGER,
                               ordre                IN    INTEGER                                         DEFAULT 1,
                               RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurRef,
                               Ret                  OUT   NUMBER);

           PROCEDURE GetCipsNoHOP_id ( Terme        IN    NUMBER,
                               Typ                  IN    INTEGER,
                               Domain               IN    INTEGER,
                               ordre                IN    INTEGER                                         DEFAULT 1,
                               RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurRef,
                               Ret                  OUT   NUMBER);

           PROCEDURE GetCipSpeDopante_id ( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation    DEFAULT NULL,
                                 RefSPECIALITE        OUT   Specialite_Pubres.SPECIALITEDopantCurTyp ,
                                 Ret                  OUT   NUMBER);

           PROCEDURE GetCipSpeDopante_txt ( Cip             IN    Spepresentation_Pubres.Cip              DEFAULT NULL,
                                 RefSPECIALITE   OUT   Specialite_Pubres.SPECIALITEDopantCurTyp ,
                                 Ret             OUT   NUMBER);
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   -- =====================================================================
   -- Function            : GetCips
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   --                       Modified by M.R. 08 Mar 2001
   -- =====================================================================

           FUNCTION GetCips_txt ( Terme                IN    VARCHAR2,
                              Typ                  IN    INTEGER,
                              Domain               IN    INTEGER,
                              ordre                IN    INTEGER                                       DEFAULT 1,
                              RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurRef)
                            RETURN NUMBER;

           FUNCTION GetCips_id ( Terme                IN    NUMBER,
                              Typ                  IN    INTEGER,
                              Domain               IN    INTEGER,
                              ordre                IN    INTEGER                                       DEFAULT 1,
                              RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurRef)
                            RETURN NUMBER;

           FUNCTION GetCipsNoHOP_txt ( Terme                IN    VARCHAR2,
                              Typ                  IN    INTEGER,
                              Domain               IN    INTEGER,
                              ordre                IN    INTEGER                                       DEFAULT 1,
                              RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurRef)
                            RETURN NUMBER;

           FUNCTION GetCipsNoHOP_id ( Terme                IN    NUMBER,
                              Typ                  IN    INTEGER,
                              Domain               IN    INTEGER,
                              ordre                IN    INTEGER                                       DEFAULT 1,
                              RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurRef)
                            RETURN NUMBER;

   -- =====================================================================
   -- Function            : GetCip
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           FUNCTION GetCip_id ( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation     DEFAULT NULL,
                             RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp1)
                           RETURN NUMBER;
           PRAGMA RESTRICT_REFERENCES(GetCip_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : GetCipFull
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by EA 25.03.2001
   -- =====================================================================
           FUNCTION GetCipFull_id ( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation       DEFAULT NULL,
                             RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONFULLCurTyp)
                           RETURN NUMBER;
           PRAGMA RESTRICT_REFERENCES(GetCipFull_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : GetCip
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           FUNCTION GetCip_txt ( Cip                  IN    Spepresentation_Pubres.Cip                    DEFAULT NULL,
                             RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp1)
                           RETURN NUMBER;
           PRAGMA RESTRICT_REFERENCES(GetCip_txt,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : GetSpeCips
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           FUNCTION GetCipSpe_id ( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation  DEFAULT NULL,
                                RefSPECIALITE        OUT   Specialite_Pubres.SPECIALITECurTyp)
                              RETURN NUMBER;
           PRAGMA RESTRICT_REFERENCES(GetCipSpe_id, WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : GetSpeCips
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           FUNCTION GetCipSpe_txt ( Cip             IN    Spepresentation_Pubres.Cip             DEFAULT NULL,
                                RefSPECIALITE   OUT   Specialite_Pubres.SPECIALITECurTyp)
                              RETURN NUMBER;
           PRAGMA RESTRICT_REFERENCES(GetCipSpe_txt, WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : GetCipDoc
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           FUNCTION GetCipDoc_id ( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation,
                                RefSpesuiviSgml      OUT   Spesuivisgml_Pubres.SPESUIVISGMLCurTypR)
                              RETURN NUMBER;
           PRAGMA RESTRICT_REFERENCES(GetCipDoc_id, WNDS,WNPS,RNPS);

		       FUNCTION GetCipDoc_txt ( Cip				     IN    Spepresentation_Pubres.Cip,
                                RefSpesuiviSgml      OUT   Spesuivisgml_Pubres.SPESUIVISGMLCurTypR)
                              RETURN NUMBER;
           PRAGMA RESTRICT_REFERENCES(GetCipDoc_txt, WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : GetCipGen
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by A.L. 01 Juin 2001
   -- =====================================================================
           FUNCTION GetCipGen_id ( Id_Spepresentation    IN    Spepresentation_Pubres.Id_Spepresentation DEFAULT NULL,
                                RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp)
                               RETURN NUMBER;
           PRAGMA RESTRICT_REFERENCES(GetCipGen_id ,WNDS,WNPS,RNPS);

   -- =====================================================================
   -- Function            : GetCipNoHOP
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           FUNCTION GetCipNoHOP_id ( Id_Specialite   IN    Spepresentation_Pubres.Id_Spepresentation     DEFAULT NULL,
                             RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp1)
                           RETURN NUMBER;
           PRAGMA RESTRICT_REFERENCES(GetCip_id,WNDS,WNPS,RNPS);

           FUNCTION GetCipSpeDopante_id ( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation  DEFAULT NULL,
                                RefSPECIALITE        OUT   Specialite_Pubres.SPECIALITEDopantCurTyp )
                              RETURN NUMBER;
           PRAGMA RESTRICT_REFERENCES(GetCipSpe_id, WNDS,WNPS,RNPS);

           FUNCTION GetCipSpeDopante_txt ( Cip             IN    Spepresentation_Pubres.Cip       DEFAULT NULL,
                                RefSPECIALITE   OUT   Specialite_Pubres.SPECIALITEDopantCurTyp )
                              RETURN NUMBER;
           PRAGMA RESTRICT_REFERENCES(GetCipSpe_txt, WNDS,WNPS,RNPS);


-- ====================================================================
-- Fin de package
-- ====================================================================
END Avidal_Cip;
/

CREATE OR REPLACE PACKAGE BODY Avidal_Cip AS
-- ====================================================================
-- Script      : AVIDAL_CIP    Type : Package Body
-- Objet       : Ressources Select tables
-- Owner       : VIDAL
-- Création    : 14/09/99 18:31:39
-- Auteur      : AGDF (2000) from Data to Information
-- Généré par  : Kercaps - AGDF_GEN_PAC Version : 2.02
-- Modifié par : Manuel Rouault - 08/03/2001 : Modification #1 de GetCips
--               AL : gestion du parametre Domain dans GetCips
-- Généré par  : Manuel Rouault
-- ====================================================================


  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

--==================================================================
  --ML :06/11/2003 : Adaptation des APIs à la nouvelle Base RUBIS
--==================================================================
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCips
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- Modification #1 : dans le cas du passage d'une substance, on
  --                   cherchera également les CIP dont une substance
  --                   fille correspond au critère Terme.
  -- --------------------------------------------------------------

           PROCEDURE GetCips_txt ( Terme                IN    VARCHAR2,
                               Typ                  IN    INTEGER,
                               Domain               IN    INTEGER,
                               ordre                IN    INTEGER    DEFAULT 1,
                               RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurRef,
                               Ret                  OUT   NUMBER)
           IS
           BEGIN
                 Ret:= GetCips_txt ( Terme, Typ, Domain, ordre, RefSPEPRESENTATION);
           END GetCips_txt;
           FUNCTION GetCips_txt ( Terme                IN    VARCHAR2,
                              Typ                  IN    INTEGER,
                              Domain               IN    INTEGER,
                              ordre                IN    INTEGER                                         DEFAULT 1,
                              RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurRef)
                            RETURN NUMBER IS
           ordonn VARCHAR2(50);
		   domaine VARCHAR2(50);
		   Requete VARCHAR2(4000);
		   Reqsubst VARCHAR2(5000);
  		 ReqUCD VARCHAR2(4000);
       Supp    VARCHAR2(10);

           BEGIN

		   domaine := AVIDAL_PUBRES.DecodeDomain(getCips_txt.Domain);
       Supp := '4,5';
		   ---------------------------------
		   -- requete par nom de specialite
		   ---------------------------------
--ML : 06/11/2003 : Speconditionnementprimaire supprimée + renscomp = Condi
              IF typ = 1 THEN
		   	   -- partie commune de la requete quelque soit le tri
		   	   Requete := 'SELECT   /*+ RULE */ b.ID_SPEPRESENTATION, b.ID_SPECIALITE, b.CIP,'
                        ||  'b.UCD, b.AMMEUROPE, b.LIEUDISPO,'
                        ||  'b.CONDDISPO, b.LISTE, b.DUREEPRESCRIPTION,'
                        ||  'b.PRESCRIPTIONINITIALE, b.PRESCRIPTIONRESERVEE,'
                        ||  'b.RENOUVELRESERVE, b.MEDPARTIC, b.NATURESURVEILLANCE,'
                        ||  'b.CODEREFERANTGENERIQUE, b.REMPLACE, b.SOURCEREMPLACE,'
                        ||  'b.DATESOURCEREMPLACE, b.REMPLACEPAR, b.SOURCEREMPLACEPAR,'
                        ||  'b.DATESOURCEREMPLACEPAR, b.PRIXPRODHTF, b.PRIXPUBLICTTCF,'
                        ||  'b.PRIXPRODHTE, b.PRIXPUBLICTTCE, b.TVA, b.DCREAT, b.DMODIF,';

             IF ordre = 2 OR ordre = 1 THEN

				 Requete := Requete ||  'b.DREVIS, b.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,'
                 ||  ' a.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, b.disponibilite,'
                 ||  ' b.NBprise, b.PriseUnitaire, b.codedispo codedispo '
				 || ' FROM     SPEPRESENTATION b, SPECIALITE a '
                 || ' WHERE    UPPER(TRANSLATE(a.DENOMSPE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCips_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))'
                 || ' AND    b.ID_SPECIALITE           = a.ID_SPECIALITE'
     --            || ' AND    c.ID_SPEPRESENTATION (+)  = b.ID_SPEPRESENTATION'
     --            || ' AND    UPPER(c.TYPECONDPRIMAIRE (+)) = ''DENOMCIP'''
				 || ' AND    a.IDTYPESPE in ('||domaine||')';
				 -- tri par prix croissant
				 IF ordre = 2 THEN
                 	Requete := Requete || ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), PRIXPUBLICTTCE, DenomCip ';
				 -- tri par ordre alpha
				 ELSE
				 	Requete := Requete || ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), DenomCip';
				 END IF;

			 -- tri par taux de remboursement
             ELSIF ordre = 3 THEN
                  Requete := Requete || 'b.DREVIS, b.CIPREFERANT,f.EVENEMENT, f.DATEEVENEMENT,'
                 || ' a.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, b.disponibilite,'
                 ||  ' b.NBprise, b.PriseUnitaire, b.codedispo codedispo '
	         			 || ' FROM     SPEPRESENTATION b, SPECIALITE a, SPEEVTPRESENTATION f '
                 || ' WHERE    a.ID_SPECIALITE + 0 = b.ID_SPECIALITE'
                 ||'  AND    UPPER(TRANSLATE(a.DENOMSPE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCips_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))'
                 ||'  AND    b.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION'
            --     ||'  AND    c.ID_SPEPRESENTATION (+)  = b.ID_SPEPRESENTATION'
            --    ||'  AND    UPPER(c.TYPECONDPRIMAIRE (+)) = ''DENOMCIP'''
                 ||'  AND    f.DATEEVENEMENT = ( SELECT MAX(g.DATEEVENEMENT)'
                 ||                            ' FROM   SPEEVTPRESENTATION g'
                 ||                            ' WHERE  g.ID_SPEPRESENTATION = f.ID_SPEPRESENTATION'
                 ||                            '   AND  UPPER(g.evenement) LIKE ''%REMB%'')'
                 ||  ' AND    UPPER(f.evenement) LIKE ''%REMB%'''
				 ||  ' AND a.IDTYPESPE in ('||domaine||')'
                 || ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), f.EVENEMENT, DenomCip';
			 END IF;

			 	 OPEN GetCips_txt.RefSPEPRESENTATION FOR Requete;

--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		   ----------------------------------
           -- requete par nom de substance
		   ----------------------------------
		   ELSIF Typ = 2 Or Typ = 25 Or Typ = 27 THEN
			 -- partie commune de la requete : recherche dans T_SUB
			 Reqsubst := 'SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                     ||     'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                     ||     'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                     ||     'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                     ||     'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                     ||     'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                     ||     'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                     ||     'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                     ||     'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,';

			 IF ordre = 2 or ordre = 1 THEN
		             Reqsubst := Reqsubst || 'e.DREVIS, e.CIPREFERANT,'''' EVENEMENT, '''' DATEEVENEMENT,'
                     ||     'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip , e.disponibilite, '
                     ||  ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo '
                     || ' FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b';
			 ELSIF ordre = 3 THEN
			         Reqsubst := Reqsubst || 'e.DREVIS, e.CIPREFERANT, h.EVENEMENT, MAX(h.DATEEVENEMENT),'
                     || 'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, '
                     || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo'
                     ||' FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, SPEEVTPRESENTATION h';

			 END IF;
			 Reqsubst := Reqsubst || ' WHERE    b.DENOMSUB IN ( SELECT LIBELLE'
                     ||                         ' FROM   T_SUB'
                     ||                         ' WHERE  UPPER(TRANSLATE(LIBELLE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCips_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))'
                     ||                       ' )'
                     ||   ' AND    c.ID_SPECOMPO                 = b.ID_SPECOMPO';
			IF Typ = 25 THEN
			   Reqsubst := Reqsubst || ' AND b.bconstactif = ''1''';
			ELSIF Typ = 27 THEN
			   Reqsubst := Reqsubst || ' AND b.bconstactif = ''0''';
			END IF;
			Reqsubst := Reqsubst || ' AND    d.ID_SPECIALITE               = c.ID_SPECIALITE '
                  || ' AND    e.ID_SPECIALITE               = d.ID_SPECIALITE'
               --   || ' AND    f.ID_SPEPRESENTATION (+) + 0  = e.ID_SPEPRESENTATION'
               --   || ' AND    UPPER(f.TYPECONDPRIMAIRE (+)) = ''DENOMCIP'''
				  || ' AND    d.IDTYPESPE IN ('||domaine||') AND    e.codedispo NOT IN ('||Supp||')'  ;

			IF ordre = 3 THEN
			   Reqsubst := Reqsubst ||' AND    e.ID_SPEPRESENTATION          = h.ID_SPEPRESENTATION + 0'
                 ||' AND    UPPER(h.EVENEMENT) LIKE ''%REMB%'''
                 ||' GROUP BY e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                 ||         'e.UCD, e.AMMEUROPE,e.LIEUDISPO,'
                 ||         'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                 ||         'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                 ||         'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                 ||         'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                 ||         'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                 ||         'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                 ||         'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                 ||         'e.DREVIS, e.CIPREFERANT, h.EVENEMENT,'
                 ||         'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi), e.disponibilite, '
                 ||         ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo';

			END IF;

			--recherche dans les synonymes
			Reqsubst := Reqsubst || ' UNION '
				  || ' SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP, '
                  ||        'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                  ||        'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                  ||        'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                  ||        'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                  ||        'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                  ||        'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                  ||        'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                  ||        'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,';

			IF ordre = 2 or ordre = 1 THEN
				  Reqsubst := Reqsubst || 'e.DREVIS, e.CIPREFERANT,'''' EVENEMENT, '''' DATEEVENEMENT,'
                  ||        'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, '
                  || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo '
                  || ' FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b';
			ELSIF ordre = 3 THEN
				  Reqsubst := Reqsubst || 'e.DREVIS, e.CIPREFERANT,j.EVENEMENT, MAX(j.DATEEVENEMENT),'
                  ||        'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, '
                  || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo '
                  || ' FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, SPEEVTPRESENTATION j';

			END IF;

			Reqsubst := Reqsubst || ' WHERE    b.DENOMSUB IN ( SELECT LIBELLE'
                 ||                         ' FROM   T_SUB'
                 ||                         ' WHERE  ID_T_SUB IN ( SELECT DISTINCT  f.ID_T_SUB_F'
                 ||                                             ' FROM             COUPLETERMETERME f'
                 ||                                             ' CONNECT BY PRIOR f.ID_T_SUB_F = f.ID_T_SUB_P'
                 ||                                             ' START WITH       f.ID_T_SUB_P IN ( SELECT g.ID_T_SUB'
                 ||                                                                              '  FROM   T_SUB g'
                 ||                                                                               ' WHERE  UPPER(TRANSLATE(g.LIBELLE,'''|| Avidal_Pubres.ch1 ||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCips_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))'
                 ||                                                                              ')'
                 ||                                            ')'
                 ||                       ')';

			IF Typ = 25 THEN
				   Reqsubst := Reqsubst || ' AND b.bconstactif = ''1''';
			ELSIF Typ = 27 THEN
				   Reqsubst := Reqsubst || ' AND b.bconstactif = ''0''';
			END IF;

			Reqsubst := Reqsubst ||  ' AND    c.ID_SPECOMPO             = b.ID_SPECOMPO'
                   || ' AND    d.ID_SPECIALITE           = c.ID_SPECIALITE'
                   || ' AND    e.ID_SPECIALITE           = d.ID_SPECIALITE'
               --    || ' AND    h.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION'
               --    || ' AND    UPPER(h.TYPECONDPRIMAIRE (+)) = ''DENOMCIP'''
				   || ' AND    d.IDTYPESPE IN ('||domaine||') AND    e.codedispo NOT IN ('||Supp||')'  ;

			IF ordre = 2 THEN
				   Reqsubst := Reqsubst || ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), PRIXPUBLICTTCE, DenomCip';
		    ELSIF ordre = 1 THEN
				   Reqsubst := Reqsubst || ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), DenomCip';
			ELSIF ordre = 3 THEN
				   Reqsubst := Reqsubst || ' AND    e.ID_SPEPRESENTATION      = j.ID_SPEPRESENTATION'
                || ' AND    UPPER(j.EVENEMENT) LIKE ''%REMB%'''
                ||' GROUP BY  e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                ||          'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                ||          'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                ||          'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                ||          'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                ||          'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                ||          'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                ||          'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                ||          'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                ||          'e.DREVIS, e.CIPREFERANT, j.EVENEMENT, '
                ||          'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi), e.disponibilite, '
                || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo'
                ||' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), EVENEMENT, DenomCip';
			END IF;

			OPEN GetCips_txt.RefSPEPRESENTATION FOR Reqsubst;

       ----------------------------------------------
		   -- requete par une liste d'id de classes Théra
		   ----------------------------------------------
		   ELSIF Typ = 3 THEN

                 Requete := 'Select   /*+ RULE */         e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                         ||  'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                         ||  'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                         ||  'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                         ||  'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                         ||  'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                         ||  'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                         ||  'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                         ||  'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,';

				IF ordre = 2 or ordre = 1 THEN
				   Requete := Requete ||'e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,'
                         ||  'd.DENOMSPE||DECODE(Condi,NULL,'||''''''||','||''' : '''||'||Condi) DenomCip, e.disponibilite, '
                     || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo'
                  ||' FROM     SPEPRESENTATION e, SPECIALITE d ';

				ELSIF ordre = 3 THEN
					  Requete := Requete || 'e.DREVIS, e.CIPREFERANT, h.EVENEMENT, h.DATEEVENEMENT,'
                   ||        'd.DENOMSPE||DECODE(Condi,NULL,'||''''''||','||''' : '''||'||Condi) DenomCip, e.disponibilite, '
                   || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo '
                 ||' FROM     SPEPRESENTATION e, SPECIALITE d, SPEEVTPRESENTATION h ';
                END IF;

				Requete := Requete ||' WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)'
				  ||                              ' FROM             SPECIALITE d, SPECLASSIRIS c'
				  ||				              ' WHERE            d.id_specialite = c.id_specialite'
          ||                              '  AND            c.ID_DICOCOMCLASSIRIS IN ( SELECT           a.ID_DICOCOMCLASSIRIS'
          ||                                                                         ' FROM             DICOCOMCLASSIRIS a'
          ||                                                                         ' CONNECT BY PRIOR a.id_dicocomclassiris = a.dic_id_dicocomclassiris'
          ||                                                                         ' START WITH       a.id_dicocomclassiris IN (' || GetCips_txt.Terme || ')))'
          || ' AND    e.id_specialite           = d.id_specialite'
				  || ' AND    d.IDTYPESPE IN ('||domaine||') AND    e.codedispo NOT IN ('||Supp||')  ';


				  IF ordre = 2 THEN
                  Requete := Requete ||' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), PRIXPUBLICTTCE, DenomCip';
				  ELSIF ordre = 1 THEN
				  Requete := Requete ||  ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), DenomCip';
				  ELSIF ordre = 3 THEN
				  Requete := Requete ||  ' AND    e.ID_SPEPRESENTATION      = h.ID_SPEPRESENTATION'
                 ||  ' AND    h.DATEEVENEMENT      = ( SELECT MAX(g.DATEEVENEMENT)'
                 ||                                  ' FROM   SPEEVTPRESENTATION g'
                 ||                                  ' WHERE  g.ID_SPEPRESENTATION = h.ID_SPEPRESENTATION'
                 ||                                  '   AND  UPPER(g.EVENEMENT) LIKE ''%REMB%'')'
                 ||  ' AND    UPPER(h.EVENEMENT) LIKE ''%REMB%'''
                 || ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), h.EVENEMENT, DenomCip';
				  END IF;

				  OPEN GetCips_txt.RefSPEPRESENTATION FOR Requete;


       ----------------------------------------------
		   -- requete par une liste d'id de classes ATC
		   ----------------------------------------------
		   ELSIF Typ = 5 THEN

                 Requete := 'Select   /*+ RULE */         e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                         ||  'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                         ||  'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                         ||  'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                         ||  'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                         ||  'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                         ||  'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                         ||  'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                         ||  'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,';

				IF ordre = 2 or ordre = 1 THEN
				   Requete := Requete ||'e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,'
                         ||  'd.DENOMSPE||DECODE(Condi,NULL,'||''''''||','||''' : '''||'||Condi) DenomCip, e.disponibilite, '
                     || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo'
                  ||' FROM     SPEPRESENTATION e, SPECIALITE d ';

				ELSIF ordre = 3 THEN
					  Requete := Requete || 'e.DREVIS, e.CIPREFERANT, h.EVENEMENT, h.DATEEVENEMENT,'
                   || 'd.DENOMSPE||DECODE(Condi,NULL,'||''''''||','||''' : '''||'||Condi) DenomCip, e.disponibilite, '
                     || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo '
                 ||' FROM     SPEPRESENTATION e, SPECIALITE d, SPEEVTPRESENTATION h ';
                END IF;

				Requete := Requete ||' WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)'
                                   ||             '  FROM             SPECIALITE d, SPEPHARMACODYNAMIE p, '
												           ||             '                   DICOT_ATC_IRIS q '
	                                 ||             '  WHERE          q.LIBELLE = p.ATC_IRIS '
									                 ||             '                 AND   d.ID_SPECIALITE = p.ID_SPECIALITE '
                                   ||             '                 AND   q.ID_DICOT_ATC_IRIS IN ( SELECT          q.ID_DICOT_ATC_IRIS '
                                   ||             '                                                FROM            DICOT_ATC_IRIS q '
                                   ||             '                                                CONNECT BY PRIOR q.ID_DICOT_ATC_IRIS = q.DIC_ID_DICOT_ATC_IRIS '
                                   ||             '                                                START WITH       q.ID_DICOT_ATC_IRIS IN ('||GetCips_txt.Terme ||')))'
                  || ' AND    e.id_specialite           = d.id_specialite'
			        	  || ' AND    d.IDTYPESPE IN ('||domaine||') AND    e.codedispo NOT IN ('||Supp||')  ';

				  IF ordre = 2 THEN
                  Requete := Requete ||' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), PRIXPUBLICTTCE, DenomCip';
				  ELSIF ordre = 1 THEN
				  Requete := Requete ||  ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), DenomCip';
				  ELSIF ordre = 3 THEN
				  Requete := Requete ||  ' AND    e.ID_SPEPRESENTATION      = h.ID_SPEPRESENTATION'
                 ||  ' AND    h.DATEEVENEMENT      = ( SELECT MAX(g.DATEEVENEMENT)'
                 ||                                  ' FROM   SPEEVTPRESENTATION g'
                 ||                                  ' WHERE  g.ID_SPEPRESENTATION = h.ID_SPEPRESENTATION'
                 ||                                  '   AND  UPPER(g.EVENEMENT) LIKE ''%REMB%'')'
                 ||  ' AND    UPPER(h.EVENEMENT) LIKE ''%REMB%'''
                 || ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), h.EVENEMENT, DenomCip';
				  END IF;

				  OPEN GetCips_txt.RefSPEPRESENTATION FOR Requete;


           -------------------------------------
		   -- Requete par nom de laboratoire
		   -------------------------------------
           ELSIF Typ = 4 THEN
		     Requete := 'SELECT  /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                     ||     'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                     ||     'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                     ||     'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                     ||     'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                     ||     'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                     ||     'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                     ||     'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                     ||     'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,';

			 IF ordre = 2 or ordre = 1 THEN
			 	Requete := Requete || 'e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,'
                     || 'd.DENOMSPE||DECODE(Condi, NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, '
                     || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo'
              ||  ' FROM     SPEPRESENTATION e, SPECIALITE d, SPELABS_REL c, LABORATOIRE a ';
             ELSIF ordre = 3 THEN
			 	Requete := Requete || 'e.DREVIS, e.CIPREFERANT, h.EVENEMENT, h.DATEEVENEMENT,'
                       ||   'd.DENOMSPE||DECODE(Condi, NULL, '''','' : ''||Condi) DenomCip, e.disponibilite, '
                     || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo'
              ||  ' FROM     SPEPRESENTATION e, SPECIALITE d, SPELABS_REL c, LABORATOIRE a ,SPEEVTPRESENTATION h ';
             END IF;

	 Requete := Requete || ' WHERE    UPPER(TRANSLATE(a.LABORATOIRE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCips_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))'
   		        ||    ' AND    c.ID_LABORATOIRE              = a.ID_LABORATOIRE'
              ||    ' AND    d.ID_SPECIALITE               = c.ID_SPECIALITE'
			        ||    ' AND    d.IDTYPESPE IN ('||domaine||')'
              ||    ' AND    e.ID_SPECIALITE               = d.ID_SPECIALITE';


			  IF ordre = 2 THEN
			  	 Requete := Requete || ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), PRIXPUBLICTTCE, DenomCip';
			  ELSIF ordre = 1 THEN
			  	 Requete := Requete || ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), DenomCip';
			  ELSIF ordre = 3 THEN
			  	 Requete := Requete || ' AND    e.ID_SPEPRESENTATION      = h.ID_SPEPRESENTATION'
                 || ' AND    h.DATEEVENEMENT = ( SELECT MAX(g.DATEEVENEMENT)'
                 ||                            ' FROM   SPEEVTPRESENTATION g'
                 ||                            ' WHERE  g.ID_SPEPRESENTATION = h.ID_SPEPRESENTATION'
                 ||                            '   AND  UPPER(g.EVENEMENT) LIKE ''%REMB%'')'
                 || ' AND    UPPER(h.EVENEMENT) LIKE ''%REMB%'''
                 || ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), h.EVENEMENT, DenomCip';
			  END IF;

			  OPEN GetCips_txt.RefSPEPRESENTATION FOR Requete;

		   ---------------------------------
		   -- requete par UCD.
		   ---------------------------------
           ELSIF typ = 7 THEN
		   	   -- partie commune de la requete quelque soit le tri
		   	   ReqUCD := 'SELECT   /*+ RULE */ b.ID_SPEPRESENTATION, b.ID_SPECIALITE, b.CIP,'
                        ||  'b.UCD, b.AMMEUROPE, b.LIEUDISPO,'
                        ||  'b.CONDDISPO, b.LISTE, b.DUREEPRESCRIPTION,'
                        ||  'b.PRESCRIPTIONINITIALE, b.PRESCRIPTIONRESERVEE,'
                        ||  'b.RENOUVELRESERVE, b.MEDPARTIC, b.NATURESURVEILLANCE,'
                        ||  'b.CODEREFERANTGENERIQUE, b.REMPLACE, b.SOURCEREMPLACE,'
                        ||  'b.DATESOURCEREMPLACE, b.REMPLACEPAR, b.SOURCEREMPLACEPAR,'
                        ||  'b.DATESOURCEREMPLACEPAR, b.PRIXPRODHTF, b.PRIXPUBLICTTCF,'
                        ||  'b.PRIXPRODHTE, b.PRIXPUBLICTTCE, b.TVA, b.DCREAT, b.DMODIF,';

             IF ordre = 2 OR ordre = 1 THEN

				 ReqUCD := ReqUCD ||  'b.DREVIS, b.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,'
                 ||  'a.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, b.disponibilite, '
                 || ' b.NBprise, b.PriseUnitaire, b.codedispo codedispo '
				         || ' FROM     SPEPRESENTATION b, SPECIALITE a '
                 || ' WHERE  b.UCD = '||GetCips_txt.Terme
                 || ' AND    b.ID_SPECIALITE           = a.ID_SPECIALITE'
				         || ' AND    a.IDTYPESPE in ('||domaine||') AND    b.codedispo NOT IN ('||Supp||')  ';
				 -- tri par prix croissant
				 IF ordre = 2 THEN
                 	ReqUCD := ReqUCD || ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), PRIXPUBLICTTCE, DenomCip';
				 -- tri par ordre alpha
				 ELSE
				 	ReqUCD := ReqUCD || ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), DenomCip';
				 END IF;

			 -- tri par taux de remboursement
             ELSIF ordre = 3 THEN
                  ReqUCD := ReqUCD || 'b.DREVIS, b.CIPREFERANT,f.EVENEMENT, f.DATEEVENEMENT,'
                 ||'  a.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, b.disponibilite, '
                 ||'  b.NBprise, b.PriseUnitaire, b.codedispo codedispo '
        				 ||'  FROM     SPEPRESENTATION b, SPECIALITE a, SPEEVTPRESENTATION f '
                 ||'  WHERE    a.ID_SPECIALITE + 0 = b.ID_SPECIALITE'
                 ||'  AND    b.UCD = '||GetCips_txt.Terme
                 ||'  AND    b.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION'
                 ||'  AND    f.DATEEVENEMENT = ( SELECT MAX(g.DATEEVENEMENT)'
                 ||                            ' FROM   SPEEVTPRESENTATION g'
                 ||                            ' WHERE  g.ID_SPEPRESENTATION = f.ID_SPEPRESENTATION'
                 ||                            '   AND  UPPER(g.evenement) LIKE ''%REMB%'')'
                 ||'  AND    UPPER(f.evenement) LIKE ''%REMB%'''
				         ||'  AND a.IDTYPESPE in ('||domaine||') AND    b.codedispo NOT IN ('||Supp||')'
                 ||'  ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), f.EVENEMENT, DenomCip';
			 END IF;

			 	 OPEN GetCips_txt.RefSPEPRESENTATION FOR ReqUCD;



           END IF;
-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCips_txt%');
--         COMMIT;
-------------------------------------------------------------
           RETURN 1;
           EXCEPTION
             WHEN OTHERS THEN
               RETURN SQLCODE;
           END GetCips_txt;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCips
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- Modification #1 : dans le cas du passage d'une substance, on
  --                   cherchera également les CIP dont une substance
  --                   fille correspond au critère Terme.
  -- --------------------------------------------------------------
           PROCEDURE GetCips_id ( Terme                IN    NUMBER,
                               Typ                  IN    INTEGER,
                               Domain               IN    INTEGER,
                               ordre                IN    INTEGER                                        DEFAULT 1,
                               RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurRef,
                               Ret                  OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetCips_id ( Terme, Typ, Domain, ordre, RefSPEPRESENTATION);
           END GetCips_id;
           FUNCTION GetCips_id ( Terme                 IN    NUMBER,
                              Typ                   IN    INTEGER,
                              Domain                IN    INTEGER,
                              ordre                 IN    INTEGER                                        DEFAULT 1,
                              RefSPEPRESENTATION    OUT   Spepresentation_Pubres.SPEPRESENTATIONCurRef)
                            RETURN NUMBER IS
		   Reqsubst VARCHAR2(5000);
		   Requete VARCHAR2(4000);
		   domaine  VARCHAR2(50);
       Supp     VARCHAR(10);

           BEGIN
		     domaine := AVIDAL_PUBRES.DecodeDomain(GetCips_id.Domain);
         Supp := '4,5';
       -------------------------------------------------
			 -- recherche par id de substance
			 -------------------------------------------------
			 IF typ = 2 or typ = 25 or typ = 27 THEN

			    Reqsubst := 'SELECT * FROM ( SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                      ||      'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                      ||      'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                      ||      'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                      ||      'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                      ||      'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                      ||      'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                      ||      'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                      ||      'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,';

				IF ordre = 2 or ordre = 1 THEN
				   Reqsubst := Reqsubst || 'e.DREVIS, e.CIPREFERANT,'''' EVENEMENT, '''' DATEEVENEMENT,'
                      ||      'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, '
                     || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo '
                   ||' FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b ';
                ELSIF ordre = 3 THEN
				   Reqsubst := Reqsubst || 'e.DREVIS, e.CIPREFERANT,h.EVENEMENT, MAX(h.DATEEVENEMENT),'
                        ||    'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, '
                     || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo '
                   ||' FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, SPEEVTPRESENTATION h ';
                END IF;

				Reqsubst := Reqsubst ||' WHERE    b.DENOMSUB IN ( SELECT LIBELLE'
                   ||                        ' FROM   T_SUB'
                   ||                        ' WHERE  ID_T_SUB = '||GetCips_id.Terme||')'
                   || ' AND    c.ID_SPECOMPO                 = b.ID_SPECOMPO';
				   IF Typ = 25 THEN
				   Reqsubst := Reqsubst || ' AND b.bconstactif = ''1''';
				   ELSIF Typ = 27 THEN
				   Reqsubst := Reqsubst || ' AND b.bconstactif = ''0''';
				   END IF;
                Reqsubst := Reqsubst || ' AND    d.ID_SPECIALITE               = c.ID_SPECIALITE'
                   || ' AND    e.ID_SPECIALITE               = d.ID_SPECIALITE'
			             || ' AND    d.IDTYPESPE in ('||domaine||') AND    e.codedispo NOT IN ('||Supp||')';
--ML : Projet Nouveaux et Supprimés-13/05/2004


			   IF ordre = 3 THEN
			   	  Reqsubst := Reqsubst || ' AND    e.ID_SPEPRESENTATION          = h.ID_SPEPRESENTATION + 0'
                   || ' AND    UPPER(h.EVENEMENT) LIKE ''%REMB%'''
                  ||' GROUP BY  e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                  ||          'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                  ||          'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                  ||          'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                  ||          'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                  ||          'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                  ||          'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                  ||          'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                  ||          'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                  ||          'e.DREVIS, e.CIPREFERANT,h.EVENEMENT,'
                  ||          'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi), e.disponibilite, '
                  || ' e.NBprise, e.PriseUnitaire, codedispo  ';
               END IF;

			   -- Recherche dans les synonymes
			   Reqsubst := Reqsubst ||' UNION '
                  || ' SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                  ||          'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                  ||          'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                  ||          'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                  ||          'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                  ||          'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                  ||          'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                  ||          'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                  ||          'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,';

				IF ordre = 2 or ordre = 1 THEN
				   Reqsubst := Reqsubst || 'e.DREVIS, e.CIPREFERANT,'''' EVENEMENT, '''' DATEEVENEMENT,'
                  ||          'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, '
                  || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo '
                  || ' FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b ';
                ELSIF ordre = 3 THEN
				   Reqsubst := Reqsubst || 'e.DREVIS, e.CIPREFERANT,h.EVENEMENT, MAX(h.DATEEVENEMENT),'
                  ||          'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, '
                  || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo '
                  ||' FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, SPEEVTPRESENTATION h ';
                END IF;

				Reqsubst := Reqsubst || ' WHERE    b.DENOMSUB IN ( SELECT LIBELLE'
                  ||                         ' FROM   T_SUB'
                  ||                         ' WHERE  ID_T_SUB IN ( SELECT DISTINCT  f.ID_T_SUB_F'
                  ||                         '                      FROM             COUPLETERMETERME f'
                  ||                         '                      CONNECT BY PRIOR f.ID_T_SUB_F = f.ID_T_SUB_P'
                  ||                         '                      START WITH       f.ID_T_SUB_P = '||GetCips_id.Terme||')'
                  ||                        ')'
                  || '  AND    c.ID_SPECOMPO             = b.ID_SPECOMPO';
				   IF Typ = 25 THEN
				   Reqsubst := Reqsubst || ' AND b.bconstactif = ''1''';
				   ELSIF Typ = 27 THEN
				   Reqsubst := Reqsubst || ' AND b.bconstactif = ''0''';
				   END IF;
                  Reqsubst := Reqsubst || '  AND    d.ID_SPECIALITE           = c.ID_SPECIALITE'
                  || '  AND    e.ID_SPECIALITE           = d.ID_SPECIALITE'
			            || '  AND    d.IDTYPESPE in ('||domaine||') AND    e.codedispo NOT IN ('||Supp||')';
--ML : Projet Nouveaux et Supprimés-13/05/2004


				  IF ordre = 2 THEN
				  	 Reqsubst := Reqsubst  || ') ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), PRIXPUBLICTTCE, DenomCip';
				  ELSIF ordre = 1 THEN
				  	 Reqsubst := Reqsubst  ||') ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), DenomCip'; 

				  ELSIF ordre = 3 THEN
				     Reqsubst := Reqsubst ||   ' AND    e.ID_SPEPRESENTATION      = h.ID_SPEPRESENTATION'
                  ||   ' AND    UPPER(h.EVENEMENT) LIKE ''%REMB%'''
                  || ' GROUP BY e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                  ||          'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                  ||          'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                  ||          'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                  ||          'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                  ||          'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                  ||          'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                  ||          'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                  ||          'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                  ||          'e.DREVIS, e.CIPREFERANT, h.EVENEMENT,'
                  ||          'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi), e.disponibilite, '
                  || ' e.NBprise, e.PriseUnitaire, codedispo  '
                  || ')  ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), EVENEMENT, DenomCip';
				  END IF;

				OPEN GetCips_id.RefSPEPRESENTATION FOR Reqsubst;

		     ----------------------------------------------
			 -- recherche par liste d'id de classe Thera
			 ----------------------------------------------
             ELSIF Typ = 3 THEN
			   Requete := ' SELECT   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                         ||   'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                         ||   'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                         ||   'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                         ||   'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                         ||   'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                         ||   'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                         ||   'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                         ||   'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,';

				IF ordre = 2 or ordre = 1 THEN
				   Requete := Requete || 'e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,'
                    ||        'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, '
                     || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo '
               ||  '  FROM     SPEPRESENTATION e, SPECIALITE d ';
                ELSIF ordre = 3 THEN
				   Requete := Requete || 'e.DREVIS, e.CIPREFERANT, f.EVENEMENT, MAX(f.DATEEVENEMENT),'
                     ||       'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, '
                     || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo '
               ||   ' FROM     SPEPRESENTATION e, SPECIALITE d,SPEEVTPRESENTATION f ';
                END IF;

				Requete := Requete || ' WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)'
                                   ||             ' FROM             SPECIALITE d, SPECLASSIRIS c'
                                   ||             ' WHERE            d.id_specialite = c.id_specialite'
                                   ||             '   AND            c.ID_DICOCOMCLASSIRIS IN ( SELECT           a.ID_DICOCOMCLASSIRIS'
                                   ||                                                         ' FROM             DICOCOMCLASSIRIS a'
                                   ||                                                         ' CONNECT BY PRIOR a.id_dicocomclassiris = a.dic_id_dicocomclassiris'
                                   ||                                                         ' START WITH a.id_dicocomclassiris = '||GetCips_id.Terme ||'))'
                 ||   ' AND    e.id_specialite           = d.id_specialite'
				         ||   ' AND    d.IDTYPESPE IN ('||domaine||') AND    e.codedispo NOT IN ('||Supp||')';
--ML : Projet Nouveaux et Supprimés-13/05/2004


				IF ordre = 2 THEN
				   Requete := Requete || ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), PRIXPUBLICTTCE, DenomCip';
				ELSIF ordre = 3 THEN
				   Requete := Requete || 'AND    e.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION'
                  ||   ' AND    UPPER(f.EVENEMENT) LIKE ''%REMB%'''
                  || ' GROUP BY e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                  ||          'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                  ||          'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                  ||          'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                  ||          'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                  ||          'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                  ||          'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                  ||          'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                  ||          'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                  ||          'e.DREVIS, e.CIPREFERANT,f.EVENEMENT, f.DATEEVENEMENT, '
                  ||          'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi), e.disponibilite, '
                  || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo '
                  || ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), f.EVENEMENT, DenomCip';
				ELSIF ordre = 1 THEN
				   Requete := Requete || ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), DenomCip';
				END IF;

				OPEN GetCips_id.RefSPEPRESENTATION FOR Requete;

--//////////////////////////////--Début Classes ATC--///////////////////////////////////
   ELSIF Typ = 5 THEN
			   Requete := ' SELECT   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                         ||   'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                         ||   'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                         ||   'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                         ||   'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                         ||   'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                         ||   'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                         ||   'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                         ||   'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,';

				IF ordre = 2 or ordre = 1 THEN
				   Requete := Requete || 'e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,'
                    ||        'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, '
                    || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo'
               ||  '  FROM     SPEPRESENTATION e, SPECIALITE d ';
                ELSIF ordre = 3 THEN
				   Requete := Requete || 'e.DREVIS, e.CIPREFERANT, f.EVENEMENT, MAX(f.DATEEVENEMENT),'
                     ||       'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, '
                     || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo '
               ||   ' FROM     SPEPRESENTATION e, SPECIALITE d, SPEEVTPRESENTATION f ';
                END IF;

				Requete := Requete || ' WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)'
                                   ||             '  FROM             SPECIALITE d, SPEPHARMACODYNAMIE p, '
												           ||             '                   DICOT_ATC_IRIS q '
	                                 ||             '  WHERE          q.LIBELLE = p.ATC_IRIS '
									                 ||             '                 AND   d.ID_SPECIALITE = p.ID_SPECIALITE '
                                   ||             '                 AND   q.ID_DICOT_ATC_IRIS IN ( SELECT          q.ID_DICOT_ATC_IRIS '
                                   ||             '                                                FROM            DICOT_ATC_IRIS q '
                                   ||             '                                                CONNECT BY PRIOR q.ID_DICOT_ATC_IRIS = q.DIC_ID_DICOT_ATC_IRIS '
                                   ||             '                                                START WITH       q.ID_DICOT_ATC_IRIS = '||GetCips_id.Terme ||'))'
                 ||   ' AND    e.id_specialite           = d.id_specialite'
				 ||   ' AND    d.IDTYPESPE IN ('||domaine||') AND    e.codedispo NOT IN ('||Supp||')';
--ML : Projet Nouveaux et Supprimés-13/05/2004

				IF ordre = 2 THEN
				   Requete := Requete || ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), PRIXPUBLICTTCE, DenomCip';
				ELSIF ordre = 3 THEN
				   Requete := Requete || 'AND    e.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION'
                  ||   ' AND    UPPER(f.EVENEMENT) LIKE ''%REMB%'''
                  || ' GROUP BY e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                  ||          'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                  ||          'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                  ||          'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                  ||          'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                  ||          'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                  ||          'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                  ||          'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                  ||          'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                  ||          'e.DREVIS, e.CIPREFERANT,f.EVENEMENT, f.DATEEVENEMENT, '
                  ||          'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi), e.disponibilite, '
                  || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo '
                  || ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), f.EVENEMENT, DenomCip';
				ELSIF ordre = 1 THEN
				   Requete := Requete || ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), DenomCip';
				END IF;

				OPEN GetCips_id.RefSPEPRESENTATION FOR Requete;


--//////////////////////////////-- Fin Classes ATC--////////////////////////////////////
			 ---------------------------------------------
			 --  -- recherche par id de laboratoire
			 ---------------------------------------------
             ELSIF Typ = 4 THEN

			   Requete := 'SELECT   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                        ||    'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                        ||    'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                        ||    'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                        ||    'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                        ||    'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                        ||    'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                        ||    'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                        ||    'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,';

				IF ordre = 2 or ordre = 1 THEN
				   Requete := Requete || 'e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,'
                         ||   'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, '
                     || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo '
               ||  '  FROM     SPEPRESENTATION e, SPECIALITE d, SPELABS_REL c, LABORATOIRE a ';
                ELSIF ordre = 3 THEN
				   Requete := Requete || 'e.DREVIS, e.CIPREFERANT, f.EVENEMENT, MAX(f.DATEEVENEMENT),'
                         ||   'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, '
                     || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo '
               ||  '  FROM     SPEPRESENTATION e, SPECIALITE d, SPELABS_REL c, LABORATOIRE a,SPEEVTPRESENTATION f ';
                END IF;

				Requete := Requete || ' WHERE    a.ID_LABORATOIRE          = '||GetCips_id.Terme
                  ||  ' AND    c.ID_LABORATOIRE          = a.ID_LABORATOIRE'
                  ||  ' AND    d.ID_SPECIALITE           = c.ID_SPECIALITE'
                  ||  ' AND    e.ID_SPECIALITE           = d.ID_SPECIALITE'
				          ||  ' AND    d.IDTYPESPE IN ('||domaine||')  AND    e.codedispo NOT IN ('||Supp||')';
--ML : Projet Nouveaux et Supprimés-13/05/2004


			   IF ordre = 2 THEN
			   	  Requete := Requete || ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), PRIXPUBLICTTCE, DenomCip';
			   ELSIF ordre = 3 THEN
			   	  Requete := Requete || ' AND    e.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION'
                  ||   ' AND    UPPER(f.EVENEMENT) LIKE ''%REMB%'''
                  || ' GROUP BY e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                  ||          'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                  ||          'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                  ||          'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                  ||          'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                  ||          'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                  ||          'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                  ||          'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                  ||          'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                  ||          'e.DREVIS, e.CIPREFERANT, f.EVENEMENT, f.DATEEVENEMENT,'
                  ||          'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi), e.disponibilite, '
                  || ' e.NBprise, e.PriseUnitaire, e.codedispo codedispo '
                  ||' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), f.EVENEMENT, DenomCip';
			   ELSE
			   	  Requete := Requete || ' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), DenomCip';
			   END IF;

			 OPEN GetCips_id.RefSPEPRESENTATION FOR Requete;
             END IF;
-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCips_id%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetCips_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCip_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetCip_id ( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation      DEFAULT NULL,
                              RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp1,
                              Ret                  OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetCip_id ( Id_Spepresentation, RefSPEPRESENTATION);
           END GetCip_id;
           FUNCTION GetCip_id ( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation       DEFAULT NULL,
                             RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp1)
                           RETURN NUMBER IS

		   CURSOR RefTEMP IS
		   		  SELECT a.ID_SPEPRESENTATION, b.EVENEMENT, b.DATEEVENEMENT FROM SPEPRESENTATION a, SPEEVTPRESENTATION b
				  		 WHERE a.ID_SPEPRESENTATION = GetCip_id.Id_Spepresentation
						 AND   a.ID_SPEPRESENTATION = b.ID_SPEPRESENTATION(+)
						 AND   upper(b.EVENEMENT(+)) LIKE '%REMB%';
		   enreg RefTEMP%ROWTYPE;
		   BEGIN
             OPEN RefTEMP;
			 FETCH RefTEMP INTO enreg;
			 IF RefTEMP%NOTFOUND THEN
			 	OPEN GetCip_id.RefSPEPRESENTATION FOR
					  SELECT DISTINCT a.ID_SPEPRESENTATION, a.ID_SPECIALITE, a.CIP,
                               a.UCD, a.AMMEUROPE,  a.LIEUDISPO,
                               a.CONDDISPO, a.LISTE, a.DUREEPRESCRIPTION,
                               a.PRESCRIPTIONINITIALE, a.PRESCRIPTIONRESERVEE,
                               a.RENOUVELRESERVE, a.MEDPARTIC, a.NATURESURVEILLANCE,
                               a.CODEREFERANTGENERIQUE, a.REMPLACE, a.SOURCEREMPLACE,
                               a.DATESOURCEREMPLACE, a.REMPLACEPAR, a.SOURCEREMPLACEPAR,
                               a.DATESOURCEREMPLACEPAR, a.PRIXPRODHTF, a.PRIXPUBLICTTCF,
                               a.PRIXPRODHTE, a.PRIXPUBLICTTCE, a.TVA, a.DCREAT, a.DMODIF,
                               a.DREVIS, a.CIPREFERANT, '' EVENEMENT, '' DATEEVENEMENT,
                               b.DENOMSPE||DECODE(Condi,NULL,'',' : '||Condi) DenomCip,
                               a.disponibilite, a.nbprise, a.priseunitaire
               FROM            SPECIALITE b, SPEPRESENTATION a
               WHERE           a.Id_Spepresentation = GetCip_id.Id_Spepresentation
                 AND           b.ID_SPECIALITE           = a.ID_SPECIALITE;
              --   AND           c.ID_SPEPRESENTATION (+)  = a.ID_SPEPRESENTATION
              --   AND           UPPER(c.TYPECONDPRIMAIRE (+)) = 'DENOMCIP';

			 ELSE
			 	 IF enreg.evenement IS NULL THEN
				 	OPEN GetCip_id.RefSPEPRESENTATION FOR
						SELECT DISTINCT a.ID_SPEPRESENTATION, a.ID_SPECIALITE, a.CIP,
                               a.UCD, a.AMMEUROPE, a.LIEUDISPO,
                               a.CONDDISPO, a.LISTE, a.DUREEPRESCRIPTION,
                               a.PRESCRIPTIONINITIALE, a.PRESCRIPTIONRESERVEE,
                               a.RENOUVELRESERVE, a.MEDPARTIC, a.NATURESURVEILLANCE,
                               a.CODEREFERANTGENERIQUE, a.REMPLACE, a.SOURCEREMPLACE,
                               a.DATESOURCEREMPLACE, a.REMPLACEPAR, a.SOURCEREMPLACEPAR,
                               a.DATESOURCEREMPLACEPAR, a.PRIXPRODHTF, a.PRIXPUBLICTTCF,
                               a.PRIXPRODHTE, a.PRIXPUBLICTTCE, a.TVA, a.DCREAT, a.DMODIF,
                               a.DREVIS, a.CIPREFERANT, '' EVENEMENT, '' DATEEVENEMENT,
                               b.DENOMSPE||DECODE(Condi,NULL,'',' : '||Condi) DenomCip,
                               a.disponibilite, a.nbprise, a.priseunitaire
               FROM            SPECIALITE b, SPEPRESENTATION a
               WHERE           a.Id_Spepresentation = GetCip_id.Id_Spepresentation
                 AND           b.ID_SPECIALITE           = a.ID_SPECIALITE ;
         --        AND           c.ID_SPEPRESENTATION (+)  = a.ID_SPEPRESENTATION
         --        AND           UPPER(c.TYPECONDPRIMAIRE (+)) = 'DENOMCIP';


				 ELSE
				 	OPEN GetCip_id.RefSPEPRESENTATION FOR
				 		SELECT DISTINCT a.ID_SPEPRESENTATION, a.ID_SPECIALITE, a.CIP,
                               a.UCD, a.AMMEUROPE, a.LIEUDISPO,
                               a.CONDDISPO, a.LISTE, a.DUREEPRESCRIPTION,
                               a.PRESCRIPTIONINITIALE, a.PRESCRIPTIONRESERVEE,
                               a.RENOUVELRESERVE, a.MEDPARTIC, a.NATURESURVEILLANCE,
                               a.CODEREFERANTGENERIQUE, a.REMPLACE, a.SOURCEREMPLACE,
                               a.DATESOURCEREMPLACE, a.REMPLACEPAR, a.SOURCEREMPLACEPAR,
                               a.DATESOURCEREMPLACEPAR, a.PRIXPRODHTF, a.PRIXPUBLICTTCF,
                               a.PRIXPRODHTE, a.PRIXPUBLICTTCE, a.TVA, a.DCREAT, a.DMODIF,
                               a.DREVIS, a.CIPREFERANT, d.EVENEMENT, d.DATEEVENEMENT,
                               b.DENOMSPE||DECODE(Condi,NULL,'',' : '||Condi) DenomCip,
                               a.disponibilite, a.nbprise, a.priseunitaire
               FROM            SPECIALITE b, SPEPRESENTATION a,  SPEEVTPRESENTATION d
               WHERE           a.Id_Spepresentation = GetCip_id.Id_Spepresentation
                 AND           b.ID_SPECIALITE           = a.ID_SPECIALITE
             --    AND           c.ID_SPEPRESENTATION (+)  = a.ID_SPEPRESENTATION
             --   AND           UPPER(c.TYPECONDPRIMAIRE (+)) = 'DENOMCIP'
				 AND		   d.ID_SPEPRESENTATION      = a.ID_SPEPRESENTATION
				 AND		   upper(d.EVENEMENT) LIKE '%REMB%'
				 AND           d.DATEEVENEMENT = ( SELECT MAX(g.DATEEVENEMENT)
                 			   				   	  FROM   SPEEVTPRESENTATION g
                                                  WHERE  g.ID_SPEPRESENTATION = d.ID_SPEPRESENTATION
                                                  AND  UPPER(g.evenement) LIKE '%REMB%');
				 END IF;
		     END IF;

			 CLOSE RefTEMP;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCip_id%');
--         COMMIT;
-------------------------------------------------------------
             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;


           END GetCip_id;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCipFull_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetCipFull_id ( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation      DEFAULT NULL,
                                  RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONFULLCurTyp,
                                  Ret                  OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetCipFull_id ( Id_Spepresentation, RefSPEPRESENTATION);
           END GetCipFull_id;

           FUNCTION GetCipFull_id ( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation       DEFAULT NULL,
                                 RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONFULLCurTyp)
                               RETURN NUMBER IS
           BEGIN
             OPEN GetCipFull_id.RefSPEPRESENTATION FOR
               SELECT DISTINCT a.ID_SPEPRESENTATION, a.ID_SPECIALITE, a.CIP,
                               a.UCD, a.AMMEUROPE,  a.LIEUDISPO,
                               a.CONDDISPO, a.LISTE, a.DUREEPRESCRIPTION,
                               a.PRESCRIPTIONINITIALE, a.PRESCRIPTIONRESERVEE,
                               a.RENOUVELRESERVE, a.MEDPARTIC, a.NATURESURVEILLANCE,
                               a.CODEREFERANTGENERIQUE, a.REMPLACE, a.SOURCEREMPLACE,
                               a.DATESOURCEREMPLACE, a.REMPLACEPAR, a.SOURCEREMPLACEPAR,
                               a.DATESOURCEREMPLACEPAR, a.PRIXPRODHTF, a.PRIXPUBLICTTCF,
                               a.PRIXPRODHTE, a.PRIXPUBLICTTCE, a.TVA, a.DCREAT, a.DMODIF,
                               a.DREVIS, a.CIPREFERANT, b.DENOMSPE||DECODE(a.Condi,NULL,'',' : '||a.Condi) DenomCip ,
                               a.EAN13, a.REFERENCECATALOGUE, a.CLINIQUE, a.MARQUE,
                               a.CLASSIFICATIONSTRUCTUREE, a.FAMILLESEMP_LIBELLE,
                               a.GRANDEURUNITEMESURE, a.REFERENCEUNITEMESURE, a.CODEINVENTOREX,
                               a.LIBELLEINVENTOREX, a.PRIXHOPITALHT, a.PRIXDEPARTLABORATOIREHT,
                               a.TVAMULTIPLICATEUR, a.TVADIVISEUR, a.DUREESTOCKAGE, a.TEMPSSTOCKAGE,
                               a.TEMPERATUREMIN, a.TEMPERATUREMAX, a.DUREEAPRESDESTOCKAGE,
                               a.TEMPSAPRESDESTOCKAGE, a.POIDSNET, a.VOLUMENET, a.CODEB2,
                               a.TIPS, a.FICHECARACTERISTIQUE, a.BASEREMBOURSEMENT, a.disponibilite,
                               a.nbprise, a.priseunitaire
               FROM            SPECIALITE b, SPEPRESENTATION a
               WHERE           a.Id_Spepresentation      = GetCipFull_id.Id_Spepresentation
                 AND           b.ID_SPECIALITE           = a.ID_SPECIALITE;
   --              AND           a.ID_SPEPRESENTATION      = c.ID_SPEPRESENTATION
   --              AND           d.ID_SPEPRESENTATION (+)  = a.ID_SPEPRESENTATION
   --              AND           UPPER(d.TYPECONDPRIMAIRE (+)) = 'DENOMCIP';

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCipFull_id%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetCipFull_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCip_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetCip_txt ( Cip                  IN    Spepresentation_Pubres.Cip                     DEFAULT NULL,
                              RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp1,
                              Ret                  OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetCip_txt ( Cip, RefSPEPRESENTATION);
           END GetCip_txt;
           FUNCTION GetCip_txt ( Cip                  IN    Spepresentation_Pubres.Cip                      DEFAULT NULL,
                             RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp1)
                           RETURN NUMBER IS
           CURSOR RefTEMP IS
		   		  SELECT a.ID_SPEPRESENTATION, b.EVENEMENT, b.DATEEVENEMENT FROM SPEPRESENTATION a, SPEEVTPRESENTATION b
				  		 WHERE a.Cip = GetCip_txt.Cip
						 AND   a.ID_SPEPRESENTATION = b.ID_SPEPRESENTATION(+)
						 AND   upper(b.EVENEMENT(+)) LIKE '%REMB%';
		   enreg RefTEMP%ROWTYPE;
		   BEGIN
             OPEN RefTEMP;
			 FETCH RefTEMP INTO enreg;
			 IF RefTEMP%NOTFOUND THEN
			 	OPEN GetCip_txt.RefSPEPRESENTATION FOR
               		 SELECT DISTINCT a.ID_SPEPRESENTATION, a.ID_SPECIALITE, a.CIP,
                               a.UCD, a.AMMEUROPE,  a.LIEUDISPO,
                               a.CONDDISPO, a.LISTE, a.DUREEPRESCRIPTION,
                               a.PRESCRIPTIONINITIALE, a.PRESCRIPTIONRESERVEE,
                               a.RENOUVELRESERVE, a.MEDPARTIC, a.NATURESURVEILLANCE,
                               a.CODEREFERANTGENERIQUE, a.REMPLACE, a.SOURCEREMPLACE,
                               a.DATESOURCEREMPLACE, a.REMPLACEPAR, a.SOURCEREMPLACEPAR,
                               a.DATESOURCEREMPLACEPAR, a.PRIXPRODHTF, a.PRIXPUBLICTTCF,
                               a.PRIXPRODHTE, a.PRIXPUBLICTTCE, a.TVA, a.DCREAT, a.DMODIF,
                               a.DREVIS, a.CIPREFERANT, '' EVENEMENT, '' DATEEVENEMENT,
                               b.DENOMSPE||DECODE(Condi,NULL,'',' : '||Condi) DenomCip,
                               a.disponibilite, a.nbprise, a.priseunitaire
               FROM            SPECIALITE b, SPEPRESENTATION a
               WHERE           a.Cip                     = GetCip_txt.Cip
                 AND           b.ID_SPECIALITE           = a.ID_SPECIALITE;
            --     AND           c.ID_SPEPRESENTATION (+)  = a.ID_SPEPRESENTATION
            --     AND           UPPER(c.TYPECONDPRIMAIRE (+)) = 'DENOMCIP';
			 ELSE
			 	 IF enreg.evenement IS NULL THEN
				 	OPEN GetCip_txt.RefSPEPRESENTATION FOR
						SELECT DISTINCT a.ID_SPEPRESENTATION, a.ID_SPECIALITE, a.CIP,
                               a.UCD, a.AMMEUROPE, a.LIEUDISPO,
                               a.CONDDISPO, a.LISTE, a.DUREEPRESCRIPTION,
                               a.PRESCRIPTIONINITIALE, a.PRESCRIPTIONRESERVEE,
                               a.RENOUVELRESERVE, a.MEDPARTIC, a.NATURESURVEILLANCE,
                               a.CODEREFERANTGENERIQUE, a.REMPLACE, a.SOURCEREMPLACE,
                               a.DATESOURCEREMPLACE, a.REMPLACEPAR, a.SOURCEREMPLACEPAR,
                               a.DATESOURCEREMPLACEPAR, a.PRIXPRODHTF, a.PRIXPUBLICTTCF,
                               a.PRIXPRODHTE, a.PRIXPUBLICTTCE, a.TVA, a.DCREAT, a.DMODIF,
                               a.DREVIS, a.CIPREFERANT, '' EVENEMENT, '' DATEEVENEMENT,
                               b.DENOMSPE||DECODE(Condi,NULL,'',' : '||Condi) DenomCip,
                               a.disponibilite, a.nbprise, a.priseunitaire
               FROM            SPECIALITE b, SPEPRESENTATION a
               WHERE           a.Cip = GetCip_txt.Cip
                 AND           b.ID_SPECIALITE           = a.ID_SPECIALITE;
              --   AND           c.ID_SPEPRESENTATION (+)  = a.ID_SPEPRESENTATION
              --   AND           UPPER(c.TYPECONDPRIMAIRE (+)) = 'DENOMCIP';
				 ELSE
				    OPEN GetCip_txt.RefSPEPRESENTATION FOR
				 		SELECT DISTINCT a.ID_SPEPRESENTATION, a.ID_SPECIALITE, a.CIP,
                               a.UCD, a.AMMEUROPE, a.LIEUDISPO,
                               a.CONDDISPO, a.LISTE, a.DUREEPRESCRIPTION,
                               a.PRESCRIPTIONINITIALE, a.PRESCRIPTIONRESERVEE,
                               a.RENOUVELRESERVE, a.MEDPARTIC, a.NATURESURVEILLANCE,
                               a.CODEREFERANTGENERIQUE, a.REMPLACE, a.SOURCEREMPLACE,
                               a.DATESOURCEREMPLACE, a.REMPLACEPAR, a.SOURCEREMPLACEPAR,
                               a.DATESOURCEREMPLACEPAR, a.PRIXPRODHTF, a.PRIXPUBLICTTCF,
                               a.PRIXPRODHTE, a.PRIXPUBLICTTCE, a.TVA, a.DCREAT, a.DMODIF,
                               a.DREVIS, a.CIPREFERANT, d.EVENEMENT, d.DATEEVENEMENT,
                               b.DENOMSPE||DECODE(Condi,NULL,'',' : '||Condi) DenomCip,
                               a.disponibilite, a.nbprise, a.priseunitaire
               FROM            SPECIALITE b, SPEPRESENTATION a, SPEEVTPRESENTATION d
               WHERE           a.Cip = GetCip_txt.Cip
                 AND           b.ID_SPECIALITE           = a.ID_SPECIALITE
            --     AND           c.ID_SPEPRESENTATION (+)  = a.ID_SPEPRESENTATION
            --     AND           UPPER(c.TYPECONDPRIMAIRE (+)) = 'DENOMCIP'
				 AND		   d.ID_SPEPRESENTATION      = a.ID_SPEPRESENTATION
				 AND		   upper(d.EVENEMENT) LIKE '%REMB%'
				 AND           d.DATEEVENEMENT = ( SELECT MAX(g.DATEEVENEMENT)
                 			   				   	  FROM   SPEEVTPRESENTATION g
                                                  WHERE  g.ID_SPEPRESENTATION = d.ID_SPEPRESENTATION
                                                  AND  UPPER(g.evenement) LIKE '%REMB%');
				 END IF;
			 END IF;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCip_txt%');
--         COMMIT;
-------------------------------------------------------------
             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetCip_txt;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCipSpe_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetCipSpe_id ( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation   DEFAULT NULL,
                                 RefSPECIALITE        OUT   Specialite_Pubres.SPECIALITECurTyp,
                                 Ret                  OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetCipSpe_id ( Id_Spepresentation, RefSPECIALITE);
           END GetCipSpe_id;
           FUNCTION GetCipSpe_id ( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation    DEFAULT NULL,
                                RefSPECIALITE        OUT   Specialite_Pubres.SPECIALITECurTyp)
                              RETURN NUMBER IS
           BEGIN
             OPEN GetCipSpe_id.RefSPECIALITE FOR
               SELECT  b.ID_SPECIALITE, b.BVALID, b.BENCOURS, b.NOMUSER,
                       b.DENOMSPE, b.FORME, b.DOSAGE, b.complement,
                       b.COMMAMMPOSO, b.RESERVE, b.INFERIEURAGE,
                       b.UNITINF, b.SUPERIEURAGE, b.UNIFSUP,
                       b.INFERIEURPOIDS, b.SUPERIEURPOIDS,
                       b.DENOMAMM, b.NUMDOSAMM, b.SPECATEGORIE,
                       b.SOURCE, b.DATESOURCE, b.REMARQUES, b.DCREAT, b.DMODIF, b.DREVIS
               FROM    SPECIALITE b , SPEPRESENTATION a
               WHERE   (a.ID_SPEPRESENTATION = GetCipSpe_id.Id_Spepresentation OR GetCipSpe_id.Id_Spepresentation IS NULL)
                 AND   b.ID_SPECIALITE = a.ID_SPECIALITE;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCipSpe_id%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetCipSpe_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCipSpe_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetCipSpe_txt ( Cip             IN    Spepresentation_Pubres.Cip           DEFAULT NULL,
                                 RefSPECIALITE   OUT   Specialite_Pubres.SPECIALITECurTyp,
                                 Ret             OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetCipSpe_txt ( Cip, RefSPECIALITE);
           END GetCipSpe_txt;
           FUNCTION GetCipSpe_txt ( Cip             IN    Spepresentation_Pubres.Cip            DEFAULT NULL,
                                RefSPECIALITE   OUT   Specialite_Pubres.SPECIALITECurTyp)
                              RETURN NUMBER IS
           BEGIN
             OPEN GetCipSpe_txt.RefSPECIALITE FOR
               SELECT  b.ID_SPECIALITE, b.BVALID, b.BENCOURS, b.NOMUSER,
                       b.DENOMSPE, b.FORME, b.DOSAGE, b.complement,
                       b.COMMAMMPOSO, b.RESERVE, b.INFERIEURAGE,
                       b.UNITINF, b.SUPERIEURAGE, b.UNIFSUP,
                       b.INFERIEURPOIDS, b.SUPERIEURPOIDS,
                       b.DENOMAMM, b.NUMDOSAMM, b.SPECATEGORIE,
                       b.SOURCE, b.DATESOURCE, b.REMARQUES, b.DCREAT, b.DMODIF, b.DREVIS
               FROM    SPECIALITE b , SPEPRESENTATION a
               WHERE   (a.Cip = GetCipSpe_txt.Cip OR GetCipSpe_txt.Cip IS NULL)
                 AND   b.ID_SPECIALITE = a.ID_SPECIALITE;
             RETURN 1;
-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCipSpe_txt%');
--         COMMIT;
-------------------------------------------------------------
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetCipSpe_txt;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCipDoc_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetCipDoc_id ( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation,
                                 RefSpesuiviSgml      OUT   Spesuivisgml_Pubres.SPESUIVISGMLCurTypR,
                                 Ret                  OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetCipDoc_id ( Id_Spepresentation, RefSpesuiviSgml);
           END GetCipDoc_id;
           FUNCTION GetCipDoc_id ( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation,
                                RefSpesuiviSgml      OUT   Spesuivisgml_Pubres.SPESUIVISGMLCurTypR)
                              RETURN NUMBER IS
           BEGIN
             OPEN GetCipDoc_id.RefSpesuiviSgml FOR
               SELECT  ID_SPESUIVISGML, ID_SPEPRESENTATION, MONOGRAPHIE
               FROM    SPESUIVISGML
               WHERE   ID_SPEPRESENTATION = GetCipDoc_id.Id_Spepresentation;
             RETURN 1;
-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCipDoc_id%');
--         COMMIT;
-------------------------------------------------------------
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetCipDoc_id;
-- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCipDoc_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetCipDoc_txt ( Cip                  IN    Spepresentation_Pubres.Cip,
                                 RefSpesuiviSgml      OUT   Spesuivisgml_Pubres.SPESUIVISGMLCurTypR,
                                 Ret                  OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetCipDoc_txt ( Cip, RefSpesuiviSgml);
           END GetCipDoc_txt;
           FUNCTION GetCipDoc_txt ( Cip                  IN    Spepresentation_Pubres.Cip,
                                RefSpesuiviSgml      OUT   Spesuivisgml_Pubres.SPESUIVISGMLCurTypR)
                              RETURN NUMBER IS
           BEGIN
             OPEN GetCipDoc_txt.RefSpesuiviSgml FOR
               SELECT  a.ID_SPESUIVISGML, a.ID_SPEPRESENTATION, a.MONOGRAPHIE
               FROM    SPESUIVISGML a, SPEPRESENTATION b
			   WHERE   b.Cip = GetCipDoc_txt.Cip
               AND     a.ID_SPEPRESENTATION = b.ID_SPEPRESENTATION;
             RETURN 1;
-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCipDoc_txt%');
--         COMMIT;
-------------------------------------------------------------
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetCipDoc_txt;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCipGen_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetCipGen_id( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation      DEFAULT NULL,
                                 RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp,
                                 Ret                  OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetCipGen_id ( Id_Spepresentation, RefSPEPRESENTATION);
           END GetCipGen_id;
           FUNCTION GetCipGen_id ( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation       DEFAULT NULL,
                             RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp)
                             RETURN NUMBER IS

       Supp    VARCHAR2(10);

           BEGIN

             --Supp := '4,5';

             OPEN GetCipGen_id.RefSPEPRESENTATION FOR
			   -- si le médicament est un générique, recherche des autres génériques et du référant
               SELECT * FROM (
               SELECT DISTINCT a.ID_SPEPRESENTATION, a.ID_SPECIALITE, a.CIP,
                               a.UCD, a.AMMEUROPE, a.LIEUDISPO,
                               a.CONDDISPO, a.LISTE, a.DUREEPRESCRIPTION,
                               a.PRESCRIPTIONINITIALE, a.PRESCRIPTIONRESERVEE,
                               a.RENOUVELRESERVE, a.MEDPARTIC, a.NATURESURVEILLANCE,
                               a.CODEREFERANTGENERIQUE, a.REMPLACE, a.SOURCEREMPLACE,
                               a.DATESOURCEREMPLACE, a.REMPLACEPAR, a.SOURCEREMPLACEPAR,
                               a.DATESOURCEREMPLACEPAR, a.PRIXPRODHTF, a.PRIXPUBLICTTCF,
                               a.PRIXPRODHTE, a.PRIXPUBLICTTCE, a.TVA, a.DCREAT, a.DMODIF,
                               a.DREVIS, a.CIPREFERANT,
                               b.DENOMSPE||DECODE(a.Condi,NULL,'',' : '||a.Condi) DenomCip,
                               a.disponibilite, a.nbprise, a.priseunitaire, a.codedispo codedispo
               FROM            SPECIALITE b, SPEPRESENTATION d, SPEPRESENTATION a
               WHERE           d.Id_Spepresentation = GetCipGen_id.Id_Spepresentation
                 AND           d.cipreferant IS NOT NULL
				 AND		   (d.cipreferant = a.cipreferant OR a.cip = d.cipreferant)
				 AND 		   b.id_specialite = a.id_specialite
         AND		   a.codedispo NOT IN (4,5)

			   UNION
			   -- si le médicament est un référant, recherche de lui-même et des génériques
			   SELECT DISTINCT a.ID_SPEPRESENTATION, a.ID_SPECIALITE, a.CIP,
                               a.UCD, a.AMMEUROPE, a.LIEUDISPO,
                               a.CONDDISPO, a.LISTE, a.DUREEPRESCRIPTION,
                               a.PRESCRIPTIONINITIALE, a.PRESCRIPTIONRESERVEE,
                               a.RENOUVELRESERVE, a.MEDPARTIC, a.NATURESURVEILLANCE,
                               a.CODEREFERANTGENERIQUE, a.REMPLACE, a.SOURCEREMPLACE,
                               a.DATESOURCEREMPLACE, a.REMPLACEPAR, a.SOURCEREMPLACEPAR,
                               a.DATESOURCEREMPLACEPAR, a.PRIXPRODHTF, a.PRIXPUBLICTTCF,
                               a.PRIXPRODHTE, a.PRIXPUBLICTTCE, a.TVA, a.DCREAT, a.DMODIF,
                               a.DREVIS, a.CIPREFERANT,
                               b.DENOMSPE||DECODE(a.Condi,NULL,'',' : '||a.Condi) DenomCip,
                               a.disponibilite, a.nbprise, a.priseunitaire, a.codedispo codedispo
               FROM            SPEPRESENTATION a, SPECIALITE b, SPEPRESENTATION d
               WHERE           d.Id_Spepresentation = GetCipGen_id.Id_Spepresentation
                 AND		   (a.cipreferant = d.CIP or (a.CIP = d.CIP and a.CODEREFERANTGENERIQUE = 'R'))
			        	 AND		   b.id_specialite = a.id_specialite
                 AND		   a.codedispo NOT IN (4,5)
                 ) ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), denomcip;
-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCipGen_id%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetCipGen_id;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCipSpeDopante_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetCipSpeDopante_id ( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation   DEFAULT NULL,
                                 RefSPECIALITE        OUT   Specialite_Pubres.SPECIALITEDopantCurTyp ,
                                 Ret                  OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetCipSpeDopante_id ( Id_Spepresentation, RefSPECIALITE);
           END GetCipSpeDopante_id;
           FUNCTION GetCipSpeDopante_id ( Id_Spepresentation   IN    Spepresentation_Pubres.Id_Spepresentation    DEFAULT NULL,
                                RefSPECIALITE        OUT   Specialite_Pubres.SPECIALITEDopantCurTyp )
                              RETURN NUMBER IS
           BEGIN
             OPEN GetCipSpeDopante_id.RefSPECIALITE FOR
               SELECT  b.ID_SPECIALITE, b.BVALID, b.BENCOURS, b.NOMUSER,
                       b.DENOMSPE, b.FORME, b.DOSAGE, b.complement,
                       b.COMMAMMPOSO, b.RESERVE, b.INFERIEURAGE,
                       b.UNITINF, b.SUPERIEURAGE, b.UNIFSUP,
                       b.INFERIEURPOIDS, b.SUPERIEURPOIDS,
                       b.DENOMAMM, b.NUMDOSAMM, b.SPECATEGORIE,
                       b.SOURCE, b.DATESOURCE, b.REMARQUES, b.DCREAT,
                       b.DMODIF, b.DREVIS, b.BDOPANT
               FROM    SPECIALITE b , SPEPRESENTATION a
               WHERE   (a.ID_SPEPRESENTATION = GetCipSpeDopante_id.Id_Spepresentation
               OR GetCipSpeDopante_id.Id_Spepresentation IS NULL)
                 AND   b.ID_SPECIALITE = a.ID_SPECIALITE
               ORDER BY b.DENOMSPE;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCipSpeDopante_id%');
--         COMMIT;
-------------------------------------------------------------
             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetCipSpeDopante_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCipSpeDopante_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetCipSpeDopante_txt ( Cip             IN    Spepresentation_Pubres.Cip           DEFAULT NULL,
                                 RefSPECIALITE   OUT   Specialite_Pubres.SPECIALITEDopantCurTyp ,
                                 Ret             OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetCipSpeDopante_txt ( Cip, RefSPECIALITE);
           END GetCipSpeDopante_txt;
           FUNCTION GetCipSpeDopante_txt ( Cip             IN    Spepresentation_Pubres.Cip            DEFAULT NULL,
                                RefSPECIALITE   OUT   Specialite_Pubres.SPECIALITEDopantCurTyp )
                              RETURN NUMBER IS
           BEGIN
             OPEN GetCipSpeDopante_txt.RefSPECIALITE FOR
               SELECT  b.ID_SPECIALITE, b.BVALID, b.BENCOURS, b.NOMUSER,
                       b.DENOMSPE, b.FORME, b.DOSAGE, b.complement,
                       b.COMMAMMPOSO, b.RESERVE, b.INFERIEURAGE,
                       b.UNITINF, b.SUPERIEURAGE, b.UNIFSUP,
                       b.INFERIEURPOIDS, b.SUPERIEURPOIDS,
                       b.DENOMAMM, b.NUMDOSAMM, b.SPECATEGORIE,
                       b.SOURCE, b.DATESOURCE, b.REMARQUES, b.DCREAT,
                       b.DMODIF, b.DREVIS, b.BDOPANT
               FROM    SPECIALITE b , SPEPRESENTATION a
               WHERE   (a.Cip = GetCipSpeDopante_txt.Cip OR GetCipSpeDopante_txt.Cip IS NULL)
                 AND   b.ID_SPECIALITE = a.ID_SPECIALITE
               ORDER BY b.DENOMSPE;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCipSpeDopante_txt%');
--         COMMIT;
-------------------------------------------------------------
             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetCipSpeDopante_txt;


  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCip_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetCipNoHOP_id ( Id_Specialite   IN    Spepresentation_Pubres.Id_Spepresentation      DEFAULT NULL,
                              RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp1,
                              Ret                  OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetCipNoHOP_id ( Id_Specialite, RefSPEPRESENTATION);
           END GetCipNoHOP_id;
           FUNCTION GetCipNoHOP_id ( Id_Specialite   IN    Spepresentation_Pubres.Id_Spepresentation       DEFAULT NULL,
                             RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp1)
                           RETURN NUMBER IS

		   CURSOR RefTEMP IS
		   		  SELECT a.ID_SPEPRESENTATION, b.EVENEMENT, b.DATEEVENEMENT FROM SPEPRESENTATION a, SPEEVTPRESENTATION b
				  		 WHERE a.ID_SPEPRESENTATION = GetCipNoHOP_id.Id_Specialite
						 AND   a.ID_SPEPRESENTATION = b.ID_SPEPRESENTATION(+)
						 AND   upper(b.EVENEMENT(+)) LIKE '%REMB%';
		   enreg RefTEMP%ROWTYPE;
		   BEGIN
             OPEN RefTEMP;
			 FETCH RefTEMP INTO enreg;
			 IF RefTEMP%NOTFOUND THEN
			 	OPEN GetCipNoHOP_id.RefSPEPRESENTATION FOR
					  SELECT DISTINCT a.ID_SPEPRESENTATION, a.ID_SPECIALITE, a.CIP,
                               a.UCD, a.AMMEUROPE, a.LIEUDISPO,
                               a.CONDDISPO, a.LISTE, a.DUREEPRESCRIPTION,
                               a.PRESCRIPTIONINITIALE, a.PRESCRIPTIONRESERVEE,
                               a.RENOUVELRESERVE, a.MEDPARTIC, a.NATURESURVEILLANCE,
                               a.CODEREFERANTGENERIQUE, a.REMPLACE, a.SOURCEREMPLACE,
                               a.DATESOURCEREMPLACE, a.REMPLACEPAR, a.SOURCEREMPLACEPAR,
                               a.DATESOURCEREMPLACEPAR, a.PRIXPRODHTF, a.PRIXPUBLICTTCF,
                               a.PRIXPRODHTE, a.PRIXPUBLICTTCE, a.TVA, a.DCREAT, a.DMODIF,
                               a.DREVIS, a.CIPREFERANT, '' EVENEMENT, '' DATEEVENEMENT,
                               b.DENOMSPE||DECODE(Condi,NULL,'',' : '||Condi) DenomCip,
                               a.disponibilite, a.nbprise, a.priseunitaire
               FROM            SPECIALITE b, SPEPRESENTATION a
               WHERE           a.Id_Specialite = GetCipNoHOP_id.Id_Specialite
                 AND           b.ID_SPECIALITE           = a.ID_SPECIALITE
                -- AND           c.ID_SPEPRESENTATION (+)  = a.ID_SPEPRESENTATION
                -- AND           UPPER(c.TYPECONDPRIMAIRE (+)) = 'DENOMCIP'
                 AND           Condi not like '%[HOP]%'
                 ORDER BY      Denomcip;

			 ELSE
			 	 IF enreg.evenement IS NULL THEN
				 	OPEN GetCipNoHOP_id.RefSPEPRESENTATION FOR
						SELECT DISTINCT a.ID_SPEPRESENTATION, a.ID_SPECIALITE, a.CIP,
                               a.UCD, a.AMMEUROPE, a.LIEUDISPO,
                               a.CONDDISPO, a.LISTE, a.DUREEPRESCRIPTION,
                               a.PRESCRIPTIONINITIALE, a.PRESCRIPTIONRESERVEE,
                               a.RENOUVELRESERVE, a.MEDPARTIC, a.NATURESURVEILLANCE,
                               a.CODEREFERANTGENERIQUE, a.REMPLACE, a.SOURCEREMPLACE,
                               a.DATESOURCEREMPLACE, a.REMPLACEPAR, a.SOURCEREMPLACEPAR,
                               a.DATESOURCEREMPLACEPAR, a.PRIXPRODHTF, a.PRIXPUBLICTTCF,
                               a.PRIXPRODHTE, a.PRIXPUBLICTTCE, a.TVA, a.DCREAT, a.DMODIF,
                               a.DREVIS, a.CIPREFERANT, '' EVENEMENT, '' DATEEVENEMENT,
                               b.DENOMSPE||DECODE(Condi,NULL,'',' : '||Condi) DenomCip,
                               a.disponibilite, a.nbprise, a.priseunitaire
               FROM            SPECIALITE b, SPEPRESENTATION a
               WHERE           a.Id_Specialite = GetCipNoHOP_id.Id_Specialite
                 AND           b.ID_SPECIALITE           = a.ID_SPECIALITE
                -- AND           c.ID_SPEPRESENTATION (+)  = a.ID_SPEPRESENTATION
                -- AND           UPPER(c.TYPECONDPRIMAIRE (+)) = 'DENOMCIP'
                 AND           Condi not like '%[HOP]%'
                 ORDER BY      Denomcip;


				 ELSE
				 	OPEN GetCipNoHOP_id.RefSPEPRESENTATION FOR
				 		SELECT DISTINCT a.ID_SPEPRESENTATION, a.ID_SPECIALITE, a.CIP,
                               a.UCD, a.AMMEUROPE, a.LIEUDISPO,
                               a.CONDDISPO, a.LISTE, a.DUREEPRESCRIPTION,
                               a.PRESCRIPTIONINITIALE, a.PRESCRIPTIONRESERVEE,
                               a.RENOUVELRESERVE, a.MEDPARTIC, a.NATURESURVEILLANCE,
                               a.CODEREFERANTGENERIQUE, a.REMPLACE, a.SOURCEREMPLACE,
                               a.DATESOURCEREMPLACE, a.REMPLACEPAR, a.SOURCEREMPLACEPAR,
                               a.DATESOURCEREMPLACEPAR, a.PRIXPRODHTF, a.PRIXPUBLICTTCF,
                               a.PRIXPRODHTE, a.PRIXPUBLICTTCE, a.TVA, a.DCREAT, a.DMODIF,
                               a.DREVIS, a.CIPREFERANT, d.EVENEMENT, d.DATEEVENEMENT,
                               b.DENOMSPE||DECODE(Condi,NULL,'',' : '||Condi) DenomCip,
                               a.disponibilite, a.nbprise, a.priseunitaire
               FROM            SPECIALITE b, SPEPRESENTATION a, SPEEVTPRESENTATION d
               WHERE           a.Id_Specialite = GetCipNoHOP_id.Id_Specialite
                 AND           b.ID_SPECIALITE           = a.ID_SPECIALITE
       --          AND           c.ID_SPEPRESENTATION (+)  = a.ID_SPEPRESENTATION
       --          AND           UPPER(c.TYPECONDPRIMAIRE (+)) = 'DENOMCIP'
				   AND		   d.ID_SPEPRESENTATION      = a.ID_SPEPRESENTATION
				   AND		   upper(d.EVENEMENT) LIKE '%REMB%'
				   AND           d.DATEEVENEMENT = ( SELECT MAX(g.DATEEVENEMENT)
                 			   				   	  FROM   SPEEVTPRESENTATION g
                                                  WHERE  g.ID_SPEPRESENTATION = d.ID_SPEPRESENTATION
                                                  AND  UPPER(g.evenement) LIKE '%REMB%')
           AND           Condi not like '%[HOP]%'
           ORDER BY      Denomcip;

				 END IF;
		   END IF;

			 CLOSE RefTEMP;
             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetCipNoHOP_id;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCipsNoHOP_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- Modification #1 : dans le cas du passage d'une substance, on
  --                   cherchera également les CIP dont une substance
  --                   fille correspond au critère Terme.
  -- --------------------------------------------------------------

           PROCEDURE GetCipsNoHOP_txt ( Terme                IN    VARCHAR2,
                               Typ                  IN    INTEGER,
                               Domain               IN    INTEGER,
                               ordre                IN    INTEGER    DEFAULT 1,
                               RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurRef,
                               Ret                  OUT   NUMBER)
           IS
           BEGIN
                 Ret:= GetCipsNoHOP_txt ( Terme, Typ, Domain, ordre, RefSPEPRESENTATION);
           END GetCipsNoHOP_txt;
           FUNCTION GetCipsNoHOP_txt ( Terme                IN    VARCHAR2,
                              Typ                  IN    INTEGER,
                              Domain               IN    INTEGER,
                              ordre                IN    INTEGER                                         DEFAULT 1,
                              RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurRef)
                            RETURN NUMBER IS
       ordonn VARCHAR2(50);
		   domaine VARCHAR2(50);
		   Requete VARCHAR2(4000);
		   Reqsubst VARCHAR2(5000);
           BEGIN

		   domaine := AVIDAL_PUBRES.DecodeDomain(getCipsNoHOP_txt.Domain);

		   ---------------------------------
		   -- requete par nom de specialite
		   ---------------------------------

              IF typ = 1 THEN
		   	   -- partie commune de la requete quelque soit le tri
		   	   Requete := 'SELECT   /*+ RULE */ b.ID_SPEPRESENTATION, b.ID_SPECIALITE, b.CIP,'
                        ||  'b.UCD, b.AMMEUROPE, b.LIEUDISPO,'
                        ||  'b.CONDDISPO, b.LISTE, b.DUREEPRESCRIPTION,'
                        ||  'b.PRESCRIPTIONINITIALE, b.PRESCRIPTIONRESERVEE,'
                        ||  'b.RENOUVELRESERVE, b.MEDPARTIC, b.NATURESURVEILLANCE,'
                        ||  'b.CODEREFERANTGENERIQUE, b.REMPLACE, b.SOURCEREMPLACE,'
                        ||  'b.DATESOURCEREMPLACE, b.REMPLACEPAR, b.SOURCEREMPLACEPAR,'
                        ||  'b.DATESOURCEREMPLACEPAR, b.PRIXPRODHTF, b.PRIXPUBLICTTCF,'
                        ||  'b.PRIXPRODHTE, b.PRIXPUBLICTTCE, b.TVA, b.DCREAT, b.DMODIF,';

             IF ordre = 2 OR ordre = 1 THEN

				 Requete := Requete ||  'b.DREVIS, b.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,'
                 ||  'a.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, b.disponibilite, b.nbprise, b.priseunitaire '
				 || ' FROM     SPEPRESENTATION b, SPECIALITE a'
                 || ' WHERE    UPPER(TRANSLATE(a.DENOMSPE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCipsNoHOP_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))'
                 || ' AND    b.ID_SPECIALITE           = a.ID_SPECIALITE'
              --  || ' AND    c.ID_SPEPRESENTATION (+)  = b.ID_SPEPRESENTATION'
              --   || ' AND    UPPER(c.TYPECONDPRIMAIRE (+)) = ''DENOMCIP'''
				         || ' AND    a.IDTYPESPE in ('||domaine||')'
                 || ' AND   Condi not like ''%[HOP]%''';
				 -- tri par prix croissant
				 IF ordre = 2 THEN
                 	Requete := Requete || ' ORDER BY PRIXPUBLICTTCE, DenomCip';
				 -- tri par ordre alpha
				 ELSE
				 	Requete := Requete || ' ORDER BY DenomCip';
				 END IF;

			 -- tri par taux de remboursement
             ELSIF ordre = 3 THEN
                  Requete := Requete || 'b.DREVIS, b.CIPREFERANT,f.EVENEMENT, f.DATEEVENEMENT,'
                 || ' a.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, b.disponibilite, b.nbprise, b.priseunitaire'
				 || ' FROM     SPEPRESENTATION b, SPECIALITE a, SPEEVTPRESENTATION f '
                 || ' WHERE    a.ID_SPECIALITE + 0 = b.ID_SPECIALITE'
                 ||'  AND    UPPER(TRANSLATE(a.DENOMSPE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCipsNoHOP_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))'
                 ||'  AND    b.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION'
             --    ||'  AND    c.ID_SPEPRESENTATION (+)  = b.ID_SPEPRESENTATION'
             --    ||'  AND    UPPER(c.TYPECONDPRIMAIRE (+)) = ''DENOMCIP'''
                 ||'  AND    f.DATEEVENEMENT = ( SELECT MAX(g.DATEEVENEMENT)'
                 ||                            ' FROM   SPEEVTPRESENTATION g'
                 ||                            ' WHERE  g.ID_SPEPRESENTATION = f.ID_SPEPRESENTATION'
                 ||                            '   AND  UPPER(g.evenement) LIKE ''%REMB%'')'
                 ||  ' AND    UPPER(f.evenement) LIKE ''%REMB%'''
                 ||  ' AND a.IDTYPESPE in ('||domaine||')'
                 ||  ' AND    Condi not like ''%[HOP]%'''
                 ||  ' ORDER BY f.EVENEMENT, DenomCip';
			 END IF;

			 	 OPEN GetCipsNoHOP_txt.RefSPEPRESENTATION FOR Requete;

--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		   ----------------------------------
           -- requete par nom de substance
		   ----------------------------------
		   ELSIF Typ = 2 Or Typ = 25 Or Typ = 27 THEN
			 -- partie commune de la requete : recherche dans T_SUB
			 Reqsubst := 'SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                     ||     'e.UCD, e.AMMEUROPE,  e.LIEUDISPO,'
                     ||     'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                     ||     'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                     ||     'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                     ||     'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                     ||     'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                     ||     'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                     ||     'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,';

			 IF ordre = 2 or ordre = 1 THEN
		             Reqsubst := Reqsubst || 'e.DREVIS, e.CIPREFERANT,'''' EVENEMENT, '''' DATEEVENEMENT,'
                     ||     'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, e.nbprise, e.priseunitaire '
                     || ' FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b ';
			 ELSIF ordre = 3 THEN
			         Reqsubst := Reqsubst || 'e.DREVIS, e.CIPREFERANT,h.EVENEMENT,max(h.DATEEVENEMENT),'
                     || 'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip,e.disponibilite, e.nbprise, e.priseunitaire '
                     ||' FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, SPEEVTPRESENTATION h ';

			 END IF;
			 Reqsubst := Reqsubst || ' WHERE    b.DENOMSUB IN ( SELECT LIBELLE'
                     ||                         ' FROM   T_SUB'
                     ||                         ' WHERE  UPPER(TRANSLATE(LIBELLE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCipsNoHOP_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))'
                     ||                       ' )'
                     ||   ' AND    c.ID_SPECOMPO                 = b.ID_SPECOMPO';
			IF Typ = 25 THEN
			   Reqsubst := Reqsubst || ' AND b.bconstactif = ''1''';
			ELSIF Typ = 27 THEN
			   Reqsubst := Reqsubst || ' AND b.bconstactif = ''0''';
			END IF;
			Reqsubst := Reqsubst || ' AND    d.ID_SPECIALITE               = c.ID_SPECIALITE '
                  || ' AND    e.ID_SPECIALITE               = d.ID_SPECIALITE'
              --    || ' AND    f.ID_SPEPRESENTATION (+) + 0  = e.ID_SPEPRESENTATION'
              --    || ' AND    UPPER(f.TYPECONDPRIMAIRE (+)) = ''DENOMCIP'''
        				  || ' AND    d.IDTYPESPE IN ('||domaine||')'
                  || ' AND    Condi not like ''%[HOP]%''';

			IF ordre = 3 THEN
			   Reqsubst := Reqsubst ||' AND    e.ID_SPEPRESENTATION          = h.ID_SPEPRESENTATION + 0'
                 ||' AND    UPPER(h.EVENEMENT) LIKE ''%REMB%'''
			     ||' GROUP BY e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                 ||         'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                 ||         'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                 ||         'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                 ||         'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                 ||         'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                 ||         'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                 ||         'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                 ||         'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                 ||         'e.DREVIS, e.CIPREFERANT,h.EVENEMENT,h.DATEEVENEMENT,'
                 ||         'd.DENOMSPE||DECODE(,NULL,'''','' : ''||Condi), e.disponibilite, e.nbprise, e.priseunitaire';
			end if;

			--recherche dans les synonymes
			Reqsubst := Reqsubst || ' UNION '
				  || ' SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP, '
                  ||        'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                  ||        'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                  ||        'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                  ||        'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                  ||        'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                  ||        'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                  ||        'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                  ||        'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,';

			IF ordre = 2 or ordre = 1 THEN
				  Reqsubst := Reqsubst || 'e.DREVIS, e.CIPREFERANT,'''' EVENEMENT, '''' DATEEVENEMENT,'
                  ||        'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, e.nbprise, e.priseunitaire '
                  || ' FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b ';
			ELSIF ordre = 3 THEN
				  Reqsubst := Reqsubst || 'e.DREVIS, e.CIPREFERANT,j.EVENEMENT,j.DATEEVENEMENT,'
                  ||        'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, e.nbprise, e.priseunitaire '
                  || ' FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, SPEEVTPRESENTATION j ';

			END IF;

			Reqsubst := Reqsubst || ' WHERE    b.DENOMSUB IN ( SELECT LIBELLE'
                 ||                         ' FROM   T_SUB'
                 ||                         ' WHERE  ID_T_SUB IN ( SELECT DISTINCT  f.ID_T_SUB_F'
                 ||                                             ' FROM             COUPLETERMETERME f'
                 ||                                             ' CONNECT BY PRIOR f.ID_T_SUB_F = f.ID_T_SUB_P'
                 ||                                             ' START WITH       f.ID_T_SUB_P IN ( SELECT g.ID_T_SUB'
                 ||                                                                              '  FROM   T_SUB g'
                 ||                                                                               ' WHERE  UPPER(TRANSLATE(g.LIBELLE,'''|| Avidal_Pubres.ch1 ||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCipsNoHOP_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))'
                 ||                                                                              ')'
                 ||                                            ')'
                 ||                       ')';

			IF Typ = 25 THEN
				   Reqsubst := Reqsubst || ' AND b.bconstactif = ''1''';
			ELSIF Typ = 27 THEN
				   Reqsubst := Reqsubst || ' AND b.bconstactif = ''0''';
			END IF;

			Reqsubst := Reqsubst ||  ' AND    c.ID_SPECOMPO    = b.ID_SPECOMPO'
                   || ' AND    d.ID_SPECIALITE           = c.ID_SPECIALITE'
                   || ' AND    e.ID_SPECIALITE           = d.ID_SPECIALITE'
               --    || ' AND    h.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION'
               --    || ' AND    UPPER(h.TYPECONDPRIMAIRE (+)) = ''DENOMCIP'''
				           || ' AND    d.IDTYPESPE IN ('||domaine||')'
                   || ' AND   Condi not like ''%[HOP]%''';

			IF ordre = 2 THEN
				   Reqsubst := Reqsubst || ' ORDER BY PRIXPUBLICTTCE, DenomCip';
		    ELSIF ordre = 1 THEN
				   Reqsubst := Reqsubst || ' ORDER BY DenomCip';
			ELSIF ordre = 3 THEN
				   Reqsubst := Reqsubst || ' AND    e.ID_SPEPRESENTATION      = j.ID_SPEPRESENTATION'
                || ' AND    UPPER(j.EVENEMENT) LIKE ''%REMB%'''
                ||' ORDER BY j.EVENEMENT, DenomCip';
				/*|| ' GROUP BY  e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                || 'e.UCD, e.AMMEUROPE, e.QTETOTALE, e.LIEUDISPO,'
                || 'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                || 'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                || 'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                || 'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                || 'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                || 'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                || 'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                || 'e.DREVIS, e.CIPREFERANT,j.EVENEMENT,'--j.DATEEVENEMENT,'
                || 'd.DENOMSPE||DECODE(h.Renscomp,NULL,'''','' : ''||h.RENSCOMP, e.disponibilite, e.nbprise, e.priseunitaire ';
				--|| 'group by j.dateevenement'
                ||' ORDER BY j.EVENEMENT';*/
			END IF;

			OPEN GetCipsNoHOP_txt.RefSPEPRESENTATION FOR Reqsubst;

       ----------------------------------------------
		   -- requete par une liste d'id de classes Théra
		   ----------------------------------------------
		   ELSIF Typ = 3 THEN

                 Requete := 'Select   /*+ RULE */         e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                         ||  'e.UCD, e.AMMEUROPE,  e.LIEUDISPO,'
                         ||  'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                         ||  'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                         ||  'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                         ||  'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                         ||  'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                         ||  'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                         ||  'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,';

				IF ordre = 2 or ordre = 1 THEN
				   Requete := Requete ||'e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,'
                         ||  'd.DENOMSPE||DECODE(Condi,NULL,'||''''''||','||''' : '''||'||Condi) DenomCip, e.disponibilite, e.nbprise, e.priseunitaire '
                  ||' FROM     SPEPRESENTATION e, SPECIALITE d ';

				    ELSIF ordre = 3 THEN
					  Requete := Requete || 'e.DREVIS, e.CIPREFERANT, h.EVENEMENT, h.DATEEVENEMENT,'
                   ||        'd.DENOMSPE||DECODE(,NULL,'||''''''||','||''' : '''||'||) DenomCip, e.disponibilite, e.nbprise, e.priseunitaire'
                 ||' FROM     SPEPRESENTATION e, SPECIALITE d, SPEEVTPRESENTATION h ';
            END IF;

				Requete := Requete ||' WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)'
				  ||                              ' FROM             SPECIALITE d, SPECLASSIRIS c'
				  ||				              ' WHERE            d.id_specialite = c.id_specialite'
                  ||                              '  AND            c.ID_DICOCOMCLASSIRIS IN ( SELECT           a.ID_DICOCOMCLASSIRIS'
                  ||                                                                         ' FROM             DICOCOMCLASSIRIS a'
                  ||                                                                         ' CONNECT BY PRIOR a.id_dicocomclassiris = a.dic_id_dicocomclassiris'
                  ||                                                                         ' START WITH       a.id_dicocomclassiris IN (' || GetCipsNoHOP_txt.Terme || ')))'
                  || ' AND    e.id_specialite           = d.id_specialite'
				          || ' AND    d.IDTYPESPE IN ('||domaine||')'
           --       || ' AND    f.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION'
           --       || ' AND    UPPER(f.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||''
                  || ' AND    Condi not like ''%[HOP]%''';


				  IF ordre = 2 THEN
                Requete := Requete   --|| ' AND    c.renscomp not like '%[HOP]%''
                              ||' ORDER BY PRIXPUBLICTTCE, DenomCip';
				  ELSIF ordre = 1 THEN
				  Requete := Requete  --|| ' AND    c.renscomp not like '%[HOP]%''
                              ||  ' ORDER BY DenomCip';
				  ELSIF ordre = 3 THEN
				  Requete := Requete ||  ' AND    e.ID_SPEPRESENTATION      = h.ID_SPEPRESENTATION'
                 ||  ' AND    h.DATEEVENEMENT      = ( SELECT MAX(g.DATEEVENEMENT)'
                 ||                                  ' FROM   SPEEVTPRESENTATION g'
                 ||                                  ' WHERE  g.ID_SPEPRESENTATION = h.ID_SPEPRESENTATION'
                 ||                                  '   AND  UPPER(g.EVENEMENT) LIKE ''%REMB%'')'
                 ||  ' AND    UPPER(h.EVENEMENT) LIKE ''%REMB%'''
             --    ||  ' AND    f.renscomp not like '%[HOP]%''
                 ||  ' ORDER BY h.EVENEMENT, DenomCip';
				  END IF;

				  OPEN GetCipsNoHOP_txt.RefSPEPRESENTATION FOR Requete;


       ----------------------------------------------
		   -- requete par une liste d'id de classes ATC
		   ----------------------------------------------
		   ELSIF Typ = 5 THEN

                 Requete := 'Select   /*+ RULE */         e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                         ||  'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                         ||  'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                         ||  'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                         ||  'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                         ||  'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                         ||  'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                         ||  'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                         ||  'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,';

				IF ordre = 2 or ordre = 1 THEN
				   Requete := Requete ||'e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,'
                         ||  'd.DENOMSPE||DECODE(Condi,NULL,'||''''''||','||''' : '''||'||Condi) DenomCip, e.disponibilite, e.nbprise, e.priseunitaire '
                  ||' FROM     SPEPRESENTATION e, SPECIALITE d ';

				ELSIF ordre = 3 THEN
					 Requete := Requete || 'e.DREVIS, e.CIPREFERANT, h.EVENEMENT, h.DATEEVENEMENT,'
                   ||        'd.DENOMSPE||DECODE(Condi,NULL,'||''''''||','||''' : '''||'||Condi) DenomCip, e.disponibilite, e.nbprise, e.priseunitaire '
                 ||' FROM     SPEPRESENTATION e, SPECIALITE d, SPEEVTPRESENTATION h ';
                END IF;

				   Requete := Requete ||' WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)'
                                   ||             '  FROM             SPECIALITE d, SPEPHARMACODYNAMIE p, '
												           ||             '                   DICOT_ATC_IRIS q '
	                                 ||             '  WHERE          q.LIBELLE = p.ATC_IRIS '
									                 ||             '                 AND   d.ID_SPECIALITE = p.ID_SPECIALITE '
                                   ||             '                 AND   q.ID_DICOT_ATC_IRIS IN ( SELECT          q.ID_DICOT_ATC_IRIS '
                                   ||             '                                                FROM            DICOT_ATC_IRIS q '
                                   ||             '                                                CONNECT BY PRIOR q.ID_DICOT_ATC_IRIS = q.DIC_ID_DICOT_ATC_IRIS '
                                   ||             '                                                START WITH       q.ID_DICOT_ATC_IRIS IN ('||GetCipsNoHOP_txt.Terme ||')))'
                  || ' AND    e.id_specialite           = d.id_specialite'
				          || ' AND    d.IDTYPESPE IN ('||domaine||')'
               --   || ' AND    f.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION'
               --   || ' AND    UPPER(f.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||''
                  || ' AND    Condi not like ''%[HOP]%''';

				  IF ordre = 2 THEN
                  Requete := Requete ||' ORDER BY PRIXPUBLICTTCE, DenomCip';
				  ELSIF ordre = 1 THEN
				  Requete := Requete ||  ' ORDER BY DenomCip';
				  ELSIF ordre = 3 THEN
				  Requete := Requete ||  ' AND    e.ID_SPEPRESENTATION      = h.ID_SPEPRESENTATION'
                 ||  ' AND    h.DATEEVENEMENT      = ( SELECT MAX(g.DATEEVENEMENT)'
                 ||                                  ' FROM   SPEEVTPRESENTATION g'
                 ||                                  ' WHERE  g.ID_SPEPRESENTATION = h.ID_SPEPRESENTATION'
                 ||                                  '   AND  UPPER(g.EVENEMENT) LIKE ''%REMB%'')'
                 ||  ' AND    UPPER(h.EVENEMENT) LIKE ''%REMB%'''
                 || ' ORDER BY h.EVENEMENT, DenomCip';
				  END IF;

				  OPEN GetCipsNoHOP_txt.RefSPEPRESENTATION FOR Requete;


           -------------------------------------
		   -- Requete par nom de laboratoire
		   -------------------------------------
           ELSIF Typ = 4 THEN
		     Requete := 'SELECT  /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                     ||     'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                     ||     'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                     ||     'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                     ||     'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                     ||     'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                     ||     'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                     ||     'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                     ||     'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,';

			 IF ordre = 2 or ordre = 1 THEN
			 	Requete := Requete || 'e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,'
                       ||   'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, e.nbprise, e.priseunitaire'
              ||  ' FROM     SPEPRESENTATION e, SPECIALITE d, SPELABS_REL c, LABORATOIRE a ';
             ELSIF ordre = 3 THEN
			 	Requete := Requete || 'e.DREVIS, e.CIPREFERANT, h.EVENEMENT, h.DATEEVENEMENT,'
                       ||   'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, e.nbprise, e.priseunitaire'
              ||  ' FROM     SPEPRESENTATION e, SPECIALITE d, SPELABS_REL c, LABORATOIRE a ,SPEEVTPRESENTATION h ';
             END IF;

			 Requete := Requete || ' WHERE    UPPER(TRANSLATE(a.LABORATOIRE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCipsNoHOP_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))'
              ||    ' AND    c.ID_LABORATOIRE              = a.ID_LABORATOIRE'
              ||    ' AND    d.ID_SPECIALITE               = c.ID_SPECIALITE'
			        ||    ' AND    d.IDTYPESPE IN ('||domaine||')'
              ||    ' AND    e.ID_SPECIALITE               = d.ID_SPECIALITE'
           --   ||    ' AND    f.ID_SPEPRESENTATION (+)      = e.ID_SPEPRESENTATION'
           --   ||    ' AND    UPPER(f.TYPECONDPRIMAIRE (+)) = ''DENOMCIP'''
              ||    ' AND    Condi not like ''%[HOP]%''';

			  IF ordre = 2 THEN
			  	 Requete := Requete || ' ORDER BY PRIXPUBLICTTCE, DenomCip';
			  ELSIF ordre = 1 THEN
			  	 Requete := Requete || ' ORDER BY DenomCip';
			  ELSIF ordre = 3 THEN
			  	 Requete := Requete || 'AND    e.ID_SPEPRESENTATION      = h.ID_SPEPRESENTATION'
                 || ' AND    h.DATEEVENEMENT = ( SELECT MAX(g.DATEEVENEMENT)'
                 ||                            ' FROM   SPEEVTPRESENTATION g'
                 ||                            ' WHERE  g.ID_SPEPRESENTATION = h.ID_SPEPRESENTATION'
                 ||                            '   AND  UPPER(g.EVENEMENT) LIKE ''%REMB%'')'
                 || ' AND    UPPER(h.EVENEMENT) LIKE ''%REMB%'''
                 || ' ORDER BY h.EVENEMENT, DenomCip';
			  END IF;

			  OPEN GetCipsNoHOP_txt.RefSPEPRESENTATION FOR Requete;

         END IF;
-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCipsNoHOP_txt%');
--         COMMIT;
-------------------------------------------------------------

           RETURN 1;
           EXCEPTION
             WHEN OTHERS THEN
               RETURN SQLCODE;
           END GetCipsNoHOP_txt;


  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCipsNoHOP_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- Modification #1 : dans le cas du passage d'une substance, on
  --                   cherchera également les CIP dont une substance
  --                   fille correspond au critère Terme.
  -- --------------------------------------------------------------

           PROCEDURE GetCipsNoHOP_id ( Terme       IN    NUMBER,
                               Typ                  IN    INTEGER,
                               Domain               IN    INTEGER,
                               ordre                IN    INTEGER    DEFAULT 1,
                               RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurRef,
                               Ret                  OUT   NUMBER)
           IS
           BEGIN
                 Ret:= GetCipsNoHOP_id ( Terme, Typ, Domain, ordre, RefSPEPRESENTATION);
           END GetCipsNoHOP_id;
           FUNCTION GetCipsNoHOP_id ( Terme       IN    NUMBER,
                              Typ                  IN    INTEGER,
                              Domain               IN    INTEGER,
                              ordre                IN    INTEGER                                         DEFAULT 1,
                              RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurRef)
                            RETURN NUMBER IS
       ordonn VARCHAR2(50);
		   domaine VARCHAR2(50);
		   Requete VARCHAR2(4000);
		   Reqsubst VARCHAR2(5000);
           BEGIN

		   domaine := AVIDAL_PUBRES.DecodeDomain(getCipsNoHOP_id.Domain);

       -------------------------------------------------
			 -- recherche par id de substance
			 -------------------------------------------------
			 IF typ = 2 or typ = 25 or typ = 27 THEN

			    Reqsubst := ' SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                      ||      'e.UCD, e.AMMEUROPE,  e.LIEUDISPO,'
                      ||      'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                      ||      'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                      ||      'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                      ||      'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                      ||      'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                      ||      'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                      ||      'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,';

				IF ordre = 2 or ordre = 1 THEN
				   Reqsubst := Reqsubst || 'e.DREVIS, e.CIPREFERANT,'''' EVENEMENT, '''' DATEEVENEMENT,'
                      ||      'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, e.nbprise, e.priseunitaire '
                   ||' FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b';
                ELSIF ordre = 3 THEN
				   Reqsubst := Reqsubst || 'e.DREVIS, e.CIPREFERANT,h.EVENEMENT, MAX(h.DATEEVENEMENT),'
                        ||    'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, e.nbprise, e.priseunitaire '
                   ||' FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, SPEEVTPRESENTATION h ';
                END IF;

				Reqsubst := Reqsubst ||' WHERE    b.DENOMSUB IN ( SELECT LIBELLE'
                   ||                        ' FROM   T_SUB'
                   ||                        ' WHERE  ID_T_SUB = '||GetCipsNoHOP_id.Terme||')'
                   || ' AND    c.ID_SPECOMPO                 = b.ID_SPECOMPO';
				   IF Typ = 25 THEN
				   Reqsubst := Reqsubst || ' AND b.bconstactif = ''1''';
				   ELSIF Typ = 27 THEN
				   Reqsubst := Reqsubst || ' AND b.bconstactif = ''0''';
				   END IF;
                Reqsubst := Reqsubst || ' AND    d.ID_SPECIALITE               = c.ID_SPECIALITE'
                   || ' AND    e.ID_SPECIALITE               = d.ID_SPECIALITE'
				   || ' AND    d.IDTYPESPE in ('||domaine||')'
                --   || ' AND    f.ID_SPEPRESENTATION (+)  + 0 = e.ID_SPEPRESENTATION'
                --   || ' AND    UPPER(f.TYPECONDPRIMAIRE (+)) = ''DENOMCIP'''
                   || ' AND    Condi not like ''%[HOP]%''';


			   IF ordre = 3 THEN
			   	  Reqsubst := Reqsubst || ' AND    e.ID_SPEPRESENTATION          = h.ID_SPEPRESENTATION + 0'
                   || ' AND    UPPER(h.EVENEMENT) LIKE ''%REMB%'''
                  ||' GROUP BY  e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                  ||          'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                  ||          'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                  ||          'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                  ||          'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                  ||          'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                  ||          'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                  ||          'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                  ||          'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                  ||          'e.DREVIS, e.CIPREFERANT,h.EVENEMENT,'
                  ||          'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi), e.disponibilite, e.nbprise, e.priseunitaire ';
               END IF;

			   -- Recherche dans les synonymes
			   Reqsubst := Reqsubst ||' UNION '
                  || ' SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                  ||          'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                  ||          'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                  ||          'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                  ||          'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                  ||          'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                  ||          'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                  ||          'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                  ||          'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,';

				IF ordre = 2 or ordre = 1 THEN
				   Reqsubst := Reqsubst || 'e.DREVIS, e.CIPREFERANT,'''' EVENEMENT, '''' DATEEVENEMENT,'
                  ||          'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, e.nbprise, e.priseunitaire '
                  || ' FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b ';
                ELSIF ordre = 3 THEN
				   Reqsubst := Reqsubst || 'e.DREVIS, e.CIPREFERANT,h.EVENEMENT, MAX(h.DATEEVENEMENT),'
                  ||          'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, e.nbprise, e.priseunitaire '
                  ||' FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, SPEEVTPRESENTATION h ';
                END IF;

				Reqsubst := Reqsubst || ' WHERE    b.DENOMSUB IN ( SELECT LIBELLE'
                  ||                         ' FROM   T_SUB'
                  ||                         ' WHERE  ID_T_SUB IN ( SELECT DISTINCT  f.ID_T_SUB_F'
                  ||                         '                      FROM             COUPLETERMETERME f'
                  ||                         '                      CONNECT BY PRIOR f.ID_T_SUB_F = f.ID_T_SUB_P'
                  ||                         '                      START WITH       f.ID_T_SUB_P = '||GetCipsNoHOP_id.Terme||')'
                  ||                        ')'
                  || '  AND    c.ID_SPECOMPO             = b.ID_SPECOMPO';
				   IF Typ = 25 THEN
				   Reqsubst := Reqsubst || ' AND b.bconstactif = ''1''';
				   ELSIF Typ = 27 THEN
				   Reqsubst := Reqsubst || ' AND b.bconstactif = ''0''';
				   END IF;
                  Reqsubst := Reqsubst || '  AND    d.ID_SPECIALITE           = c.ID_SPECIALITE'
                  || '  AND    e.ID_SPECIALITE           = d.ID_SPECIALITE'
				  || '  AND    d.IDTYPESPE in ('||domaine||')'
                --  || '  AND    g.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION'
                --  || '  AND    UPPER(g.TYPECONDPRIMAIRE (+)) = ''DENOMCIP'''
                  || ' AND    Condi not like ''%[HOP]%''';

				  IF ordre = 2 THEN
				  	 Reqsubst := Reqsubst  || ' ORDER BY PRIXPUBLICTTCE, DenomCip';
				  ELSIF ordre = 1 THEN
				  	 Reqsubst := Reqsubst  ||' ORDER BY DenomCip';
				  ELSIF ordre = 3 THEN
				     Reqsubst := Reqsubst ||   ' AND    e.ID_SPEPRESENTATION      = h.ID_SPEPRESENTATION'
                  ||   ' AND    UPPER(h.EVENEMENT) LIKE ''%REMB%'''
                  || ' GROUP BY e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                  ||          'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                  ||          'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                  ||          'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                  ||          'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                  ||          'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                  ||          'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                  ||          'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                  ||          'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                  ||          'e.DREVIS, e.CIPREFERANT,h.EVENEMENT,'
                  ||          'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi), e.disponibilite, e.nbprise, e.priseunitaire '
                  || ' ORDER BY EVENEMENT, DenomCip';
				  END IF;

				OPEN GetCipsNoHOP_id.RefSPEPRESENTATION FOR Reqsubst;

		     ----------------------------------------------
			 -- recherche par liste d'id de classe Thera
			 ----------------------------------------------
             ELSIF Typ = 3 THEN
			   Requete := ' SELECT   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                         ||   'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                         ||   'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                         ||   'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                         ||   'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                         ||   'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                         ||   'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                         ||   'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                         ||   'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,';

				IF ordre = 2 or ordre = 1 THEN
				   Requete := Requete || 'e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,'
                    ||        'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, e.nbprise, e.priseunitaire '
               ||  '  FROM     SPEPRESENTATION e, SPECIALITE d ';
                ELSIF ordre = 3 THEN
				   Requete := Requete || 'e.DREVIS, e.CIPREFERANT, f.EVENEMENT, MAX(f.DATEEVENEMENT),'
                     ||       'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, e.nbprise, e.priseunitaire '
               ||   ' FROM     SPEPRESENTATION e, SPECIALITE d,SPEEVTPRESENTATION f ';
                END IF;

				Requete := Requete || ' WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)'
                                   ||             ' FROM             SPECIALITE d, SPECLASSIRIS c'
                                   ||             ' WHERE            d.id_specialite = c.id_specialite'
                                   ||             '   AND            c.ID_DICOCOMCLASSIRIS IN ( SELECT           a.ID_DICOCOMCLASSIRIS'
                                   ||                                                         ' FROM             DICOCOMCLASSIRIS a'
                                   ||                                                         ' CONNECT BY PRIOR a.id_dicocomclassiris = a.dic_id_dicocomclassiris'
                                   ||                                                         ' START WITH a.id_dicocomclassiris = '||GetCipsNoHOP_id.Terme ||'))'
                 ||   ' AND    e.id_specialite           = d.id_specialite'
				 ||   ' AND    d.IDTYPESPE IN ('||domaine||')'
--                 ||   ' AND    b.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION'
--                 ||   ' AND    UPPER(b.TYPECONDPRIMAIRE (+)) = ''DENOMCIP'''
                 || ' AND    Condi not like ''%[HOP]%''';

				IF ordre = 2 THEN
				   Requete := Requete || ' ORDER BY PRIXPUBLICTTCE, DenomCip';
				ELSIF ordre = 3 THEN
				   Requete := Requete || 'AND    e.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION'
                  ||   ' AND    UPPER(f.EVENEMENT) LIKE ''%REMB%'''
                  || ' GROUP BY e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                  ||          'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                  ||          'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                  ||          'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                  ||          'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                  ||          'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                  ||          'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                  ||          'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                  ||          'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                  ||          'e.DREVIS, e.CIPREFERANT,f.EVENEMENT, f.DATEEVENEMENT, d.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi), e.disponibilite, e.nbprise, e.priseunitaire '
                  || ' ORDER BY f.EVENEMENT, DenomCip';
				ELSIF ordre = 1 THEN
				   Requete := Requete || ' ORDER BY DenomCip';
				END IF;

				OPEN GetCipsNoHOP_id.RefSPEPRESENTATION FOR Requete;

--//////////////////////////////--Début Classes ATC--///////////////////////////////////
   ELSIF Typ = 5 THEN
			   Requete := ' SELECT   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                         ||   'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                         ||   'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                         ||   'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                         ||   'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                         ||   'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                         ||   'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                         ||   'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                         ||   'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,';

				IF ordre = 2 or ordre = 1 THEN
				   Requete := Requete || 'e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,'
                    ||        'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, e.nbprise, e.priseunitaire '
               ||  '  FROM     SPEPRESENTATION e, SPECIALITE d';
                ELSIF ordre = 3 THEN
				   Requete := Requete || 'e.DREVIS, e.CIPREFERANT, f.EVENEMENT, MAX(f.DATEEVENEMENT),'
                     ||       'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, e.nbprise, e.priseunitaire '
               ||   ' FROM     SPEPRESENTATION e, SPECIALITE d,SPEEVTPRESENTATION f ';
                END IF;

				Requete := Requete || ' WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)'
                                   ||             '  FROM             SPECIALITE d, SPEPHARMACODYNAMIE p, '
												           ||             '                   DICOT_ATC_IRIS q '
	                                 ||             '  WHERE          q.LIBELLE = p.ATC_IRIS '
									                 ||             '                 AND   d.ID_SPECIALITE = p.ID_SPECIALITE '
                                   ||             '                 AND   q.ID_DICOT_ATC_IRIS IN ( SELECT          q.ID_DICOT_ATC_IRIS '
                                   ||             '                                                FROM            DICOT_ATC_IRIS q '
                                   ||             '                                                CONNECT BY PRIOR q.ID_DICOT_ATC_IRIS = q.DIC_ID_DICOT_ATC_IRIS '
                                   ||             '                                                START WITH       q.ID_DICOT_ATC_IRIS = '||GetCipsNoHOP_id.Terme ||'))'
                 ||   ' AND    e.id_specialite           = d.id_specialite'
				 ||   ' AND    d.IDTYPESPE IN ('||domaine||')'
--                 ||   ' AND    b.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION'
 --                ||   ' AND    UPPER(b.TYPECONDPRIMAIRE (+)) = ''DENOMCIP'''
                 || ' AND    Condi not like ''%[HOP]%''';

				IF ordre = 2 THEN
				   Requete := Requete || ' ORDER BY PRIXPUBLICTTCE, DenomCip';
				ELSIF ordre = 3 THEN
				   Requete := Requete || 'AND    e.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION'
                  ||   ' AND    UPPER(f.EVENEMENT) LIKE ''%REMB%'''
                  || ' GROUP BY e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                  ||          'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                  ||          'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                  ||          'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                  ||          'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                  ||          'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                  ||          'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                  ||          'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                  ||          'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                  ||          'e.DREVIS, e.CIPREFERANT,f.EVENEMENT, f.DATEEVENEMENT, d.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi), e.disponibilite, e.nbprise, e.priseunitaire '
                  || ' ORDER BY f.EVENEMENT, DenomCip';
				ELSIF ordre = 1 THEN
				   Requete := Requete || ' ORDER BY DenomCip';
				END IF;

				OPEN GetCipsNoHOP_id.RefSPEPRESENTATION FOR Requete;


--//////////////////////////////-- Fin Classes ATC--////////////////////////////////////
			 ---------------------------------------------
			 --  -- recherche par id de laboratoire
			 ---------------------------------------------
             ELSIF Typ = 4 THEN

			   Requete := 'SELECT   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                        ||    'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                        ||    'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                        ||    'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                        ||    'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                        ||    'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                        ||    'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                        ||    'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                        ||    'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,';

				IF ordre = 2 or ordre = 1 THEN
				   Requete := Requete || 'e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,'
                         ||   'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, e.nbprise, e.priseunitaire '
               ||  '  FROM     SPEPRESENTATION e, SPECIALITE d, SPELABS_REL c, LABORATOIRE a ';
                ELSIF ordre = 3 THEN
				   Requete := Requete || 'e.DREVIS, e.CIPREFERANT, f.EVENEMENT, MAX(f.DATEEVENEMENT),'
                         ||   'd.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi) DenomCip, e.disponibilite, e.nbprise, e.priseunitaire '
               ||  '  FROM     SPEPRESENTATION e, SPECIALITE d, SPELABS_REL c, LABORATOIRE a,SPEEVTPRESENTATION f';
                END IF;

				Requete := Requete || ' WHERE    a.ID_LABORATOIRE          = '||GetCipsNoHOP_id.Terme
                  ||  ' AND    c.ID_LABORATOIRE          = a.ID_LABORATOIRE'
                  ||  ' AND    d.ID_SPECIALITE           = c.ID_SPECIALITE'
                  ||  ' AND    e.ID_SPECIALITE           = d.ID_SPECIALITE'
				  ||  ' AND    d.IDTYPESPE IN ('||domaine||')'
          --        ||  ' AND    b.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION'
          --        ||  ' AND    UPPER(b.TYPECONDPRIMAIRE (+)) = ''DENOMCIP'''
                  || ' AND    Condi not like ''%[HOP]%''';

			   IF ordre = 2 THEN
			   	  Requete := Requete || ' ORDER BY PRIXPUBLICTTCE, DenomCip';
			   ELSIF ordre = 3 THEN
			   	  Requete := Requete || ' AND    e.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION'
                  ||   ' AND    UPPER(f.EVENEMENT) LIKE ''%REMB%'''
                  || ' GROUP BY e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                  ||          'e.UCD, e.AMMEUROPE,  e.LIEUDISPO,'
                  ||          'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                  ||          'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                  ||          'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                  ||          'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                  ||          'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                  ||          'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, e.PRIXPUBLICTTCF,'
                  ||          'e.PRIXPRODHTE, e.PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                  ||          'e.DREVIS, e.CIPREFERANT, f.EVENEMENT, f.DATEEVENEMENT, d.DENOMSPE||DECODE(Condi,NULL,'''','' : ''||Condi), e.disponibilite, e.nbprise, e.priseunitaire '
                  ||' ORDER BY f.EVENEMENT, DenomCip';
			   ELSE
			   	  Requete := Requete || ' ORDER BY DenomCip';
			   END IF;


			  OPEN GetCipsNoHOP_id.RefSPEPRESENTATION FOR Requete;

         END IF;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCipsNoHOP_id%');
--         COMMIT;
-------------------------------------------------------------
           RETURN 1;
           EXCEPTION
             WHEN OTHERS THEN
               RETURN SQLCODE;
           END GetCipsNoHOP_id;

-- ====================================================================
-- Fin de package
-- ====================================================================
END Avidal_Cip;
/
CREATE OR REPLACE PACKAGE Avidal_Cip_Livret AS
--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles entrées
--/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	   PROCEDURE GetCipsWithLivret_txt ( Terme                      IN      VARCHAR2,
                                         Typ                    IN      INTEGER,
                                         Domain                 IN      INTEGER,
                                         ordre                  IN      INTEGER  DEFAULT 1,
                                         Banque                 IN      VARCHAR2,
                                         Id_hop                 IN      INTEGER,
                                         RefSPEPRESENTATION     OUT     Spepresentation_Pubres.SPEPRESENTATIONCurRef,
                                         Ret                    OUT     NUMBER);

	   PROCEDURE GetCipsWithLivret_id ( Terme                      IN      NUMBER,
                                         Typ                    IN      INTEGER,
                                         Domain                 IN      INTEGER,
                                         ordre                  IN      INTEGER  DEFAULT 1,
                                         Banque			            IN      VARCHAR2,
                                         Id_hop                 IN      INTEGER,
                                         RefSPEPRESENTATION 	OUT     Spepresentation_Pubres.SPEPRESENTATIONCurRef,
                                         Ret                    OUT     NUMBER);

       PROCEDURE GetSpeCipsInLivret_id ( Id_Specialite             IN      Specialite_Pubres.Id_Specialite               DEFAULT NULL,
                                          Id_hop                IN      Spepresentation_Pubres.ID_ORGANISME,
                                          RefSPEPRESENTATION    OUT     Spepresentation_Pubres.SPEPRESENTATIONCurTyp3,
                                          Ret                   OUT     NUMBER);
   -- =====================================================================
   -- Function : GetCipsWithLivret
   -- Objet    : Recherche des CIP des livrets VIDAL, HOPITAL
   --            et de la banque VIDAL
   -- -------------------------------------------------------------------
--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles entrées
--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	       FUNCTION GetCipsWithLivret_txt ( Terme                   IN  VARCHAR2,
                                        Typ                     IN  INTEGER,
                                        Domain                  IN  INTEGER,
                                        ordre                   IN  INTEGER DEFAULT 1,
                                        Banque			IN  VARCHAR2,
                                        Id_hop                  IN  INTEGER,
                                        RefSPEPRESENTATION 	OUT Spepresentation_Pubres.SPEPRESENTATIONCurRef)
	   			      RETURN NUMBER;
           FUNCTION GetCipsWithLivret_id ( Terme                   IN  NUMBER,
                                        Typ                     IN  INTEGER,
                                        Domain                  IN  INTEGER,
                                        ordre                   IN  INTEGER DEFAULT 1,
                                        Banque			IN  VARCHAR2,
                                        Id_hop                  IN  INTEGER,
                                        RefSPEPRESENTATION 	OUT Spepresentation_Pubres.SPEPRESENTATIONCurRef)
	   			      RETURN NUMBER;
   -- =====================================================================
   -- Function : GetSpeCipsInLivret
   -- Objet    : Recherche des CIP du livret VIDAL de l'organisme spécifié
   --            à partir d'un Identifiant de Spécialité.
   -- -------------------------------------------------------------------
           FUNCTION GetSpeCipsInLivret_id ( Id_Specialite         IN      Specialite_Pubres.Id_Specialite               DEFAULT NULL,
                                         Id_hop                IN      Spepresentation_Pubres.ID_ORGANISME,
                                         RefSPEPRESENTATION    OUT     Spepresentation_Pubres.SPEPRESENTATIONCurTyp3)
                                       RETURN NUMBER;

-- ====================================================================
-- Fin de package
-- ====================================================================
END Avidal_Cip_Livret;
/

CREATE OR REPLACE PACKAGE BODY "AVIDAL_CIP_LIVRET"     AS
-- ================================================================================
-- Script      : AVIDAL_CIP_LIVRET    Type : Package Body
-- Objet       : Ressources Select tables
-- Owner       : VIDAL
-- Création    : 06/03/2001
-- Auteur      : MR K2/PixelPark
-- Généré par  : Manuel Rouault
-- Modifié par : MR - 20/03/2001 : Modification #1 : création de GetSpeCipsInLivret
-- ================================================================================
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCipsWithLivret
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- Permet d'obtenir les CIP rattachés aux libellés des substances
  -- ( ou aux substances filles ) ou des spécialités passés en
  -- paramètre (selon le typ).
  -- La recherche se fera selon la demande :
  --          * dans la Banque VIDAL
  --          * dans le livret VIDAL de l'hôpital concerné
  --          * dans le livret HOPITAL de l'hôpital concerné
  --    OU    * seulement dans les livrets de l'organisme concerné
  -- Résultats restitués selon différents ordres.
---------------------------------------------------------------------
--==================================================================
  --ML :06/11/2003 : Adaptation des APIs à la nouvelle Base RUBIS
--==================================================================
  -- ---------------------------------------------------------------
--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles entrées
--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
           PROCEDURE GetCipsWithLivret_txt ( Terme              IN  VARCHAR2,
                                         Typ                IN  INTEGER,
                                         Domain             IN  INTEGER,
                                         ordre              IN  INTEGER  DEFAULT 1,
                                         Banque             IN  VARCHAR2,
                                         Id_hop             IN  INTEGER,
                                         RefSPEPRESENTATION OUT Spepresentation_Pubres.SPEPRESENTATIONCurRef,
                                         Ret                OUT NUMBER)
           IS
           BEGIN
                 Ret:= GetCipsWithLivret_txt (Terme, Typ, Domain, ordre, Banque, Id_hop, RefSPEPRESENTATION);
           END GetCipsWithLivret_txt ;
           FUNCTION GetCipsWithLivret_txt  ( Terme              IN  VARCHAR2,
                                         Typ                IN  INTEGER,
                                         Domain             IN  INTEGER,
                                         ordre              IN  INTEGER  DEFAULT 1,
                                         Banque             IN  VARCHAR2,
                                         Id_hop             IN  INTEGER,
                                         RefSPEPRESENTATION OUT Spepresentation_Pubres.SPEPRESENTATIONCurRef)
                                       RETURN NUMBER IS
		   Req1    VARCHAR2(7000);
		   Req2    VARCHAR2(5000);
		   Req3    VARCHAR2(7000);
		   Req4	   VARCHAR2(4000);
		   Requete VARCHAR2(10000);
       Supp    VARCHAR2(10);

		   domaine VARCHAR2(50);
           BEGIN

		     domaine := AVIDAL_PUBRES.DecodeDomain(GetCipsWithLivret_txt.Domain);
         Supp := '4,5';

--********************************************-- on passe un libellé de spécialité (1) et UCD (7) --***--****************************************
--***********************************************************************************************************************************************

             IF typ = 1 or typ = 7 THEN
               IF ordre = 2 THEN
                    Req1 := 'SELECT  /*+ RULE */  b.ID_SPEPRESENTATION, b.ID_SPECIALITE, b.CIP,'
                          ||'b.UCD, b.AMMEUROPE,  b.LIEUDISPO ,'
                          ||'b.CONDDISPO , b.LISTE, b.DUREEPRESCRIPTION,'
                          ||'b.PRESCRIPTIONINITIALE, b.PRESCRIPTIONRESERVEE,'
                          ||'b.RENOUVELRESERVE, b.MEDPARTIC, b.NATURESURVEILLANCE,'
                          ||'b.CODEREFERANTGENERIQUE, b.REMPLACE, b.SOURCEREMPLACE,'
                          ||'b.DATESOURCEREMPLACE, b.REMPLACEPAR, b.SOURCEREMPLACEPAR,'
                          ||'b.DATESOURCEREMPLACEPAR, b.PRIXPRODHTF, DECODE(c.idorganisme, NULL, b.PRIXPUBLICTTCF, c.PRIX_TTC_F) PRIXPUBLICTTCF,'
                          ||'b.PRIXPRODHTE, DECODE(c.idorganisme, NULL, b.PRIXPUBLICTTCE, c.PRIX_TTC_E) PRIXPUBLICTTCE, b.TVA, b.DCREAT, b.DMODIF,'
                          ||' b.DREVIS, b.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,'
                          ||'a.DENOMSPE||DECODE(b.condi,NULL,'''','' : ''||b.condi) DenomCip,'
                          ||'c.IDORGANISME, c.PRIX_TTC_F, c.PRIX_TTC_E, c.DISPO, c.COMMENTAIRE,'
                          ||' '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, c.CODHOPITAL,'
                          ||' DECODE(c.idorganisme,NULL,''N'',''A'') FLAG_CAN, b.disponibilite, b.NBprise, b.PriseUnitaire, b.codedispo codedispo '
                          ||'  FROM     SPEPRESENTATION b, SPECIALITE a, LIVRETVIDAL c'
                          ||'  WHERE    b.ID_SPECIALITE           = a.ID_SPECIALITE'
				                  ||'  AND    a.IDTYPESPE IN ('||domaine||')';
                        --  ||'  AND    d.ID_SPEPRESENTATION (+)  = b.ID_SPEPRESENTATION'
                        --  ||'  AND    UPPER(d.TYPECONDPRIMAIRE (+)) = ''DENOMCIP''';
				   IF typ = 1 THEN
                   Req1 := Req1 ||'  AND    UPPER(TRANSLATE(a.DENOMSPE, '''||Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCipsWithLivret_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))';
				   ELSIF typ = 7 THEN
				   Req1 := Req1 ||'  AND    b.UCD = '''||GetCipsWithLivret_txt.Terme||'''  AND    b.codedispo NOT IN ('||Supp||')';
           --ML : Projet Nouveaux et Supprimés-13/05/2004

				   END IF;

				   IF Banque = 'O' THEN
				   Req1 := Req1 || ' AND    c.ID_SPEPRESENTATION(+)      = b.ID_SPEPRESENTATION'
                                || ' AND    c.IDORGANISME(+)             = '||GetCipsWithLivret_txt.Id_hop;
				   ELSE
				   Req1 := Req1 || ' AND    c.ID_SPEPRESENTATION      = b.ID_SPEPRESENTATION'
                                || ' AND    c.IDORGANISME             = '||GetCipsWithLivret_txt.Id_hop;
				   END IF;

				   Req2 :=   'SELECT  /*+ RULE */  b.ID_SPEPRESENTATIONHOP, 0 ID_SPECIALITE, b.CIP,'
                           ||'b.UCD, '''' AMMEUROPE, '''' LIEUDISPO,'
                           ||''''' CONDDISPO , '''' LISTE, '''' DUREEPRESCRIPTION,'
                           ||''''' PRESCRIPTIONINITIALE, '''' PRESCRIPTIONRESERVEE,'
                           ||''''' RENOUVELRESERVE, '''' MEDPARTIC, '''' NATURESURVEILLANCE,'
                           ||''''' CODEREFERANTGENERIQUE, '''' REMPLACE, '''' SOURCEREMPLACE,'
                           ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACE,'
                           ||''''' REMPLACEPAR, '''' SOURCEREMPLACEPAR,'
                           ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACEPAR,'
                           ||'0 PRIXPRODHTF, a.PRIX_TTC_F PRIXPUBLICTTCF, 0 PRIXPRODHTE, a.PRIX_TTC_E PRIXPUBLICTTCE, '''' TVA,'
                           ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DCREAT,'
                           ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DMODIF,'
                           ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DREVIS,'
                           ||' '''' CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT, b.NOM DenomCip,'
                           ||'a.IDORGANISME, a.PRIX_TTC_F, a.PRIX_TTC_E, a.DISPO, a.COMMENTAIRE,'
                           ||'b.PRESENTATION, b.FORME, b.DOSAGE, b.LABO, a.CODHOPITAL, ''C'' FLAG_CAN, '''' disponibilite, 0 NBprise, '''' PriseUnitaire, 10 codedispo '
                   ||'  FROM     SPEPRESENTATIONHOP b, LIVRETHOP a'
                   ||'  WHERE    a.ID_SPEPRESENTATIONHOP = b.ID_SPEPRESENTATIONHOP'
                   ||'    AND    a.IDORGANISME           = b.IDORGANISME'
                   ||'    AND    a.IDORGANISME           = '||GetCipsWithLivret_txt.Id_hop;

				   IF typ = 1 THEN
                   Req2 := Req2 ||'    AND    UPPER(TRANSLATE(b.NOM,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCipsWithLivret_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))';
				   ELSIF typ = 7 THEN
				           Req2 := Req2 ||'    AND    b.UCD = '''||GetCipsWithLivret_txt.Terme||'''';
				   END IF;

				    Requete := 'SELECT * FROM (' ||Req1 ||' UNION '|| Req2 ||') ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  PRIXPUBLICTTCE, DENOMCIP';

					OPEN GetCipsWithLivret_txt.RefSPEPRESENTATION FOR Requete;

               ELSIF ordre = 3 THEN
                 -- fonctionnement identique mais pour un ordre différent
                     -- recherche des CIP dans la banque VIDAL
					 Req1 := 'SELECT  /*+ RULE */  b.ID_SPEPRESENTATION, b.ID_SPECIALITE, b.CIP,'
                           ||'b.UCD, b.AMMEUROPE,  b.LIEUDISPO ,'
                           ||'b.CONDDISPO , b.LISTE, b.DUREEPRESCRIPTION,'
                           ||'b.PRESCRIPTIONINITIALE, b.PRESCRIPTIONRESERVEE,'
                           ||'b.RENOUVELRESERVE, b.MEDPARTIC, b.NATURESURVEILLANCE,'
                           ||'b.CODEREFERANTGENERIQUE, b.REMPLACE, b.SOURCEREMPLACE,'
                           ||'b.DATESOURCEREMPLACE, b.REMPLACEPAR, b.SOURCEREMPLACEPAR,'
                      --     ||'b.DATESOURCEREMPLACEPAR, b.PRIXPRODHTF, DECODE(d.PRIX_TTC_F,NULL,b.PRIXPUBLICTTCF,d.PRIX_TTC_F) PRIXPUBLICTTCF,'
                      --     ||'b.PRIXPRODHTE, DECODE(d.PRIX_TTC_E,NULL,b.PRIXPUBLICTTCE,d.PRIX_TTC_E) PRIXPUBLICTTCE, b.TVA, b.DCREAT, b.DMODIF,'
                           ||'b.DATESOURCEREMPLACEPAR, b.PRIXPRODHTF, DECODE(d.idorganisme, NULL, b.PRIXPUBLICTTCF, d.PRIX_TTC_F) PRIXPUBLICTTCF,'
                           ||'b.PRIXPRODHTE, DECODE(d.idorganisme, NULL, b.PRIXPUBLICTTCE, d.PRIX_TTC_E) PRIXPUBLICTTCE, b.TVA, b.DCREAT, b.DMODIF,'
                           ||'b.DREVIS, b.CIPREFERANT, c.EVENEMENT, c.DATEEVENEMENT,'
                           ||'a.DENOMSPE||DECODE(b.condi,NULL,'''','' : ''||b.condi) DenomCip,'
                           ||'d.IDORGANISME, d.PRIX_TTC_F, d.PRIX_TTC_E, d.DISPO, d.COMMENTAIRE,'
                           ||''''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, d.CODHOPITAL, '
                           || 'DECODE(d.idorganisme,NULL,''N'',''A'') FLAG_CAN, b.disponibilite, b.NBprise, b.PriseUnitaire, b.codedispo codedispo '
                           ||' FROM     SPEPRESENTATION b, SPECIALITE a, SPEEVTPRESENTATION c, LIVRETVIDAL d'
                           ||' WHERE    a.ID_SPECIALITE + 0       = b.ID_SPECIALITE'
					                 ||'  AND    a.IDTYPESPE IN ('||domaine||')'
                           ||'  AND    b.ID_SPEPRESENTATION      = c.ID_SPEPRESENTATION';
                   --  ||'  AND    f.ID_SPEPRESENTATION (+)  = b.ID_SPEPRESENTATION'
                   --  ||'  AND    UPPER(f.TYPECONDPRIMAIRE (+)) = ''DENOMCIP''';
					 IF typ = 1 THEN
                     Req1 := Req1 ||'  AND    UPPER(TRANSLATE(a.DENOMSPE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCipsWithLivret_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))';
           ELSIF typ = 7 THEN
					 Req1 := Req1 ||' AND b.UCD = '''||GetCipsWithLivret_txt.Terme||''''
           --ML : Projet Nouveaux et Supprimés-13/05/2004
                        ||' AND b.codedispo NOT IN ('||Supp||')';

					 END IF;
					 Req1 := Req1 ||'  AND    c.DATEEVENEMENT = (SELECT MAX(e.DATEEVENEMENT)'
                     ||'                            FROM   SPEEVTPRESENTATION e'
                     ||'                            WHERE  e.ID_SPEPRESENTATION = c.ID_SPEPRESENTATION'
                     ||'                              AND  UPPER(e.EVENEMENT) LIKE ''%REMB%'')'
                     ||'  AND    UPPER(c.evenement) LIKE ''%REMB%''';

					 IF Banque = 'O' THEN
				   	 Req1 := Req1 || ' AND    d.ID_SPEPRESENTATION(+)      = b.ID_SPEPRESENTATION'
                                  || ' AND    d.IDORGANISME(+)             = '||GetCipsWithLivret_txt.Id_hop;
				     ELSE
				     Req1 := Req1 || ' AND    d.ID_SPEPRESENTATION      = b.ID_SPEPRESENTATION'
                                  || ' AND    d.IDORGANISME             = '||GetCipsWithLivret_txt.Id_hop;
				   	 END IF;


					 Req2 := 'SELECT  /*+ RULE */  b.ID_SPEPRESENTATIONHOP, 0 ID_SPECIALITE, b.CIP,'
                           ||'b.UCD, '''' AMMEUROPE, '''' LIEUDISPO,'
                           ||''''' CONDDISPO , '''' LISTE, '''' DUREEPRESCRIPTION,'
                           ||''''' PRESCRIPTIONINITIALE, '''' PRESCRIPTIONRESERVEE,'
                           ||''''' RENOUVELRESERVE, '''' MEDPARTIC, '''' NATURESURVEILLANCE,'
                           ||''''' CODEREFERANTGENERIQUE, '''' REMPLACE, '''' SOURCEREMPLACE,'
                           ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACE,'
                           ||''''' REMPLACEPAR, '''' SOURCEREMPLACEPAR,'
                           ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACEPAR,'
                           ||'0 PRIXPRODHTF, a.PRIX_TTC_F PRIXPUBLICTTCF, 0 PRIXPRODHTE, a.PRIX_TTC_E PRIXPUBLICTTCE, '''' TVA,'
                           ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DCREAT,'
                           ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DMODIF,'
                           ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DREVIS,'
                           ||''''' CIPREFERANT, '''' EVENEMENT, TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATEEVENEMENT,'
                           ||'b.NOM DenomCip, a.IDORGANISME, a.PRIX_TTC_F, a.PRIX_TTC_E, a.DISPO, a.COMMENTAIRE,'
                           ||'b.PRESENTATION, b.FORME, b.DOSAGE, b.LABO, a.CODHOPITAL, ''C'' FLAG_CAN, '''' disponibilite, 0  NBprise, '''' PriseUnitaire, 10 codedispo '
                           ||' FROM   SPEPRESENTATIONHOP b, LIVRETHOP a'
                           ||' WHERE  a.ID_SPEPRESENTATIONHOP = b.ID_SPEPRESENTATIONHOP'
                           ||'  AND   a.IDORGANISME            = b.IDORGANISME'
                           ||'  AND   a.IDORGANISME            = '||GetCipsWithLivret_txt.Id_hop;
					  IF typ = 1 THEN
                      Req2 := Req2 ||'  AND   UPPER(TRANSLATE(b.NOM,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCipsWithLivret_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))';
					  ELSIF typ = 7 THEN
					  Req2 := Req2 ||'  AND   b.UCD = '''||GetCipsWithLivret_txt.Terme||'''';
					  END IF;

					  Requete := 'SELECT * FROM (' || Req1 ||' UNION '|| Req2 ||') ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  EVENEMENT, DENOMCIP';
					  OPEN GetCipsWithLivret_txt.RefSPEPRESENTATION FOR Requete;

               ELSE
                 -- recherche des CIP dans la banque VIDAL
                     Req1 := 'SELECT  /*+ RULE */  b.ID_SPEPRESENTATION, b.ID_SPECIALITE, b.CIP,'
                           ||'b.UCD, b.AMMEUROPE,  b.LIEUDISPO ,'
                           ||'b.CONDDISPO , b.LISTE, b.DUREEPRESCRIPTION,'
                           ||'b.PRESCRIPTIONINITIALE, b.PRESCRIPTIONRESERVEE,'
                           ||'b.RENOUVELRESERVE, b.MEDPARTIC, b.NATURESURVEILLANCE,'
                           ||'b.CODEREFERANTGENERIQUE, b.REMPLACE, b.SOURCEREMPLACE,'
                           ||'b.DATESOURCEREMPLACE, b.REMPLACEPAR, b.SOURCEREMPLACEPAR,'
--                           ||'b.DATESOURCEREMPLACEPAR, b.PRIXPRODHTF, DECODE(c.PRIX_TTC_F,NULL,b.PRIXPUBLICTTCF,c.PRIX_TTC_F) PRIXPUBLICTTCF,'
--                           ||'b.PRIXPRODHTE, DECODE(c.PRIX_TTC_E,NULL,b.PRIXPUBLICTTCE,c.PRIX_TTC_E) PRIXPUBLICTTCE, b.TVA, b.DCREAT, b.DMODIF,'
                           ||'b.DATESOURCEREMPLACEPAR, b.PRIXPRODHTF, DECODE(c.idorganisme, NULL, b.PRIXPUBLICTTCF, c.PRIX_TTC_F) PRIXPUBLICTTCF,'
                           ||'b.PRIXPRODHTE, DECODE(c.idorganisme, NULL, b.PRIXPUBLICTTCE, c.PRIX_TTC_E) PRIXPUBLICTTCE, b.TVA, b.DCREAT, b.DMODIF,'
                           ||'b.DREVIS, b.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,'
                           ||'a.DENOMSPE||DECODE(b.condi,NULL,'''','' : ''||b.condi) DenomCip,'
                           ||'c.IDORGANISME, c.PRIX_TTC_F, c.PRIX_TTC_E, c.DISPO, c.COMMENTAIRE,'
                           ||''''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, c.CODHOPITAL,'
                           ||' DECODE(c.idorganisme,NULL,''N'',''A'') FLAG_CAN, b.disponibilite, b.NBprise, b.PriseUnitaire, b.codedispo codedispo  '
                    ||' FROM     SPEPRESENTATION b, SPECIALITE a, LIVRETVIDAL c'
                    ||' WHERE    b.ID_SPECIALITE           = a.ID_SPECIALITE'
					          ||'  AND    a.IDTYPESPE IN ('||domaine||')';
                 --   ||'  AND    d.ID_SPEPRESENTATION (+)  = b.ID_SPEPRESENTATION'
                 --   ||'   AND    UPPER(d.TYPECONDPRIMAIRE (+)) = ''DENOMCIP''';
					IF typ = 1 THEN
                    Req1 := Req1 ||'   AND    UPPER(TRANSLATE(a.DENOMSPE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCipsWithLivret_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))';
					ELSIF typ = 7 THEN
					Req1 := Req1 ||'   AND    b.UCD = '''||GetCipsWithLivret_txt.Terme||''''
          --ML : Projet Nouveaux et Supprimés-13/05/2004
                       ||'  AND    b.codedispo NOT IN ('||Supp||')';
					END IF;
					IF Banque = 'O' THEN
				   	 Req1 := Req1 || ' AND    c.ID_SPEPRESENTATION(+)      = b.ID_SPEPRESENTATION'
                                  || ' AND    c.IDORGANISME(+)             = '||GetCipsWithLivret_txt.Id_hop;
				     ELSE
				     Req1 := Req1 || ' AND    c.ID_SPEPRESENTATION      = b.ID_SPEPRESENTATION'
                                  || ' AND    c.IDORGANISME             = '||GetCipsWithLivret_txt.Id_hop;
				   	 END IF;


					 -- recherche des CIP dans le livret HOPITAL
                     Req2 := 'SELECT  /*+ RULE */  b.ID_SPEPRESENTATIONHOP, 0 ID_SPECIALITE, b.CIP,'
                           ||'b.UCD, '''' AMMEUROPE, '''' LIEUDISPO,'
                           ||''''' CONDDISPO , '''' LISTE, '''' DUREEPRESCRIPTION,'
                           ||''''' PRESCRIPTIONINITIALE, '''' PRESCRIPTIONRESERVEE,'
                           ||''''' RENOUVELRESERVE, '''' MEDPARTIC, '''' NATURESURVEILLANCE,'
                           ||''''' CODEREFERANTGENERIQUE, '''' REMPLACE, '''' SOURCEREMPLACE,'
                           ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACE,'
                           ||''''' REMPLACEPAR, '''' SOURCEREMPLACEPAR,'
                           ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACEPAR,'
                           ||'0 PRIXPRODHTF, a.PRIX_TTC_F PRIXPUBLICTTCF, 0 PRIXPRODHTE, a.PRIX_TTC_E PRIXPUBLICTTCE, '''' TVA,'
                           ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DCREAT,'
                           ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DMODIF,'
                           ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DREVIS,'
                           ||''''' CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT, b.NOM DenomCip,'
                           ||'a.IDORGANISME, a.PRIX_TTC_F, a.PRIX_TTC_E, a.DISPO, a.COMMENTAIRE,'
                           ||'b.PRESENTATION, b.FORME, b.DOSAGE, b.LABO, a.CODHOPITAL, ''C'' FLAG_CAN,  '''' disponibilite, 0 NBprise, '''' PriseUnitaire , 10 codedispo  '
                     ||' FROM     SPEPRESENTATIONHOP b, LIVRETHOP a'
                     ||' WHERE    a.ID_SPEPRESENTATIONHOP = b.ID_SPEPRESENTATIONHOP'
                     ||'  AND    a.IDORGANISME           = b.IDORGANISME'
                     ||'  AND    a.IDORGANISME           = '||GetCipsWithLivret_txt.Id_hop;
					 IF typ = 1 THEN
					 Req2 := Req2 ||'  AND    UPPER(TRANSLATE(b.NOM,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCipsWithLivret_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))';
					 ELSIF typ = 7 THEN
					 Req2 := Req2 ||'  AND    b.UCD = '''||GetCipsWithLivret_txt.Terme||'''';
					 END IF;

					 Requete := 'SELECT * FROM (' || Req1 ||' UNION '|| Req2 ||') ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  DENOMCIP';
					 OPEN GetCipsWithLivret_txt.RefSPEPRESENTATION FOR Requete;

               END IF;

--**************************************************--***-- on passe un libellé de substance --***--********************************************
--**********************************************************************************************************************************************

             ELSIF Typ = 2 or Typ = 25 or Typ = 27 THEN

               IF ordre = 2 THEN
                   -- recherche des CIP dans la banque VIDAL
                   Req1:='  SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                       ||'    e.UCD, e.AMMEUROPE,  e.LIEUDISPO,'
                       ||'    e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                       ||'    e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                       ||'    e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                       ||'    e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                       ||'    e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
--                       ||'    e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(f.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,f.PRIX_TTC_F) PRIXPUBLICTTCF,'
--                       ||'    e.PRIXPRODHTE, DECODE(f.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,f.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                       ||'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(f.idorganisme, NULL, e.PRIXPUBLICTTCF, f.PRIX_TTC_F) PRIXPUBLICTTCF,'
                       ||'e.PRIXPRODHTE, DECODE(f.idorganisme, NULL, e.PRIXPUBLICTTCE, f.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                       ||'    e.DREVIS, e.CIPREFERANT,'''' EVENEMENT, '''' DATEEVENEMENT,'
                       ||'    d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,'
                       ||'    f.IDORGANISME, f.PRIX_TTC_F, f.PRIX_TTC_E, f.DISPO, f.COMMENTAIRE,'
                       ||'    '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, f.CODHOPITAL, '
                       ||'DECODE(f.IDORGANISME,NULL,''N'',''A'') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo codedispo  '
                       ||' FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, LIVRETVIDAL f'
                       ||' WHERE    b.DENOMSUB IN ( SELECT LIBELLE'
                       ||'                         FROM   T_SUB'
                       ||'                         WHERE  UPPER(TRANSLATE(LIBELLE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCipsWithLivret_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))'
                       ||'                       )'
                       ||'  AND    c.ID_SPECOMPO                 = b.ID_SPECOMPO'
                       ||'  AND    d.ID_SPECIALITE               = c.ID_SPECIALITE'
                       ||'  AND    e.ID_SPECIALITE               = d.ID_SPECIALITE'
				            	 ||'  AND    d.IDTYPESPE IN ('||domaine||')'
                     --ML : Projet Nouveaux et Supprimés-13/05/2004
                       ||'  AND    e.codedispo NOT IN ('||Supp||')';
					-- ||'  AND    g.ID_SPEPRESENTATION (+) + 0  = e.ID_SPEPRESENTATION'
          -- ||'  AND    UPPER(g.TYPECONDPRIMAIRE (+)) = ''DENOMCIP''';

					IF Typ = 25 THEN
					   Req1 := Req1 || ' AND b.bconstactif = ''1''';
					ELSIF Typ = 27 THEN
					   Req1 := Req1 || ' AND b.bconstactif = ''0''';
					END IF;

					IF Banque = 'O' THEN
					Req1 := Req1 || ' AND    f.ID_SPEPRESENTATION(+)      = e.ID_SPEPRESENTATION'
                                 || ' AND    f.IDORGANISME(+)             = '||GetCipsWithLivret_txt.Id_hop;
				    ELSE
				    Req1 := Req1 || ' AND    f.ID_SPEPRESENTATION      = e.ID_SPEPRESENTATION'
                                 || ' AND    f.IDORGANISME             = '||GetCipsWithLivret_txt.Id_hop;
					END IF;

                    Req3 := 'SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                          ||' e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                          ||' e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                          ||' e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                          ||' e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                          ||' e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                          ||' e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
--                          ||' e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(f.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,f.PRIX_TTC_F) PRIXPUBLICTTCF,'
--                          ||' e.PRIXPRODHTE, DECODE(f.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,f.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                          ||'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(f.idorganisme, NULL, e.PRIXPUBLICTTCF, f.PRIX_TTC_F) PRIXPUBLICTTCF,'
                          ||'e.PRIXPRODHTE, DECODE(f.idorganisme, NULL, e.PRIXPUBLICTTCE, f.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                          ||' e.DREVIS, e.CIPREFERANT,'''' EVENEMENT, '''' DATEEVENEMENT,'
                          ||' d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,'
                          ||' f.IDORGANISME, f.PRIX_TTC_F, f.PRIX_TTC_E, f.DISPO, f.COMMENTAIRE,'
                          ||' '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, f.CODHOPITAL,'
                          ||' DECODE(f.IDORGANISME,NULL,''N'',''A'') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo codedispo  '
                   ||'  FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, LIVRETVIDAL f'
                   ||'  WHERE    b.DENOMSUB IN ( SELECT LIBELLE'
                   ||'                           FROM   T_SUB'
                   ||'                           WHERE  ID_T_SUB IN ( SELECT DISTINCT  g.ID_T_SUB_F'
                   ||'                                                FROM             COUPLETERMETERME g'
                   ||'                                                CONNECT BY PRIOR g.ID_T_SUB_F = g.ID_T_SUB_P'
                   ||'                                                START WITH       g.ID_T_SUB_P IN ( SELECT h.ID_T_SUB'
                   ||'                                                                                  FROM   T_SUB h'
                   ||'                                                                                  WHERE  UPPER(TRANSLATE(h.LIBELLE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCipsWithLivret_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))'
                   ||'                                                                                )'
                   ||'                                              )'
                   ||'                         )'
                   ||'    AND    c.ID_SPECOMPO             = b.ID_SPECOMPO'
                   ||'    AND    d.ID_SPECIALITE           = c.ID_SPECIALITE'
                   ||'    AND    e.ID_SPECIALITE           = d.ID_SPECIALITE'
				           ||'    AND    d.IDTYPESPE IN ('||domaine||')'
        --ML : Projet Nouveaux et Supprimés-13/05/2004
                   ||'    AND    e.codedispo NOT IN ('||Supp||')';
				--   ||'    AND    i.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION'
        --           ||'    AND    UPPER(i.TYPECONDPRIMAIRE (+)) = ''DENOMCIP''';

				    IF Typ = 25 THEN
					   Req3 := Req3 || ' AND b.bconstactif = ''1''';
					ELSIF Typ = 27 THEN
					   Req3 := Req3 || ' AND b.bconstactif = ''0''';
					END IF;

				    IF Banque = 'O' THEN
					Req3 := Req3 || ' AND    f.ID_SPEPRESENTATION(+)      = e.ID_SPEPRESENTATION'
                                 || ' AND    f.IDORGANISME(+)             = '||GetCipsWithLivret_txt.Id_hop;
				    ELSE
				    Req3 := Req3 || ' AND    f.ID_SPEPRESENTATION      = e.ID_SPEPRESENTATION'
                                 || ' AND    f.IDORGANISME             = '||GetCipsWithLivret_txt.Id_hop;
					END IF;


                     -- recherche des CIP dans le livret HOPITAL
                  Req2 := 'SELECT   b.ID_SPEPRESENTATIONHOP, 0 ID_SPECIALITE, b.CIP,'
                     ||'b.UCD, '''' AMMEUROPE,  '''' LIEUDISPO,'
                     ||''''' CONDDISPO , '''' LISTE, '''' DUREEPRESCRIPTION,'
                     ||''''' PRESCRIPTIONINITIALE, '''' PRESCRIPTIONRESERVEE,'
                     ||''''' RENOUVELRESERVE, '''' MEDPARTIC, '''' NATURESURVEILLANCE,'
                     ||''''' CODEREFERANTGENERIQUE, '''' REMPLACE, '''' SOURCEREMPLACE,'
                     ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACE,'
                     ||''''' REMPLACEPAR, '''' SOURCEREMPLACEPAR,'
                     ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACEPAR,'
                     ||'0 PRIXPRODHTF, a.PRIX_TTC_F PRIXPUBLICTTCF, 0 PRIXPRODHTE, a.PRIX_TTC_E PRIXPUBLICTTCE, '''' TVA,'
                     ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DCREAT,'
                     ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DMODIF,'
                     ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DREVIS,'
                     ||''''' CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT, b.NOM DenomCip,'
                     ||'c.IDORGANISME, a.PRIX_TTC_F, a.PRIX_TTC_E, a.DISPO, a.COMMENTAIRE,'
                     ||'b.PRESENTATION, b.FORME, b.DOSAGE, b.LABO, a.CODHOPITAL, ''C'' FLAG_CAN, '''' disponibilite, 0 NBprise, '''' PriseUnitaire, 10 codedispo  '
                     ||' FROM     SPEPRESENTATIONHOP b, LIVRETHOP a, COMPOHOP c, T_SUBHOP d'
                     ||' WHERE    UPPER(TRANSLATE(d.LIBELLE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCipsWithLivret_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))'
                     ||'  AND    a.ID_SPEPRESENTATIONHOP = b.ID_SPEPRESENTATIONHOP'
                     ||'  AND    a.IDORGANISME           = b.IDORGANISME'
                     ||'  AND    a.IDORGANISME           = '||GetCipsWithLivret_txt.Id_hop
                     ||'  AND    c.IDORGANISME           = b.IDORGANISME'
                     ||'  AND    c.ID_SPEPRESENTATIONHOP = b.ID_SPEPRESENTATIONHOP'
                     ||'  AND    d.ID_T_SUBHOP           = c.ID_T_SUBHOP'
                     ||'  AND    d.IDORGANISME           = c.IDORGANISME';

					  Requete := 'SELECT * FROM ' || Req1 ||' UNION '|| Req3 ||' UNION '|| Req2 ||') ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  PRIXPUBLICTTCE, DENOMCIP';

					  OPEN GetCipsWithLivret_txt.RefSPEPRESENTATION FOR Requete;

               ELSIF ordre = 3 THEN
                     -- recherche des CIP dans la banque VIDAL
                  Req1:=' SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                      ||     'e.UCD, e.AMMEUROPE,  e.LIEUDISPO,'
                      ||     'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                      ||     'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                      ||     'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                      ||     'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                      ||     'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
         --             ||     'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,'
         --             ||     'e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                      ||     'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,'
                      ||     'e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                      ||     'e.DREVIS, e.CIPREFERANT, f.EVENEMENT, MAX(f.DATEEVENEMENT),'
                      ||     'd.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,'
                      ||     'g.IDORGANISME, g.PRIX_TTC_F, g.PRIX_TTC_E, g.DISPO, g.COMMENTAIRE,'
                      ||     ''''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL,'
                      ||     ' DECODE(g.idorganisme,NULL,''N'',''A'') FLAG_CAN , e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo codedispo  '
                      ||     '   FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, SPEEVTPRESENTATION f, LIVRETVIDAL g'
                      ||     '   WHERE    b.DENOMSUB IN ( SELECT LIBELLE'
                      ||                           ' FROM   T_SUB'
                      ||                           ' WHERE  UPPER(TRANSLATE(LIBELLE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCipsWithLivret_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))'
                      ||                          ')'
                      ||    ' AND    c.ID_SPECOMPO                 = b.ID_SPECOMPO'
                      ||    ' AND    d.ID_SPECIALITE               = c.ID_SPECIALITE'
                      ||    ' AND    e.ID_SPECIALITE               = d.ID_SPECIALITE'
				              ||    ' AND    d.IDTYPESPE IN ('||domaine||')'
               --ML : Projet Nouveaux et Supprimés-13/05/2004
                      ||    ' AND    e.codedispo NOT IN ('||Supp||')'
                      ||    ' AND    e.ID_SPEPRESENTATION          = f.ID_SPEPRESENTATION + 0'
              --    ||    ' AND    i.ID_SPEPRESENTATION (+)  + 0 = e.ID_SPEPRESENTATION'
              --    ||    ' AND    UPPER(i.TYPECONDPRIMAIRE (+)) = ''DENOMCIP'''
                      ||    ' AND    UPPER(f.EVENEMENT) LIKE ''%REMB%''';


				    IF Typ = 25 THEN
					   Req1 := Req1 || ' AND b.bconstactif = ''1''';
					ELSIF Typ = 27 THEN
					   Req1 := Req1 || ' AND b.bconstactif = ''0''';
					END IF;

				    IF Banque = 'O' THEN
					  Req1 := Req1 || ' AND    g.ID_SPEPRESENTATION(+)      = e.ID_SPEPRESENTATION'
                         || ' AND    g.IDORGANISME(+)             = '||GetCipsWithLivret_txt.Id_hop;
				    ELSE
				    Req1 := Req1 || ' AND    g.ID_SPEPRESENTATION      = e.ID_SPEPRESENTATION'
                         || ' AND    g.IDORGANISME             = '||GetCipsWithLivret_txt.Id_hop;
					END IF;


                    Req4:= ' GROUP BY e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                            ||'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                            ||'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                            ||'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                            ||'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                            ||'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                            ||'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                         --   ||'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F),'
                         --   ||'e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E), e.TVA, e.DCREAT, e.DMODIF,'
                            ||'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F),'
                            ||'e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E), e.TVA, e.DCREAT, e.DMODIF,'
                            ||'e.DREVIS, e.CIPREFERANT, f.EVENEMENT,'
                            ||'d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi),'
                            ||'g.IDORGANISME, g.PRIX_TTC_F, g.PRIX_TTC_E, g.DISPO, g.COMMENTAIRE,'
                            ||''''' , '''' , '''' , '''' , '''' , g.CODHOPITAL, DECODE(g.idorganisme,NULL,''N'',''A''), e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo codedispo  ';



					 Req1 := Req1 || Req4;

                    --UNION
                     Req3 := ' SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                           ||'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                           ||'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                           ||'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                           ||'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                           ||'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                           ||'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
              --             ||'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,'
              --             ||'e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                           ||'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,'
                           ||'e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                           ||'e.DREVIS, e.CIPREFERANT, f.EVENEMENT, MAX(f.DATEEVENEMENT),'
                           ||'d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,'
                           ||'g.IDORGANISME, g.PRIX_TTC_F, g.PRIX_TTC_E, g.DISPO, g.COMMENTAIRE,'
                           ||''''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL,'
                           ||' DECODE(g.IDORGANISME,NULL,''N'',''A'') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo codedispo  '
                    ||' FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, SPEEVTPRESENTATION f, LIVRETVIDAL g'
                    ||' WHERE    b.DENOMSUB IN ( SELECT LIBELLE'
                    ||                         ' FROM   T_SUB'
                    ||                         ' WHERE  ID_T_SUB IN ( SELECT DISTINCT  a.ID_T_SUB_F'
                    ||                                              ' FROM             COUPLETERMETERME a'
                    ||                                              ' CONNECT BY PRIOR a.ID_T_SUB_F = a.ID_T_SUB_P'
                    ||                                              ' START WITH       a.ID_T_SUB_P IN ( SELECT j.ID_T_SUB'
                    ||                                                                                ' FROM   T_SUB j'
                    ||                                                                                ' WHERE  UPPER(TRANSLATE(j.LIBELLE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCipsWithLivret_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))'
                    ||                                                                               ')'
                    ||                                             ')'
                    ||                        ')'
                    ||  ' AND    c.ID_SPECOMPO             = b.ID_SPECOMPO'
                    ||  ' AND    d.ID_SPECIALITE           = c.ID_SPECIALITE'
                    ||  ' AND    e.ID_SPECIALITE           = d.ID_SPECIALITE'
					          ||  ' AND    d.IDTYPESPE IN ('||domaine||')'
                --ML : Projet Nouveaux et Supprimés-13/05/2004
                    ||  ' AND    e.codedispo NOT IN ('||Supp||')'
                    ||  ' AND    e.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION'
                --    ||  ' AND    i.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION'
                --    ||  ' AND    UPPER(i.TYPECONDPRIMAIRE (+)) = ''DENOMCIP'''
                    ||  ' AND    UPPER(f.EVENEMENT) LIKE ''%REMB%''';

					IF Typ = 25 THEN
					   Req3 := Req3 || ' AND b.bconstactif = ''1''';
					ELSIF Typ = 27 THEN
					   Req3 := Req3 || ' AND b.bconstactif = ''0''';
					END IF;

					IF Banque = 'O' THEN
					Req3 := Req3 || ' AND    g.ID_SPEPRESENTATION(+)      = e.ID_SPEPRESENTATION'
                       || ' AND    g.IDORGANISME(+)             = '||GetCipsWithLivret_txt.Id_hop;
				    ELSE
				    Req3 := Req3 || ' AND    g.ID_SPEPRESENTATION      = e.ID_SPEPRESENTATION'
                         || ' AND    g.IDORGANISME             = '||GetCipsWithLivret_txt.Id_hop;
					END IF;

					Req3 := Req3 || Req4;

                     -- recherche des CIP dans le livret HOPITAL
                    Req2:=' SELECT   b.ID_SPEPRESENTATIONHOP, 0 ID_SPECIALITE, b.CIP,'
                        ||   'b.UCD, '''' AMMEUROPE, '''' LIEUDISPO,'
                        ||   ''''' CONDDISPO , '''' LISTE, '''' DUREEPRESCRIPTION,'
                        ||   ''''' PRESCRIPTIONINITIALE, '''' PRESCRIPTIONRESERVEE,'
                        ||   ''''' RENOUVELRESERVE, '''' MEDPARTIC, '''' NATURESURVEILLANCE,'
                        ||   ''''' CODEREFERANTGENERIQUE, '''' REMPLACE, '''' SOURCEREMPLACE,'
                        ||   'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACE,'
                        ||   ''''' REMPLACEPAR, '''' SOURCEREMPLACEPAR,'
                        ||   'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACEPAR,'
                        ||   '0 PRIXPRODHTF, a.PRIX_TTC_F PRIXPUBLICTTCF, 0 PRIXPRODHTE, a.PRIX_TTC_E PRIXPUBLICTTCE, '''' TVA,'
                        ||   'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DCREAT,'
                        ||   'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DMODIF,'
                        ||   'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DREVIS,'
                        ||   ''''' CIPREFERANT, '''' EVENEMENT, TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATEEVENEMENT,'
                        ||   'b.NOM DenomCip, a.IDORGANISME, a.PRIX_TTC_F, a.PRIX_TTC_E, a.DISPO, a.COMMENTAIRE,'
                        ||   'b.PRESENTATION, b.FORME, b.DOSAGE, b.LABO, a.CODHOPITAL, ''C'' FLAG_CAN, '''' disponibilite, 0 NBprise, '''' PriseUnitaire, 10 codedispo '
                        ||' FROM     SPEPRESENTATIONHOP b, LIVRETHOP a, COMPOHOP c, T_SUBHOP d'
                        ||' WHERE    UPPER(TRANSLATE(d.LIBELLE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCipsWithLivret_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))'
                        ||'  AND    a.ID_SPEPRESENTATIONHOP = b.ID_SPEPRESENTATIONHOP'
                        ||'  AND    a.IDORGANISME           = b.IDORGANISME'
                        ||'  AND    a.IDORGANISME           = '||GetCipsWithLivret_txt.Id_hop
                        ||'  AND    c.IDORGANISME           = b.IDORGANISME'
                        ||'  AND    c.ID_SPEPRESENTATIONHOP = b.ID_SPEPRESENTATIONHOP'
                        ||'  AND    d.ID_T_SUBHOP           = c.ID_T_SUBHOP'
                        ||'  AND    d.IDORGANISME           = c.IDORGANISME ';

					 Requete := 'SELECT * FROM (' || Req1 ||' UNION '|| Req3 ||' UNION '|| Req2 ||') ' ; --||' ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  EVENEMENT, DENOMCIP';
					 OPEN GetCipsWithLivret_txt.RefSPEPRESENTATION FOR Requete;


               ELSE
                    -- recherche des CIP dans la banque VIDAL
                     Req1 := 'SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                           ||'e.UCD, e.AMMEUROPE, e.LIEUDISPO,'
                           ||'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                           ||'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                           ||'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                           ||'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                           ||'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                          -- ||'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(f.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,f.PRIX_TTC_F) PRIXPUBLICTTCF,'
                          -- ||'e.PRIXPRODHTE, DECODE(f.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,f.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                           ||'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(f.idorganisme, NULL, e.PRIXPUBLICTTCF, f.PRIX_TTC_F) PRIXPUBLICTTCF,'
                           ||'e.PRIXPRODHTE, DECODE(f.idorganisme, NULL, e.PRIXPUBLICTTCE, f.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                           ||'e.DREVIS, e.CIPREFERANT,'''' EVENEMENT, '''' DATEEVENEMENT,'
                           ||'d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,'
                           ||'f.IDORGANISME, f.PRIX_TTC_F, f.PRIX_TTC_E, f.DISPO, f.COMMENTAIRE,'
                           ||''''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, f.CODHOPITAL, '
                           ||'DECODE(f.IDORGANISME,NULL,''N'',''A'') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo codedispo  '
                           ||' FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, LIVRETVIDAL f'
                           ||' WHERE    b.DENOMSUB IN ( SELECT LIBELLE'
                           ||'                         FROM   T_SUB'
                           ||'                         WHERE  UPPER(TRANSLATE(LIBELLE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCipsWithLivret_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))'
                           ||'                       )'
                           ||'  AND    c.ID_SPECOMPO                 = b.ID_SPECOMPO'
                           ||'  AND    d.ID_SPECIALITE               = c.ID_SPECIALITE'
                           ||'  AND    e.ID_SPECIALITE               = d.ID_SPECIALITE'
					                 ||'  AND    d.IDTYPESPE IN ('||domaine||')'
                     --ML : Projet Nouveaux et Supprimés-13/05/2004
                           ||'  AND    e.codedispo NOT IN ('||Supp||')';
                  --   ||'  AND    g.ID_SPEPRESENTATION (+)  + 0 = e.ID_SPEPRESENTATION'
                  --   ||'  AND    UPPER(g.TYPECONDPRIMAIRE (+)) = ''DENOMCIP''';

					IF Typ = 25 THEN
					   Req1 := Req1 || ' AND b.bconstactif = ''1''';
					ELSIF Typ = 27 THEN
					   Req1 := Req1 || ' AND b.bconstactif = ''0''';
					END IF;

					IF Banque = 'O' THEN
					Req1 := Req1 || ' AND    f.ID_SPEPRESENTATION(+)      = e.ID_SPEPRESENTATION'
                                 || ' AND    f.IDORGANISME(+)             = '||GetCipsWithLivret_txt.Id_hop;
				    ELSE
				    Req1 := Req1 || ' AND    f.ID_SPEPRESENTATION      = e.ID_SPEPRESENTATION'
                                 || ' AND    f.IDORGANISME             = '||GetCipsWithLivret_txt.Id_hop;
					END IF;


                    Req3 := 'SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,'
                          ||'e.UCD, e.AMMEUROPE,  e.LIEUDISPO,'
                          ||'e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,'
                          ||'e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,'
                          ||'e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,'
                          ||'e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,'
                          ||'e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,'
                        --  ||'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(f.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,f.PRIX_TTC_F) PRIXPUBLICTTCF,'
                        --  ||'e.PRIXPRODHTE, DECODE(f.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,f.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                          ||'e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(f.idorganisme, NULL, e.PRIXPUBLICTTCF, f.PRIX_TTC_F) PRIXPUBLICTTCF,'
                          ||'e.PRIXPRODHTE, DECODE(f.idorganisme, NULL, e.PRIXPUBLICTTCE, f.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,'
                          ||'e.DREVIS, e.CIPREFERANT,'''' EVENEMENT, '''' DATEEVENEMENT,'
                          ||'d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,'
                          ||'f.IDORGANISME, f.PRIX_TTC_F, f.PRIX_TTC_E, f.DISPO, f.COMMENTAIRE,'
                          ||''''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, f.CODHOPITAL,'
                          ||' DECODE(f.IDORGANISME,NULL,''N'',''A'') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo codedispo  '
                   ||' FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, LIVRETVIDAL f'
                   ||' WHERE    b.DENOMSUB IN ( SELECT LIBELLE'
                   	   					   ||'   FROM   T_SUB'
                   					  	   ||'   WHERE  ID_T_SUB IN ( SELECT DISTINCT  g.ID_T_SUB_F'
                   						   		 		||'  FROM             COUPLETERMETERME g'
                   										||'  CONNECT BY PRIOR g.ID_T_SUB_F = g.ID_T_SUB_P'
                  										||'  START WITH       g.ID_T_SUB_P IN ( SELECT h.ID_T_SUB'
                   											 	   			  			   ||'   FROM   T_SUB h'
                   																		   ||'   WHERE  UPPER(TRANSLATE(h.LIBELLE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCipsWithLivret_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))'
                   																		   ||'       )'
                   										||'          )'
                   							||'   )'
                   ||'    AND    c.ID_SPECOMPO             = b.ID_SPECOMPO'
                   ||'    AND    d.ID_SPECIALITE           = c.ID_SPECIALITE'
                   ||'    AND    e.ID_SPECIALITE           = d.ID_SPECIALITE'
				           ||'    AND    d.IDTYPESPE IN ('||domaine||')'
                --ML : Projet Nouveaux et Supprimés-13/05/2004
                   ||'    AND    e.codedispo NOT IN ('||Supp||')';
                --   ||'    AND    i.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION'
                --   ||'    AND    UPPER(i.TYPECONDPRIMAIRE (+)) = ''DENOMCIP''';

				    IF Typ = 25 THEN
					   Req3 := Req3 || ' AND b.bconstactif = ''1''';
					ELSIF Typ = 27 THEN
					   Req3 := Req3 || ' AND b.bconstactif = ''0''';
					END IF;

					IF Banque = 'O' THEN
				    Req3 := Req3 || ' AND    f.ID_SPEPRESENTATION(+)      = e.ID_SPEPRESENTATION'
                                 || ' AND    f.IDORGANISME(+)             = '||GetCipsWithLivret_txt.Id_hop;
				    ELSE
				    Req3 := Req3 || ' AND    f.ID_SPEPRESENTATION      = e.ID_SPEPRESENTATION'
                                 || ' AND    f.IDORGANISME             = '||GetCipsWithLivret_txt.Id_hop;
					END IF;

                     -- recherche des CIP dans le livret HOPITAL
                     Req2:= 'SELECT   b.ID_SPEPRESENTATIONHOP, 0 ID_SPECIALITE, b.CIP,'
                          ||'b.UCD, '''' AMMEUROPE, '''' LIEUDISPO,'
                          ||''''' CONDDISPO , '''' LISTE, '''' DUREEPRESCRIPTION,'
                          ||''''' PRESCRIPTIONINITIALE, '''' PRESCRIPTIONRESERVEE,'
                          ||''''' RENOUVELRESERVE, '''' MEDPARTIC, '''' NATURESURVEILLANCE,'
                          ||''''' CODEREFERANTGENERIQUE, '''' REMPLACE, '''' SOURCEREMPLACE,'
                          ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACE,'
                          ||''''' REMPLACEPAR, '''' SOURCEREMPLACEPAR,'
                          ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACEPAR,'
                          ||'0 PRIXPRODHTF, a.PRIX_TTC_F PRIXPUBLICTTCF, 0 PRIXPRODHTE, a.PRIX_TTC_E PRIXPUBLICTTCE, '''' TVA,'
                          ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DCREAT,'
                          ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DMODIF,'
                          ||'TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DREVIS,'
                          ||''''' CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT, b.NOM DenomCip,'
                          ||'a.IDORGANISME, a.PRIX_TTC_F, a.PRIX_TTC_E, a.DISPO, a.COMMENTAIRE,'
                          ||'b.PRESENTATION, b.FORME, b.DOSAGE, b.LABO, a.CODHOPITAL, ''C'' FLAG_CAN, '''' disponibilite, 0 NBprise, '''' PriseUnitaire, 10 codedispo  '
                          ||'  FROM     SPEPRESENTATIONHOP b, LIVRETHOP a, COMPOHOP c, T_SUBHOP d'
                          ||'  WHERE    UPPER(TRANSLATE(d.LIBELLE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetCipsWithLivret_txt.Terme||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))'
                          ||'    AND    a.ID_SPEPRESENTATIONHOP = b.ID_SPEPRESENTATIONHOP'
                          ||'    AND    a.IDORGANISME           = b.IDORGANISME'
                          ||'    AND    a.IDORGANISME           = '||GetCipsWithLivret_txt.Id_hop
                          ||'    AND    c.IDORGANISME           = b.IDORGANISME'
                          ||'    AND    c.ID_SPEPRESENTATIONHOP = b.ID_SPEPRESENTATIONHOP'
                          ||'    AND    d.ID_T_SUBHOP           = c.ID_T_SUBHOP'
                          ||'    AND    d.IDORGANISME           = c.IDORGANISME';

				   Requete := 'SELECT * FROM (' || Req1 ||' UNION '|| Req3 ||' UNION '|| Req2 ||') ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  DENOMCIP';
				   OPEN GetCipsWithLivret_txt.RefSPEPRESENTATION FOR Requete;


               END IF;

--***--********************************************** on passe un libellé de Classe Théra --***--************************************************
--***********************************************************************************************************************************************

           ELSIF Typ = 3 THEN
            --Tri par prix
            IF ordre = 2 THEN
              --Recherche uniquement dans la banque Vidal et dans les médicaments admis au livret
               IF Banque = 'O' THEN
                  OPEN GetCipsWithLivret_txt.RefSPEPRESENTATION FOR
                  'Select   /*+ RULE */         e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                         e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                         e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                         e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                         e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                         e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                         e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                         e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,
--                         e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                          e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                          e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                         e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                         d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                         g.IDORGANISME ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                         '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL,
                         DECODE(g.IDORGANISME,NULL,'||'''N'''||','||'''A'''||') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, LIVRETVIDAL g
                  WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)
                                                FROM             SPECIALITE d, SPECLASSIRIS c
                                                WHERE            d.id_specialite =  c.id_specialite
                                                  AND            c.ID_DICOCOMCLASSIRIS IN ( SELECT           a.ID_DICOCOMCLASSIRIS
                                                                                            FROM             DICOCOMCLASSIRIS a
                                                                                            CONNECT BY PRIOR a.id_dicocomclassiris = a.dic_id_dicocomclassiris
                                                                                            START WITH       a.id_dicocomclassiris IN (' || GetCipsWithLivret_txt.Terme || ')))
                    AND    e.id_specialite               = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
             --ML : Projet Nouveaux et Supprimés-13/05/2004
                    AND    e.codedispo NOT IN ('||Supp||')
                --   AND    f.ID_SPEPRESENTATION (+)      = e.ID_SPEPRESENTATION
                --    AND    UPPER(f.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    g.ID_SPEPRESENTATION(+)      = e.ID_SPEPRESENTATION
                    AND    g.IDORGANISME(+)             = '||GetCipsWithLivret_txt.Id_hop||'
				   ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),   PRIXPUBLICTTCE, DENOMCIP ';
               ELSE
                OPEN GetCipsWithLivret_txt.RefSPEPRESENTATION FOR
                 'Select   /*+ RULE */         e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                           e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                           e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                           e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                           e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                           e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                           e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,
--                           e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                           e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                           d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                           g.IDORGANISME  ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL, ''A'' FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, LIVRETVIDAL g
                  WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)
                                                FROM             SPECIALITE d, SPECLASSIRIS c
												--FROM             SPECIALITE d, SPEINDIC c
                                                WHERE            d.id_specialite =  c.id_specialite
                                                  AND            c.ID_DICOCOMCLASSIRIS IN ( SELECT           a.ID_DICOCOMCLASSIRIS
                                                                                            FROM             DICOCOMCLASSIRIS a
                                                                                            CONNECT BY PRIOR a.id_dicocomclassiris = a.dic_id_dicocomclassiris
                                                                                            START WITH       a.id_dicocomclassiris IN (' || GetCipsWithLivret_txt.Terme || ')))
                    AND    e.id_specialite               = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
             --ML : Projet Nouveaux et Supprimés-13/05/2004
                    AND    e.codedispo NOT IN ('||Supp||')
             --       AND    f.ID_SPEPRESENTATION (+)      = e.ID_SPEPRESENTATION
             --       AND    UPPER(f.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    g.ID_SPEPRESENTATION          = e.ID_SPEPRESENTATION
                    AND    g.IDORGANISME                 = ' || GetCipsWithLivret_txt.Id_hop || '
                 ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),   PRIXPUBLICTTCE, DENOMCIP';
               END IF;
             --Tri par evenement
            ELSIF ordre = 3 THEN
               IF Banque = 'O' THEN
               --Recherche uniquement dans la banque Vidal et dans les médicaments admis au livret
                 OPEN GetCipsWithLivret_txt.RefSPEPRESENTATION FOR
                  'Select   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                           e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                           e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                           e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                           e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                           e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                           e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(i.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,i.PRIX_TTC_F) PRIXPUBLICTTCF,
--                           e.PRIXPRODHTE, DECODE(i.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,i.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(i.idorganisme, NULL, e.PRIXPUBLICTTCF, i.PRIX_TTC_F) PRIXPUBLICTTCF,
                           e.PRIXPRODHTE, DECODE(i.idorganisme, NULL, e.PRIXPUBLICTTCE, i.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DREVIS, e.CIPREFERANT, f.EVENEMENT, f.DATEEVENEMENT,
                           d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                           i.IDORGANISME  ID_ORGANISME, i.PRIX_TTC_F PrixTTCF, i.PRIX_TTC_E PRIXTTCE, i.Dispo, i.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, i.CODHOPITAL,
                           DECODE(i.IDORGANISME,NULL,'||'''N'''||','||'''A'''||') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, SPEEVTPRESENTATION f, LIVRETVIDAL i
                  WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)
                                                FROM             SPECIALITE d, SPECLASSIRIS c
                                                --FROM             SPECIALITE d, SPEINDIC c
                                                WHERE            d.id_specialite =  c.id_specialite
                                                  AND            c.ID_DICOCOMCLASSIRIS IN ( SELECT           a.ID_DICOCOMCLASSIRIS
                                                                                            FROM             DICOCOMCLASSIRIS a
                                                                                            CONNECT BY PRIOR a.id_dicocomclassiris = a.dic_id_dicocomclassiris
                                                                                            START WITH       a.id_dicocomclassiris IN (' || GetCipsWithLivret_txt.Terme || ')))
                    AND    e.id_specialite           = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
             --ML : Projet Nouveaux et Supprimés-13/05/2004
                    AND    e.codedispo NOT IN ('||Supp||')
                    AND    e.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION
               --     AND    h.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION
               --     AND    UPPER(h.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    f.DATEEVENEMENT      = ( SELECT MAX(g.DATEEVENEMENT)
                                                    FROM   SPEEVTPRESENTATION g
                                                    WHERE  g.ID_SPEPRESENTATION = f.ID_SPEPRESENTATION
                                                      AND  UPPER(g.EVENEMENT) LIKE ''%REMB%'')
                    AND    UPPER(f.EVENEMENT) LIKE ''%REMB%''
                    AND    i.ID_SPEPRESENTATION (+)= e.ID_SPEPRESENTATION
                    AND    i.IDORGANISME (+)       = ' || GetCipsWithLivret_txt.Id_hop || '
                  ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  EVENEMENT, DENOMCIP';
               ELSE
                 OPEN GetCipsWithLivret_txt.RefSPEPRESENTATION FOR
                 'Select   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                           e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                           e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                           e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                           e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                           e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                           e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(i.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,i.PRIX_TTC_F) PRIXPUBLICTTCF,
--                           e.PRIXPRODHTE, DECODE(i.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,i.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(i.idorganisme, NULL, e.PRIXPUBLICTTCF, i.PRIX_TTC_F) PRIXPUBLICTTCF,
                           e.PRIXPRODHTE, DECODE(i.idorganisme, NULL, e.PRIXPUBLICTTCE, i.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DREVIS, e.CIPREFERANT, f.EVENEMENT, f.DATEEVENEMENT,
                           d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                           i.IDORGANISME  ID_ORGANISME, i.PRIX_TTC_F PrixTTCF, i.PRIX_TTC_E PRIXTTCE, i.Dispo, i.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, i.CODHOPITAL, ''A'' FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, SPEEVTPRESENTATION f, LIVRETVIDAL i
                  WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)
                                                FROM             SPECIALITE d, SPECLASSIRIS c
                                                --FROM             SPECIALITE d, SPEINDIC c
                                                WHERE            d.id_specialite =  c.id_specialite
                                                  AND            c.ID_DICOCOMCLASSIRIS IN ( SELECT           a.ID_DICOCOMCLASSIRIS
                                                                                            FROM             DICOCOMCLASSIRIS a
                                                                                            CONNECT BY PRIOR a.id_dicocomclassiris = a.dic_id_dicocomclassiris
                                                                                            START WITH       a.id_dicocomclassiris IN (' || GetCipsWithLivret_txt.Terme || ')))
                    AND    e.id_specialite           = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
             --ML : Projet Nouveaux et Supprimés-13/05/2004
                    AND    e.codedispo NOT IN ('||Supp||')
                    AND    e.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION
               --     AND    h.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION
               --     AND    UPPER(h.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    f.DATEEVENEMENT      = ( SELECT MAX(g.DATEEVENEMENT)
                                                    FROM   SPEEVTPRESENTATION g
                                                    WHERE  g.ID_SPEPRESENTATION = f.ID_SPEPRESENTATION
                                                      AND  UPPER(g.EVENEMENT) LIKE ''%REMB%'')
                    AND    UPPER(f.EVENEMENT) LIKE ''%REMB%''
                    AND    i.ID_SPEPRESENTATION = e.ID_SPEPRESENTATION
                    AND    i.IDORGANISME        = ' || GetCipsWithLivret_txt.Id_hop || '
                  ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  EVENEMENT, DENOMCIP';
                END IF;
             --Tri par nom
            ELSE
               IF Banque = 'O' THEN
                 OPEN GetCipsWithLivret_txt.RefSPEPRESENTATION FOR
                 'Select   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                           e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                           e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                           e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                           e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                           e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                           e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,
--                           e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                          e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                          e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                           d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                           g.IDORGANISME  ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL,
                            DECODE(g.IDORGANISME,NULL,'||'''N'''||','||'''A'''||') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, LIVRETVIDAL g
                  WHERE    e.id_specialite IN ( SELECT DISTINCT  d.id_specialite
                                                FROM             SPECIALITE d, SPECLASSIRIS c
                                                --FROM             SPECIALITE d, SPEINDIC c
                                                WHERE            d.id_specialite =  c.id_specialite
                                                  AND            c.ID_DICOCOMCLASSIRIS IN ( SELECT           a.ID_DICOCOMCLASSIRIS
                                                                                            FROM             DICOCOMCLASSIRIS a
                                                                                            CONNECT BY PRIOR a.id_dicocomclassiris = a.dic_id_dicocomclassiris
                                                                                            START WITH       a.id_dicocomclassiris IN (' || GetCipsWithLivret_txt.Terme || ')))
                    AND    e.id_specialite               = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
              --ML : Projet Nouveaux et Supprimés-13/05/2004
                    AND    e.codedispo NOT IN ('||Supp||')
              --      AND    f.ID_SPEPRESENTATION (+)      = e.ID_SPEPRESENTATION
              --      AND    UPPER(f.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    g.ID_SPEPRESENTATION (+)= e.ID_SPEPRESENTATION
                    AND    g.IDORGANISME (+)       = ' || GetCipsWithLivret_txt.Id_hop || '
                  ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  DenomCip';
                ELSE
                  OPEN GetCipsWithLivret_txt.RefSPEPRESENTATION FOR
                  'Select   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                           e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                           e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                           e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                           e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                           e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                           e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,
--                           e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E)  PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                          e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                          e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                           d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                           g.IDORGANISME  ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL, ''A'' FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, LIVRETVIDAL g
                  WHERE    e.id_specialite IN ( SELECT DISTINCT  d.id_specialite
                                                FROM             SPECIALITE d, SPECLASSIRIS c
                                                --FROM             SPECIALITE d, SPEINDIC c
                                                WHERE            d.id_specialite =  c.id_specialite
                                                  AND            c.ID_DICOCOMCLASSIRIS IN ( SELECT           a.ID_DICOCOMCLASSIRIS
                                                                                            FROM             DICOCOMCLASSIRIS a
                                                                                            CONNECT BY PRIOR a.id_dicocomclassiris = a.dic_id_dicocomclassiris
                                                                                            START WITH       a.id_dicocomclassiris IN (' || GetCipsWithLivret_txt.Terme || ')))
                    AND    e.id_specialite               = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
                 --ML : Projet Nouveaux et Supprimés-13/05/2004
                    AND    e.codedispo NOT IN ('||Supp||')
                 --   AND    f.ID_SPEPRESENTATION (+)      = e.ID_SPEPRESENTATION
                 --   AND    UPPER(f.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    g.ID_SPEPRESENTATION = e.ID_SPEPRESENTATION
                    AND    g.IDORGANISME        = ' || GetCipsWithLivret_txt.Id_hop || '
                  ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  DenomCip';
               END IF;
               END IF;

--*****************************************************/----Classes ATC----***********************************************************************
--************************************************************************************************************************************************

     --***-- on passe un libellé de Classe ATC --***--
         ELSIF Typ = 5  THEN
            --Tri par prix
            IF ordre = 2 THEN
              --Recherche uniquement dans la banque Vidal et dans les médicaments admis au livret
               IF Banque = 'O' THEN
                  OPEN GetCipsWithLivret_txt.RefSPEPRESENTATION FOR
                  'Select   /*+ RULE */         e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                         e.UCD, e.AMMEUROPE,  e.LIEUDISPO,
                         e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                         e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                         e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                         e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                         e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                         e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,
--                         e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                         e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                         e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                         e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                         d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                         g.IDORGANISME ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                         '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL,
                         DECODE(g.IDORGANISME,NULL,'||'''N'''||','||'''A'''||') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                  FROM   SPEPRESENTATION e, SPECIALITE d, LIVRETVIDAL g
                  WHERE  e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)
                                                FROM             SPECIALITE d, SPEPHARMACODYNAMIE p,
												                        DICOT_ATC_IRIS q
	                                              WHERE   q.LIBELLE = p.ATC_IRIS
									                                AND   d.ID_SPECIALITE = p.ID_SPECIALITE
                                                  AND   q.ID_DICOT_ATC_IRIS IN ( SELECT          q.ID_DICOT_ATC_IRIS
                                                                                 FROM            DICOT_ATC_IRIS q
                                                                                 CONNECT BY PRIOR q.ID_DICOT_ATC_IRIS = q.DIC_ID_DICOT_ATC_IRIS
                                                                                 START WITH       q.ID_DICOT_ATC_IRIS IN (' || GetCipsWithLivret_txt.Terme || ')))
                    AND    e.id_specialite               = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
             --ML : Projet Nouveaux et Supprimés-13/05/2004
                     AND    e.codedispo NOT IN ('||Supp||')
               --     AND    f.ID_SPEPRESENTATION (+)      = e.ID_SPEPRESENTATION
               --     AND    UPPER(f.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    g.ID_SPEPRESENTATION(+)      = e.ID_SPEPRESENTATION
                    AND    g.IDORGANISME(+)             = '||GetCipsWithLivret_txt.Id_hop||'
				   ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),   PRIXPUBLICTTCE, DENOMCIP';
               ELSE
                OPEN GetCipsWithLivret_txt.RefSPEPRESENTATION FOR
                 'Select   /*+ RULE */         e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                           e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                           e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                           e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                           e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                           e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                           e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,
--                           e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                          e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                          e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                           d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                           g.IDORGANISME  ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL, ''A'' FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, LIVRETVIDAL g
                  WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)
                                                FROM             SPECIALITE d, SPEPHARMACODYNAMIE p,
												                        DICOT_ATC_IRIS q
	                                              WHERE   q.LIBELLE = p.ATC_IRIS
									                                AND   d.ID_SPECIALITE = p.ID_SPECIALITE
                                                  AND   q.ID_DICOT_ATC_IRIS IN ( SELECT          q.ID_DICOT_ATC_IRIS
                                                                                 FROM            DICOT_ATC_IRIS q
                                                                                 CONNECT BY PRIOR q.ID_DICOT_ATC_IRIS = q.DIC_ID_DICOT_ATC_IRIS
                                                                                 START WITH       q.ID_DICOT_ATC_IRIS IN (' || GetCipsWithLivret_txt.Terme || ')))
                    AND    e.id_specialite               = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
             --ML : Projet Nouveaux et Supprimés-13/05/2004
                     AND    e.codedispo NOT IN ('||Supp||')
                 --   AND    f.ID_SPEPRESENTATION (+)      = e.ID_SPEPRESENTATION
                 --   AND    UPPER(f.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    g.ID_SPEPRESENTATION          = e.ID_SPEPRESENTATION
                    AND    g.IDORGANISME                 = ' || GetCipsWithLivret_txt.Id_hop || '
                 ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),   PRIXPUBLICTTCE, DENOMCIP';
               END IF;
             --Tri par evenement
            ELSIF ordre = 3 THEN
               IF Banque = 'O' THEN
               --Recherche uniquement dans la banque Vidal et dans les médicaments admis au livret
                 OPEN GetCipsWithLivret_txt.RefSPEPRESENTATION FOR
                  'Select   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                           e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                           e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                           e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                           e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                           e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                           e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(i.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,i.PRIX_TTC_F) PRIXPUBLICTTCF,
--                           e.PRIXPRODHTE, DECODE(i.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,i.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                          e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(i.idorganisme, NULL, e.PRIXPUBLICTTCF, i.PRIX_TTC_F) PRIXPUBLICTTCF,
                          e.PRIXPRODHTE, DECODE(i.idorganisme, NULL, e.PRIXPUBLICTTCE, i.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DREVIS, e.CIPREFERANT, f.EVENEMENT, f.DATEEVENEMENT,
                           d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                           i.IDORGANISME  ID_ORGANISME, i.PRIX_TTC_F PrixTTCF, i.PRIX_TTC_E PRIXTTCE, i.Dispo, i.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, i.CODHOPITAL,
                           DECODE(i.IDORGANISME,NULL,'||'''N'''||','||'''A'''||') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, SPEEVTPRESENTATION f, LIVRETVIDAL i
                  WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)
                                                FROM             SPECIALITE d, SPEPHARMACODYNAMIE p,
												                        DICOT_ATC_IRIS q
	                                              WHERE   q.LIBELLE = p.ATC_IRIS
									                                AND   d.ID_SPECIALITE = p.ID_SPECIALITE
                                                  AND   q.ID_DICOT_ATC_IRIS IN ( SELECT          q.ID_DICOT_ATC_IRIS
                                                                                 FROM            DICOT_ATC_IRIS q
                                                                                 CONNECT BY PRIOR q.ID_DICOT_ATC_IRIS = q.DIC_ID_DICOT_ATC_IRIS
                                                                                 START WITH       q.ID_DICOT_ATC_IRIS IN (' || GetCipsWithLivret_txt.Terme || ')))
                    AND    e.id_specialite           = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
             --ML : Projet Nouveaux et Supprimés-13/05/2004
                     AND    e.codedispo NOT IN ('||Supp||')
                    AND    e.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION
                  --  AND    h.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION
                  --  AND    UPPER(h.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    f.DATEEVENEMENT      = ( SELECT MAX(g.DATEEVENEMENT)
                                                    FROM   SPEEVTPRESENTATION g
                                                    WHERE  g.ID_SPEPRESENTATION = f.ID_SPEPRESENTATION
                                                      AND  UPPER(g.EVENEMENT) LIKE ''%REMB%'')
                    AND    UPPER(f.EVENEMENT) LIKE ''%REMB%''
                    AND    i.ID_SPEPRESENTATION (+)= e.ID_SPEPRESENTATION
                    AND    i.IDORGANISME (+)       = ' || GetCipsWithLivret_txt.Id_hop || '
                  ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  EVENEMENT, DENOMCIP';
               ELSE
                 OPEN GetCipsWithLivret_txt.RefSPEPRESENTATION FOR
                 'Select   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                           e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                           e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                           e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                           e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                           e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                           e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(i.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,i.PRIX_TTC_F) PRIXPUBLICTTCF,
--                           e.PRIXPRODHTE, DECODE(i.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,i.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(i.idorganisme, NULL, e.PRIXPUBLICTTCF, i.PRIX_TTC_F) PRIXPUBLICTTCF,
                           e.PRIXPRODHTE, DECODE(i.idorganisme, NULL, e.PRIXPUBLICTTCE, i.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DREVIS, e.CIPREFERANT, f.EVENEMENT, f.DATEEVENEMENT,
                           d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                           i.IDORGANISME  ID_ORGANISME, i.PRIX_TTC_F PrixTTCF, i.PRIX_TTC_E PRIXTTCE, i.Dispo, i.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, i.CODHOPITAL, ''A'' FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, SPEEVTPRESENTATION f, LIVRETVIDAL i
                  WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)
                                                FROM             SPECIALITE d, SPEPHARMACODYNAMIE p,
												                        DICOT_ATC_IRIS q
	                                              WHERE   q.LIBELLE = p.ATC_IRIS
									                                AND   d.ID_SPECIALITE = p.ID_SPECIALITE
                                                  AND   q.ID_DICOT_ATC_IRIS IN ( SELECT          q.ID_DICOT_ATC_IRIS
                                                                                 FROM            DICOT_ATC_IRIS q
                                                                                 CONNECT BY PRIOR q.ID_DICOT_ATC_IRIS = q.DIC_ID_DICOT_ATC_IRIS
                                                                                 START WITH       q.ID_DICOT_ATC_IRIS IN (' || GetCipsWithLivret_txt.Terme || ')))
                    AND    e.id_specialite           = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
             --ML : Projet Nouveaux et Supprimés-13/05/2004
                     AND    e.codedispo NOT IN ('||Supp||')
                    AND    e.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION
                 --   AND    h.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION
                 --   AND    UPPER(h.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    f.DATEEVENEMENT      = ( SELECT MAX(g.DATEEVENEMENT)
                                                    FROM   SPEEVTPRESENTATION g
                                                    WHERE  g.ID_SPEPRESENTATION = f.ID_SPEPRESENTATION
                                                      AND  UPPER(g.EVENEMENT) LIKE ''%REMB%'')
                    AND    UPPER(f.EVENEMENT) LIKE ''%REMB%''
                    AND    i.ID_SPEPRESENTATION = e.ID_SPEPRESENTATION
                    AND    i.IDORGANISME        = ' || GetCipsWithLivret_txt.Id_hop || '
                  ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  EVENEMENT, DENOMCIP';
                END IF;
             --Tri par nom
            ELSE
               IF Banque = 'O' THEN
                 OPEN GetCipsWithLivret_txt.RefSPEPRESENTATION FOR
                 'Select   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                           e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                           e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                           e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                           e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                           e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                           e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,
--                           e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                           e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                           d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                           g.IDORGANISME  ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL,
                           DECODE(g.IDORGANISME,NULL,'||'''N'''||','||'''A'''||') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, LIVRETVIDAL g
                  WHERE    e.id_specialite IN ( SELECT DISTINCT  d.id_specialite
                                                FROM             SPECIALITE d, SPEPHARMACODYNAMIE p,
												                        DICOT_ATC_IRIS q
	                                              WHERE   q.LIBELLE = p.ATC_IRIS
									                                AND   d.ID_SPECIALITE = p.ID_SPECIALITE
                                                  AND   q.ID_DICOT_ATC_IRIS IN ( SELECT          q.ID_DICOT_ATC_IRIS
                                                                                 FROM            DICOT_ATC_IRIS q
                                                                                 CONNECT BY PRIOR q.ID_DICOT_ATC_IRIS = q.DIC_ID_DICOT_ATC_IRIS
                                                                                 START WITH       q.ID_DICOT_ATC_IRIS IN (' || GetCipsWithLivret_txt.Terme || ')))
                    AND    e.id_specialite               = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
             --ML : Projet Nouveaux et Supprimés-13/05/2004
                    AND    e.codedispo NOT IN ('||Supp||')
                 --   AND    f.ID_SPEPRESENTATION (+)      = e.ID_SPEPRESENTATION
                 --   AND    UPPER(f.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    g.ID_SPEPRESENTATION (+)= e.ID_SPEPRESENTATION
                    AND    g.IDORGANISME (+)       = ' || GetCipsWithLivret_txt.Id_hop || '
                  ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  DenomCip';
                ELSE
                  OPEN GetCipsWithLivret_txt.RefSPEPRESENTATION FOR
                  'Select   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                           e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                           e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                           e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                           e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                           e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                           e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,
--                           e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E)  PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                           e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                           d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                           g.IDORGANISME  ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL, ''A'' FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, LIVRETVIDAL g
                  WHERE    e.id_specialite IN ( SELECT DISTINCT  d.id_specialite
                                                FROM             SPECIALITE d, SPEPHARMACODYNAMIE p,
												                        DICOT_ATC_IRIS q
	                                              WHERE   q.LIBELLE = p.ATC_IRIS
									                                AND   d.ID_SPECIALITE = p.ID_SPECIALITE
                                                  AND   q.ID_DICOT_ATC_IRIS IN ( SELECT          q.ID_DICOT_ATC_IRIS
                                                                                 FROM            DICOT_ATC_IRIS q
                                                                                 CONNECT BY PRIOR q.ID_DICOT_ATC_IRIS = q.DIC_ID_DICOT_ATC_IRIS
                                                                                 START WITH       q.ID_DICOT_ATC_IRIS IN (' || GetCipsWithLivret_txt.Terme || ')))
                    AND    e.id_specialite               = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
             --ML : Projet Nouveaux et Supprimés-13/05/2004
                     AND    e.codedispo NOT IN ('||Supp||')
                 --   AND    f.ID_SPEPRESENTATION (+)      = e.ID_SPEPRESENTATION
                 --   AND    UPPER(f.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    g.ID_SPEPRESENTATION = e.ID_SPEPRESENTATION
                    AND    g.IDORGANISME        = ' || GetCipsWithLivret_txt.Id_hop || '
                  ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  DenomCip';
               END IF;
--////////////////////////////////////////////////////////----Fin Classes ATC----/////////////////////////////////////////////////
             END IF;
              END IF;
--             END IF;
--           END IF;
-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 27/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCipsWithLivret_txt%');
--         COMMIT;
-------------------------------------------------------------
           RETURN 1;
           EXCEPTION
             WHEN OTHERS THEN
               RETURN SQLCODE;
           END GetCipsWithLivret_txt;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCipsWithLivret_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- Permet d'obtenir les CIP rattachés aux identifiants des substances
  -- ou aux substances filles
  -- La recherche se fera selon la demande :
  --          * dans la Banque VIDAL
  --          * dans le livret VIDAL de l'hôpital concerné
  --          * dans le livret HOPITAL de l'hôpital concerné
  --    OU    * seulement dans les livrets de l'organisme concerné
  -- Résultats restitués selon différents ordres.
  -- --------------------------------------------------------------
  -- --------------------------------------------------------------
           PROCEDURE GetCipsWithLivret_id ( Terme               IN  NUMBER,
                                         Typ                 IN  INTEGER,
                                         Domain              IN  INTEGER,
                                         ordre               IN  INTEGER  DEFAULT 1,
                                         Banque              IN  VARCHAR2,
                                         Id_hop              IN  INTEGER,
                                         RefSPEPRESENTATION  OUT Spepresentation_Pubres.SPEPRESENTATIONCurRef,
                                         Ret                 OUT NUMBER)
           IS
           BEGIN
                 Ret := GetCipsWithLivret_id ( Terme, Typ, Domain, ordre, Banque, Id_hop, RefSPEPRESENTATION);
           END GetCipsWithLivret_id;
           FUNCTION GetCipsWithLivret_id  ( Terme               IN  NUMBER,
                                         Typ                 IN  INTEGER,
                                         Domain              IN  INTEGER,
                                         ordre               IN  INTEGER  DEFAULT 1,
                                         Banque              IN  VARCHAR2,
                                         Id_hop              IN  INTEGER,
                                         RefSPEPRESENTATION  OUT Spepresentation_Pubres.SPEPRESENTATIONCurRef)
                                       RETURN NUMBER IS
         domaine VARCHAR2(50);
		     Req	   VARCHAR2(30000);
         Supp    VARCHAR2(10);

		 BEGIN
		   domaine := AVIDAL_PUBRES.DecodeDomain(GetCipsWithLivret_id.Domain);
       Supp := '4,5';
--*********************************************Recherche par l'identifiant d'une spécilité******************************************************
--**********************************************************************************************************************************************
           IF typ = 1 THEN
             --Tri par prix
             IF ordre = 2 THEN
               --Recherche dans la banque Vidal et dans lee medicaments admis
               -- (on passe un number donc jointure impossible sur le livret Hop)
               IF Banque = 'O' THEN
               OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                 -- recherche des CIP dans la banque VIDAL
                 'SELECT   /*+ RULE */  b.ID_SPEPRESENTATION, b.ID_SPECIALITE, b.CIP,
                          b.UCD, b.AMMEUROPE,b.LIEUDISPO,
                          b.CONDDISPO, b.LISTE, b.DUREEPRESCRIPTION,
                          b.PRESCRIPTIONINITIALE, b.PRESCRIPTIONRESERVEE,
                          b.RENOUVELRESERVE, b.MEDPARTIC, b.NATURESURVEILLANCE,
                          b.CODEREFERANTGENERIQUE, b.REMPLACE, b.SOURCEREMPLACE,
                          b.DATESOURCEREMPLACE, b.REMPLACEPAR, b.SOURCEREMPLACEPAR,
--                          b.DATESOURCEREMPLACEPAR, b.PRIXPRODHTF, DECODE(d.PRIX_TTC_F,NULL,b.PRIXPUBLICTTCF,d.PRIX_TTC_F) PRIXPUBLICTTCF,
--                          b.PRIXPRODHTE, DECODE(d.PRIX_TTC_E,NULL,b.PRIXPUBLICTTCE,d.PRIX_TTC_E) PRIXPUBLICTTCE, b.TVA, b.DCREAT, b.DMODIF,
                          b.DATESOURCEREMPLACEPAR, b.PRIXPRODHTF, DECODE(d.idorganisme, NULL, b.PRIXPUBLICTTCF, d.PRIX_TTC_F) PRIXPUBLICTTCF,
                          b.PRIXPRODHTE, DECODE(d.idorganisme, NULL, b.PRIXPUBLICTTCE, d.PRIX_TTC_E) PRIXPUBLICTTCE, b.TVA, b.DCREAT, b.DMODIF,
                          b.DREVIS, b.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                          a.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                          d.IDORGANISME, d.PRIX_TTC_F, d.PRIX_TTC_E, d.DISPO, d.COMMENTAIRE,
                          '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, d.CODHOPITAL,
                          DECODE(d.IDORGANISME,NULL,''N'',''A'') FLAG_CAN, b.DISPONIBILITE, b.NBprise, b.PriseUnitaire, b.codedispo codedispo
                 FROM     SPEPRESENTATION b, SPECIALITE a, LIVRETVIDAL d
                 WHERE    a.ID_SPECIALITE           = '||GetCipsWithLivret_id.Terme||'
                   AND    b.ID_SPECIALITE           = a.ID_SPECIALITE
				           AND    a.IDTYPESPE IN ('||domaine||')
                 --  AND    c.ID_SPEPRESENTATION (+)  = b.ID_SPEPRESENTATION
                 --  AND    UPPER(c.TYPECONDPRIMAIRE (+)) = ''DENOMCIP''
                   AND    d.ID_SPEPRESENTATION (+)= b.ID_SPEPRESENTATION
                   AND    d.IDORGANISME (+)       = '||GetCipsWithLivret_id.Id_hop||'
                 ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  PRIXPUBLICTTCE, DENOMCIP';
               ELSE
               --Recherche dans le livret uniquement
               OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                 -- recherche des CIP admis dans le livret VIDAL
                 'SELECT   /*+ RULE */  b.ID_SPEPRESENTATION, b.ID_SPECIALITE, b.CIP,
                          b.UCD, b.AMMEUROPE, b.LIEUDISPO,
                          b.CONDDISPO, b.LISTE, b.DUREEPRESCRIPTION,
                          b.PRESCRIPTIONINITIALE, b.PRESCRIPTIONRESERVEE,
                          b.RENOUVELRESERVE, b.MEDPARTIC, b.NATURESURVEILLANCE,
                          b.CODEREFERANTGENERIQUE, b.REMPLACE, b.SOURCEREMPLACE,
                          b.DATESOURCEREMPLACE, b.REMPLACEPAR, b.SOURCEREMPLACEPAR,
--                          b.DATESOURCEREMPLACEPAR, b.PRIXPRODHTF, DECODE(d.PRIX_TTC_F,NULL,b.PRIXPUBLICTTCF,d.PRIX_TTC_F) PRIXPUBLICTTCF,
--                          b.PRIXPRODHTE, DECODE(d.PRIX_TTC_E,NULL,b.PRIXPUBLICTTCE,d.PRIX_TTC_E) PRIXPUBLICTTCE, b.TVA, b.DCREAT, b.DMODIF,
                          b.DATESOURCEREMPLACEPAR, b.PRIXPRODHTF, DECODE(d.idorganisme, NULL, b.PRIXPUBLICTTCF, d.PRIX_TTC_F) PRIXPUBLICTTCF,
                          b.PRIXPRODHTE, DECODE(d.idorganisme, NULL, b.PRIXPUBLICTTCE, d.PRIX_TTC_E) PRIXPUBLICTTCE, b.TVA, b.DCREAT, b.DMODIF,
                          b.DREVIS, b.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                          a.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                          d.IDORGANISME, d.PRIX_TTC_F, d.PRIX_TTC_E, d.DISPO, d.COMMENTAIRE,
                          '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, d.CODHOPITAL, ''A'' FLAG_CAN, b.DISPONIBILITE, b.NBprise, b.PriseUnitaire, b.codedispo codedispo
                 FROM     SPEPRESENTATION b, SPECIALITE a, LIVRETVIDAL d
                 WHERE    a.ID_SPECIALITE           = '||GetCipsWithLivret_id.Terme||'
                   AND    b.ID_SPECIALITE           = a.ID_SPECIALITE
				           AND    a.IDTYPESPE IN ('||domaine||')
                --   AND    c.ID_SPEPRESENTATION (+)  = b.ID_SPEPRESENTATION
                --   AND    UPPER(c.TYPECONDPRIMAIRE (+)) = ''DENOMCIP''
                   AND    d.ID_SPEPRESENTATION = b.ID_SPEPRESENTATION
                   AND    d.IDORGANISME        = '||GetCipsWithLivret_id.Id_hop||'
                 ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  PRIXPUBLICTTCE, DENOMCIP';
               END IF;
             --Tri par evenement
             ELSIF ordre = 3 THEN
               IF Banque = 'O' THEN
               OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                 -- recherche des CIP dans la banque VIDAL
                 'SELECT   /*+ RULE */  b.ID_SPEPRESENTATION, b.ID_SPECIALITE, b.CIP,
                          b.UCD, b.AMMEUROPE, b.LIEUDISPO,
                          b.CONDDISPO, b.LISTE, b.DUREEPRESCRIPTION,
                          b.PRESCRIPTIONINITIALE, b.PRESCRIPTIONRESERVEE,
                          b.RENOUVELRESERVE, b.MEDPARTIC, b.NATURESURVEILLANCE,
                          b.CODEREFERANTGENERIQUE, b.REMPLACE, b.SOURCEREMPLACE,
                          b.DATESOURCEREMPLACE, b.REMPLACEPAR, b.SOURCEREMPLACEPAR,
--                          b.DATESOURCEREMPLACEPAR, b.PRIXPRODHTF, DECODE(d.PRIX_TTC_F,NULL,b.PRIXPUBLICTTCF,d.PRIX_TTC_F) PRIXPUBLICTTCF,
--                          b.PRIXPRODHTE, DECODE(d.PRIX_TTC_E,NULL,b.PRIXPUBLICTTCE,d.PRIX_TTC_E) PRIXPUBLICTTCE, b.TVA, b.DCREAT, b.DMODIF,
                          b.DATESOURCEREMPLACEPAR, b.PRIXPRODHTF, DECODE(d.idorganisme, NULL, b.PRIXPUBLICTTCF, d.PRIX_TTC_F) PRIXPUBLICTTCF,
                          b.PRIXPRODHTE, DECODE(d.idorganisme, NULL, b.PRIXPUBLICTTCE, d.PRIX_TTC_E) PRIXPUBLICTTCE, b.TVA, b.DCREAT, b.DMODIF,
                          b.DREVIS, b.CIPREFERANT, e.EVENEMENT, e.DATEEVENEMENT,
                          a.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                          d.IDORGANISME, d.PRIX_TTC_F, d.PRIX_TTC_E, d.DISPO, d.COMMENTAIRE,
                          '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, d.CODHOPITAL,
                          DECODE(d.IDORGANISME,NULL,''N'',''A'') FLAG_CAN, b.DISPONIBILITE, b.NBprise, b.PriseUnitaire, b.codedispo codedispo
                 FROM     SPEPRESENTATION b, SPECIALITE a, LIVRETVIDAL d, SPEEVTPRESENTATION e
                 WHERE    a.ID_SPECIALITE               = '||GetCipsWithLivret_id.Terme||'
                   AND    b.ID_SPECIALITE           = a.ID_SPECIALITE
				           AND    a.IDTYPESPE IN ('||domaine||')
                --   AND    c.ID_SPEPRESENTATION (+)  = b.ID_SPEPRESENTATION
                --   AND    UPPER(c.TYPECONDPRIMAIRE (+)) = ''DENOMCIP''
                   AND    d.ID_SPEPRESENTATION (+)= b.ID_SPEPRESENTATION
                   AND    d.IDORGANISME (+)       = '||GetCipsWithLivret_id.Id_hop||'
                   AND    e.ID_SPEPRESENTATION          = b.ID_SPEPRESENTATION
                   AND    e.DATEEVENEMENT = (SELECT MAX(f.DATEEVENEMENT)
                                                 FROM   SPEEVTPRESENTATION f
                                                 WHERE  f.ID_SPEPRESENTATION = e.ID_SPEPRESENTATION
                                                   AND  UPPER(f.EVENEMENT) LIKE ''%REMB%'')
				   AND    upper(e.EVENEMENT) LIKE ''%REMB%''
                 ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  Evenement, DENOMCIP';
               ELSE
               --Recherche dans le livret uniquement
               OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                 -- recherche des CIP admis dans le livret VIDAL
                ' SELECT   /*+ RULE */  b.ID_SPEPRESENTATION, b.ID_SPECIALITE, b.CIP,
                          b.UCD, b.AMMEUROPE,  b.LIEUDISPO,
                          b.CONDDISPO, b.LISTE, b.DUREEPRESCRIPTION,
                          b.PRESCRIPTIONINITIALE, b.PRESCRIPTIONRESERVEE,
                          b.RENOUVELRESERVE, b.MEDPARTIC, b.NATURESURVEILLANCE,
                          b.CODEREFERANTGENERIQUE, b.REMPLACE, b.SOURCEREMPLACE,
                          b.DATESOURCEREMPLACE, b.REMPLACEPAR, b.SOURCEREMPLACEPAR,
--                          b.DATESOURCEREMPLACEPAR, b.PRIXPRODHTF, DECODE(d.PRIX_TTC_F,NULL,b.PRIXPUBLICTTCF,d.PRIX_TTC_F) PRIXPUBLICTTCF,
--                          b.PRIXPRODHTE, DECODE(d.PRIX_TTC_E,NULL,b.PRIXPUBLICTTCE,d.PRIX_TTC_E) PRIXPUBLICTTCE, b.TVA, b.DCREAT, b.DMODIF,
                          b.DATESOURCEREMPLACEPAR, b.PRIXPRODHTF, DECODE(d.idorganisme, NULL, b.PRIXPUBLICTTCF, d.PRIX_TTC_F) PRIXPUBLICTTCF,
                          b.PRIXPRODHTE, DECODE(d.idorganisme, NULL, b.PRIXPUBLICTTCE, d.PRIX_TTC_E) PRIXPUBLICTTCE, b.TVA, b.DCREAT, b.DMODIF,
                          b.DREVIS, b.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                          a.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                          d.IDORGANISME, d.PRIX_TTC_F, d.PRIX_TTC_E, d.DISPO, d.COMMENTAIRE,
                          '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, d.CODHOPITAL, ''A'' FLAG_CAN, b.DISPONIBILITE, b.NBprise, b.PriseUnitaire, b.codedispo
                 FROM     SPEPRESENTATION b, SPECIALITE a, LIVRETVIDAL d, SPEEVTPRESENTATION e
                 WHERE    a.ID_SPECIALITE           = '||GetCipsWithLivret_id.Terme||'
                   AND    b.ID_SPECIALITE           = a.ID_SPECIALITE
				           AND    a.IDTYPESPE IN ('||domaine||')
               --    AND    c.ID_SPEPRESENTATION (+)  = b.ID_SPEPRESENTATION
               --    AND    UPPER(c.TYPECONDPRIMAIRE (+)) = ''DENOMCIP''
                   AND    d.ID_SPEPRESENTATION = b.ID_SPEPRESENTATION
                   AND    d.IDORGANISME        = '||GetCipsWithLivret_id.Id_hop||'
                   AND    e.ID_SPEPRESENTATION = b.ID_SPEPRESENTATION
                   AND    e.DATEEVENEMENT      = (SELECT MAX(f.DATEEVENEMENT)
                                                 FROM   SPEEVTPRESENTATION f
                                                 WHERE  f.ID_SPEPRESENTATION = e.ID_SPEPRESENTATION
                                                   AND  UPPER(f.EVENEMENT) LIKE ''%REMB%'')
				   AND    upper(e.EVENEMENT) LIKE ''%REMB%''
                 ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  Evenement, DENOMCIP';
               END IF;
             --Tri par nom
             ELSE
               --Recherche dans la banque Vidal et dans le livret
               IF Banque = 'O' THEN
               OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                 -- recherche des CIP dans la banque VIDAL
                 'SELECT   /*+ RULE */  b.ID_SPEPRESENTATION, b.ID_SPECIALITE, b.CIP,
                          b.UCD, b.AMMEUROPE, b.LIEUDISPO,
                          b.CONDDISPO, b.LISTE, b.DUREEPRESCRIPTION,
                          b.PRESCRIPTIONINITIALE, b.PRESCRIPTIONRESERVEE,
                          b.RENOUVELRESERVE, b.MEDPARTIC, b.NATURESURVEILLANCE,
                          b.CODEREFERANTGENERIQUE, b.REMPLACE, b.SOURCEREMPLACE,
                          b.DATESOURCEREMPLACE, b.REMPLACEPAR, b.SOURCEREMPLACEPAR,
--                          b.DATESOURCEREMPLACEPAR, b.PRIXPRODHTF, DECODE(d.PRIX_TTC_F,NULL,b.PRIXPUBLICTTCF,d.PRIX_TTC_F) PRIXPUBLICTTCF,
--                          b.PRIXPRODHTE, DECODE(d.PRIX_TTC_E,NULL,b.PRIXPUBLICTTCE,d.PRIX_TTC_E) PRIXPUBLICTTCE, b.TVA, b.DCREAT, b.DMODIF,
                          b.DATESOURCEREMPLACEPAR, b.PRIXPRODHTF, DECODE(d.idorganisme, NULL, b.PRIXPUBLICTTCF, d.PRIX_TTC_F) PRIXPUBLICTTCF,
                          b.PRIXPRODHTE, DECODE(d.idorganisme, NULL, b.PRIXPUBLICTTCE, d.PRIX_TTC_E) PRIXPUBLICTTCE, b.TVA, b.DCREAT, b.DMODIF,
                          b.DREVIS, b.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                          a.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                          d.IDORGANISME, d.PRIX_TTC_F, d.PRIX_TTC_E, d.DISPO, d.COMMENTAIRE,
                          '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, d.CODHOPITAL,
                          DECODE(d.IDORGANISME,NULL,''N'',''A'') FLAG_CAN, b.DISPONIBILITE, b.NBprise, b.PriseUnitaire, b.codedispo
                 FROM     SPEPRESENTATION b, SPECIALITE a, LIVRETVIDAL d
                 WHERE    a.ID_SPECIALITE           = '||GetCipsWithLivret_id.Terme||'
                   AND    b.ID_SPECIALITE           = a.ID_SPECIALITE
				           AND    a.IDTYPESPE IN ('||domaine||')
                 --  AND    c.ID_SPEPRESENTATION (+)  = b.ID_SPEPRESENTATION
                 --  AND    UPPER(c.TYPECONDPRIMAIRE (+)) = ''DENOMCIP''
                   AND    d.ID_SPEPRESENTATION (+)= b.ID_SPEPRESENTATION
                   AND    d.IDORGANISME (+)       = '||GetCipsWithLivret_id.Id_hop||'
                 ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  DenomCip';
               ELSE
               --Recherche dans le livret uniquement
               OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                 -- recherche des CIP admis dans le livret VIDAL
                 'SELECT   /*+ RULE */  b.ID_SPEPRESENTATION, b.ID_SPECIALITE, b.CIP,
                          b.UCD, b.AMMEUROPE, b.LIEUDISPO,
                          b.CONDDISPO, b.LISTE, b.DUREEPRESCRIPTION,
                          b.PRESCRIPTIONINITIALE, b.PRESCRIPTIONRESERVEE,
                          b.RENOUVELRESERVE, b.MEDPARTIC, b.NATURESURVEILLANCE,
                          b.CODEREFERANTGENERIQUE, b.REMPLACE, b.SOURCEREMPLACE,
                          b.DATESOURCEREMPLACE, b.REMPLACEPAR, b.SOURCEREMPLACEPAR,
--                          b.DATESOURCEREMPLACEPAR, b.PRIXPRODHTF, DECODE(d.PRIX_TTC_F,NULL,b.PRIXPUBLICTTCF,d.PRIX_TTC_F) PRIXPUBLICTTCF,
--                          b.PRIXPRODHTE,DECODE(d.PRIX_TTC_E,NULL,b.PRIXPUBLICTTCE,d.PRIX_TTC_E) PRIXPUBLICTTCE, b.TVA, b.DCREAT, b.DMODIF,
                          b.DATESOURCEREMPLACEPAR, b.PRIXPRODHTF, DECODE(d.idorganisme, NULL, b.PRIXPUBLICTTCF, d.PRIX_TTC_F) PRIXPUBLICTTCF,
                          b.PRIXPRODHTE, DECODE(d.idorganisme, NULL, b.PRIXPUBLICTTCE, d.PRIX_TTC_E) PRIXPUBLICTTCE, b.TVA, b.DCREAT, b.DMODIF,
                          b.DREVIS, b.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                          a.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                          d.IDORGANISME, d.PRIX_TTC_F, d.PRIX_TTC_E, d.DISPO, d.COMMENTAIRE,
                          '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, d.CODHOPITAL, ''A'' FLAG_CAN, b.DISPONIBILITE, b.NBprise, b.PriseUnitaire, b.codedispo
                 FROM     SPEPRESENTATION b, SPECIALITE a, LIVRETVIDAL d
                 WHERE    a.ID_SPECIALITE           = '||GetCipsWithLivret_id.Terme||'
                   AND    b.ID_SPECIALITE           = a.ID_SPECIALITE
				           AND    a.IDTYPESPE IN ('||domaine||')
                 --  AND    c.ID_SPEPRESENTATION (+)  = b.ID_SPEPRESENTATION
                 --  AND    UPPER(c.TYPECONDPRIMAIRE (+)) = ''DENOMCIP''
                   AND    d.ID_SPEPRESENTATION = b.ID_SPEPRESENTATION
                   AND    d.IDORGANISME        = '||GetCipsWithLivret_id.Id_hop||'
                 ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  DenomCip';
               END IF;
             END IF;

--************************************************Recherche par l'identifiant d'une substance**************************************************
--**********************************************************************************************************************************************

           ELSIF typ = 2 or typ = 25 or typ = 27 THEN
             --Tri par prix
             IF ordre = 2 THEN
               --Recherche dans la banque et dans le livret
               IF Banque = 'O' THEN
                    -- recherche des CIP dans la banque VIDAL

					 Req := 'SELECT * FROM ( SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                              e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                              e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                              e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                              e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                              e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                              e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
                              e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(f.idorganisme, NULL, e.PRIXPUBLICTTCF, f.PRIX_TTC_F) PRIXPUBLICTTCF,
                              e.PRIXPRODHTE, DECODE(f.idorganisme, NULL, e.PRIXPUBLICTTCE, f.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                              e.DREVIS, e.CIPREFERANT,'''' EVENEMENT, '''' DATEEVENEMENT,
                              d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                              f.IDORGANISME, f.PRIX_TTC_F, f.PRIX_TTC_E, f.DISPO, f.COMMENTAIRE,
                              '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, f.CODHOPITAL,
                              DECODE(f.IDORGANISME,NULL,''N'',''A'') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                     FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, LIVRETVIDAL f
                     WHERE    b.DENOMSUB IN ( SELECT LIBELLE
                                              FROM   T_SUB
                                              WHERE  ID_T_SUB = '||GetCipsWithLivret_id.Terme||'
                                            )
                       AND    c.ID_SPECOMPO                 = b.ID_SPECOMPO';

					  IF typ = 25 THEN
					  	 Req:= Req || ' AND b.bconstactif = ''1''';
					  ELSIF typ = 27 THEN
					  	 Req:= Req || ' AND b.bconstactif = ''0''';
					  END IF;

                     Req:= Req || ' AND    d.ID_SPECIALITE               = c.ID_SPECIALITE
                       AND    e.ID_SPECIALITE               = d.ID_SPECIALITE
					             AND    d.IDTYPESPE IN ('||domaine||')
             --ML : Projet Nouveaux et Supprimés-13/05/2004
                        AND    e.codedispo NOT IN ('||Supp||')
                       AND    f.ID_SPEPRESENTATION (+)         = e.ID_SPEPRESENTATION
                       AND    f.IDORGANISME (+)                = '||GetCipsWithLivret_id.Id_hop||'

                    UNION
                     SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                              e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                              e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                              e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                              e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                              e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                              e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
                              e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(f.idorganisme, NULL, e.PRIXPUBLICTTCF, f.PRIX_TTC_F) PRIXPUBLICTTCF,
                              e.PRIXPRODHTE, DECODE(f.idorganisme, NULL, e.PRIXPUBLICTTCE, f.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                              e.DREVIS, e.CIPREFERANT,'''' EVENEMENT, '''' DATEEVENEMENT,
                              d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                              f.IDORGANISME, f.PRIX_TTC_F, f.PRIX_TTC_E, f.DISPO, f.COMMENTAIRE,
                              '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, f.CODHOPITAL,
                              DECODE(f.IDORGANISME,NULL,''N'',''A'') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                     FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, LIVRETVIDAL f
                     WHERE    b.DENOMSUB IN ( SELECT LIBELLE
                                              FROM   T_SUB
                                              WHERE  ID_T_SUB IN ( SELECT DISTINCT  g.ID_T_SUB_F
                                                                   FROM             COUPLETERMETERME g
                                                                   CONNECT BY PRIOR g.ID_T_SUB_F = g.ID_T_SUB_P
                                                                   START WITH       g.ID_T_SUB_P = '||GetCipsWithLivret_id.Terme||'
                                                                 )
                                            )
                       AND    c.ID_SPECOMPO             = b.ID_SPECOMPO';

                      IF typ = 25 THEN
					  	 Req:= Req || ' AND b.bconstactif = ''1''';
					  ELSIF typ = 27 THEN
					  	 Req:= Req || ' AND b.bconstactif = ''0''';
					  END IF;

					  Req:=  Req || ' AND    d.ID_SPECIALITE           = c.ID_SPECIALITE
                       AND    e.ID_SPECIALITE           = d.ID_SPECIALITE
					             AND    d.IDTYPESPE IN ('||domaine||')
             --ML : Projet Nouveaux et Supprimés-13/05/2004
                        AND    e.codedispo NOT IN ('||Supp||')
                       AND    f.ID_SPEPRESENTATION (+)     = e.ID_SPEPRESENTATION
                       AND    f.IDORGANISME (+)            = '||GetCipsWithLivret_id.Id_hop||'
                --       AND    h.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION
                --       AND    UPPER(h.TYPECONDPRIMAIRE (+)) = ''DENOMCIP''
                  UNION
                     -- recherche des CIP dans le livret HOPITAL
                     SELECT   b.ID_SPEPRESENTATIONHOP, 0 ID_SPECIALITE, b.CIP,
                              b.UCD, '''' AMMEUROPE,  '''' LIEUDISPO,
                              '''' CONDDISPO , '''' LISTE, '''' DUREEPRESCRIPTION,
                              '''' PRESCRIPTIONINITIALE, '''' PRESCRIPTIONRESERVEE,
                              '''' RENOUVELRESERVE, '''' MEDPARTIC, '''' NATURESURVEILLANCE,
                              '''' CODEREFERANTGENERIQUE, '''' REMPLACE, '''' SOURCEREMPLACE,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACE,
                              '''' REMPLACEPAR, '''' SOURCEREMPLACEPAR,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACEPAR,
                              0 PRIXPRODHTF, a.PRIX_TTC_F PRIXPUBLICTTCF, 0 PRIXPRODHTE, a.PRIX_TTC_E PRIXPUBLICTTCE, '''' TVA,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DCREAT,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DMODIF,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DREVIS,
                              '''' CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT, b.NOM DenomCip,
                              a.IDORGANISME, a.PRIX_TTC_F, a.PRIX_TTC_E, a.DISPO, a.COMMENTAIRE,
                              b.PRESENTATION, b.FORME, b.DOSAGE, b.LABO, a.CODHOPITAL, ''C'' FLAG_CAN, '''' DISPONIBILITE, 0 NBprise, '''' PriseUnitaire, 10 codedispo
                     FROM     SPEPRESENTATIONHOP b, LIVRETHOP a, COMPOHOP c, T_SUBHOP d
                     WHERE    d.ID_T_SUBHOP = '||GetCipsWithLivret_id.Terme||'
                       AND    a.ID_SPEPRESENTATIONHOP = b.ID_SPEPRESENTATIONHOP
                       AND    a.IDORGANISME           = b.IDORGANISME
                       AND    a.IDORGANISME           = '||GetCipsWithLivret_id.Id_hop||'
                       AND    c.IDORGANISME           = b.IDORGANISME
                       AND    c.ID_SPEPRESENTATIONHOP = b.ID_SPEPRESENTATIONHOP
                       AND    d.ID_T_SUBHOP           = c.ID_T_SUBHOP
                       AND    d.IDORGANISME           = c.IDORGANISME
                  ) ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  PRIXPUBLICTTCE, DENOMCIP';


					  OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR Req;



                 ELSE
                     -- recherche des CIP dans le livret VIDAL
                     Req := 'SELECT * FROM ( SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                              e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                              e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                              e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                              e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                              e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                              e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
                              e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, f.PRIX_TTC_F PRIXPUBLICTTCF,
                              e.PRIXPRODHTE, f.PRIX_TTC_E PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                              e.DREVIS, e.CIPREFERANT,'''' EVENEMENT, '''' DATEEVENEMENT,
                              d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                              f.IDORGANISME, f.PRIX_TTC_F, f.PRIX_TTC_E, f.DISPO, f.COMMENTAIRE,
                              '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, f.CODHOPITAL, ''A'' FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                     FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, LIVRETVIDAL f
                     WHERE    b.DENOMSUB IN ( SELECT LIBELLE
                                              FROM   T_SUB
                                              WHERE  ID_T_SUB = '||GetCipsWithLivret_id.Terme||'
                                            )
                       AND    c.ID_SPECOMPO                 = b.ID_SPECOMPO';

					   IF typ = 25 THEN
					   	  Req:= Req ||' AND b.bconstactif=''1''';
					   ELSIF typ = 27 THEN
					   	  Req:= Req ||' AND b.bconstactif=''0''';
					   END IF;


                       Req:= Req ||' AND    d.ID_SPECIALITE               = c.ID_SPECIALITE
                       AND    e.ID_SPECIALITE               = d.ID_SPECIALITE
					             AND    d.IDTYPESPE IN ('||domaine||')
             --ML : Projet Nouveaux et Supprimés-13/05/2004
                        AND    e.codedispo NOT IN ('||Supp||')
                       AND    f.ID_SPEPRESENTATION          = e.ID_SPEPRESENTATION
                       AND    f.IDORGANISME                 = '||GetCipsWithLivret_id.Id_hop||'
                    UNION
                     SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                              e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                              e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                              e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                              e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                              e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                              e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
                              e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, f.PRIX_TTC_F PRIXPUBLICTTCF,
                              e.PRIXPRODHTE, f.PRIX_TTC_E PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                              e.DREVIS, e.CIPREFERANT,'''' EVENEMENT, '''' DATEEVENEMENT,
                              d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                              f.IDORGANISME, f.PRIX_TTC_F, f.PRIX_TTC_E, f.DISPO, f.COMMENTAIRE,
                              '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, f.CODHOPITAL, ''A'' FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                     FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, LIVRETVIDAL f
                     WHERE    b.DENOMSUB IN ( SELECT LIBELLE
                                              FROM   T_SUB
                                              WHERE  ID_T_SUB IN ( SELECT DISTINCT  g.ID_T_SUB_F
                                                                   FROM             COUPLETERMETERME g
                                                                   CONNECT BY PRIOR g.ID_T_SUB_F = g.ID_T_SUB_P
                                                                   START WITH       g.ID_T_SUB_P = '||GetCipsWithLivret_id.Terme||'
                                                                 )
                                            )
                       AND    c.ID_SPECOMPO             = b.ID_SPECOMPO';

					   IF typ = 25 THEN
					   	  Req:= Req ||' AND b.bconstactif=''1''';
					   ELSIF typ = 27 THEN
					   	  Req:= Req ||' AND b.bconstactif=''0''';
					   END IF;


                       Req:= Req ||' AND    d.ID_SPECIALITE           = c.ID_SPECIALITE
                       AND    e.ID_SPECIALITE           = d.ID_SPECIALITE
					             AND    d.IDTYPESPE IN ('||domaine||')
             --ML : Projet Nouveaux et Supprimés-13/05/2004
                        AND    e.codedispo NOT IN ('||Supp||')
                       AND    f.ID_SPEPRESENTATION      = e.ID_SPEPRESENTATION
                       AND    f.IDORGANISME             = '||GetCipsWithLivret_id.Id_hop||'

                  UNION
                     -- recherche des CIP dans le livret HOPITAL
                     SELECT   b.ID_SPEPRESENTATIONHOP, 0 ID_SPECIALITE, b.CIP,
                              b.UCD, '''' AMMEUROPE, '''' LIEUDISPO,
                              '''' CONDDISPO , '''' LISTE, '''' DUREEPRESCRIPTION,
                              '''' PRESCRIPTIONINITIALE, '''' PRESCRIPTIONRESERVEE,
                              '''' RENOUVELRESERVE, '''' MEDPARTIC, '''' NATURESURVEILLANCE,
                              '''' CODEREFERANTGENERIQUE, '''' REMPLACE, '''' SOURCEREMPLACE,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACE,
                              '''' REMPLACEPAR, '''' SOURCEREMPLACEPAR,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACEPAR,
                              0 PRIXPRODHTF, a.PRIX_TTC_F PRIXPUBLICTTCF, 0 PRIXPRODHTE, a.PRIX_TTC_E PRIXPUBLICTTCE, '''' TVA,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DCREAT,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DMODIF,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DREVIS,
                              '''' CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT, b.NOM DenomCip,
                              a.IDORGANISME, a.PRIX_TTC_F, a.PRIX_TTC_E, a.DISPO, a.COMMENTAIRE,
                              b.PRESENTATION, b.FORME, b.DOSAGE, b.LABO, a.CODHOPITAL, ''C'' FLAG_CAN, '''' DISPONIBILITE, 0 NBprise, '''' PriseUnitaire, 10 codedispo
                     FROM     SPEPRESENTATIONHOP b, LIVRETHOP a, COMPOHOP c, T_SUBHOP d
                     WHERE    d.ID_T_SUBHOP = '||GetCipsWithLivret_id.Terme||'
                       AND    a.ID_SPEPRESENTATIONHOP = b.ID_SPEPRESENTATIONHOP
                       AND    a.IDORGANISME           = b.IDORGANISME
                       AND    a.IDORGANISME           = '||GetCipsWithLivret_id.Id_hop||'
                       AND    c.IDORGANISME           = b.IDORGANISME
                       AND    c.ID_SPEPRESENTATIONHOP = b.ID_SPEPRESENTATIONHOP
                       AND    d.ID_T_SUBHOP           = c.ID_T_SUBHOP
                       AND    d.IDORGANISME           = c.IDORGANISME
                   ) ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  PRIXPUBLICTTCE, DENOMCIP';

				  OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR Req;

                 END IF;
               ELSIF ordre = 3 THEN
                 IF Banque = 'O' THEN
                   --OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                     -- recherche des CIP dans la banque VIDAL
                    Req:= 'SELECT * FROM ( SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                              e.UCD, e.AMMEUROPE,  e.LIEUDISPO,
                              e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                              e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                              e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                              e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                              e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
                              e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                              e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                              e.DREVIS, e.CIPREFERANT, f.EVENEMENT, MAX(f.DATEEVENEMENT),
                              d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                              g.IDORGANISME, g.PRIX_TTC_F, g.PRIX_TTC_E, g.DISPO, g.COMMENTAIRE,
                              '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL,
                              DECODE(g.IDORGANISME,NULL,''N'',''A'') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                     FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, SPEEVTPRESENTATION f, LIVRETVIDAL g
                     WHERE    b.DENOMSUB IN ( SELECT LIBELLE
                                              FROM   T_SUB
                                              WHERE  ID_T_SUB = '||GetCipsWithLivret_id.Terme||'
                                            )
                       AND    c.ID_SPECOMPO             = b.ID_SPECOMPO';

					   IF typ = 25 THEN
					   	  Req:= Req ||' AND b.bconstactif=''1''';
					   ELSIF typ = 27 THEN
					   	  Req:= Req ||' AND b.bconstactif=''0''';
					   END IF;

                       Req:= Req ||' AND    d.ID_SPECIALITE           = c.ID_SPECIALITE
                       AND    e.ID_SPECIALITE           = d.ID_SPECIALITE
					             AND    d.IDTYPESPE IN ('||domaine||')
             --ML : Projet Nouveaux et Supprimés-13/05/2004
                        AND    e.codedispo NOT IN ('||Supp||')
                       AND    e.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION  + 0
                       AND    g.ID_SPEPRESENTATION (+)     = e.ID_SPEPRESENTATION
                       AND    g.IDORGANISME (+)            = '||GetCipsWithLivret_id.Id_hop||'
                       AND    UPPER(f.EVENEMENT) LIKE ''%REMB%''

                     GROUP BY e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                              e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                              e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                              e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                              e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                              e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                              e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
                              e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F),
                              e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E), e.TVA, e.DCREAT, e.DMODIF,
                              e.DREVIS, e.CIPREFERANT, f.EVENEMENT,
                              d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi),
                              g.IDORGANISME, g.PRIX_TTC_F, g.PRIX_TTC_E, g.DISPO, g.COMMENTAIRE,
                              '''' , '''' , '''' , '''' , '''' ,  g.CODHOPITAL, DECODE(g.IDORGANISME,NULL,''N'',''A''), e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                    UNION
                     SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                              e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                              e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                              e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                              e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                              e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                              e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
                              e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                              e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                              e.DREVIS, e.CIPREFERANT, f.EVENEMENT, MAX(f.DATEEVENEMENT),
                              d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                              g.IDORGANISME, g.PRIX_TTC_F, g.PRIX_TTC_E, g.DISPO, g.COMMENTAIRE,
                              '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL,
                              DECODE(g.IDORGANISME,NULL,''N'',''A'') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                     FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, SPEEVTPRESENTATION f, LIVRETVIDAL g
                     WHERE    b.DENOMSUB IN ( SELECT LIBELLE
                                              FROM   T_SUB
                                              WHERE  ID_T_SUB IN ( SELECT DISTINCT  i.ID_T_SUB_F
                                                                   FROM             COUPLETERMETERME i
                                                                   CONNECT BY PRIOR i.ID_T_SUB_F = i.ID_T_SUB_P
                                                                   START WITH       i.ID_T_SUB_P = '||GetCipsWithLivret_id.Terme||'
                                                                 )
                                            )
                       AND    c.ID_SPECOMPO             = b.ID_SPECOMPO';

					   IF typ = 25 THEN
					   	  Req:= Req ||' AND b.bconstactif=''1''';
					   ELSIF typ = 27 THEN
					   	  Req:= Req ||' AND b.bconstactif=''0''';
					   END IF;

					   Req := Req || ' AND d.ID_SPECIALITE           = c.ID_SPECIALITE
                       AND    e.ID_SPECIALITE           = d.ID_SPECIALITE
				               AND    d.IDTYPESPE IN ('||domaine||')
             --ML : Projet Nouveaux et Supprimés-13/05/2004
                        AND    e.codedispo NOT IN ('||Supp||')
                       AND    e.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION
                       AND    g.ID_SPEPRESENTATION (+)     = e.ID_SPEPRESENTATION
                       AND    g.IDORGANISME (+)            = '||GetCipsWithLivret_id.Id_hop||'
                       AND    UPPER(f.EVENEMENT) LIKE ''%REMB%''
                   GROUP BY   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                              e.UCD, e.AMMEUROPE,  e.LIEUDISPO,
                              e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                              e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                              e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                              e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                              e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
                              e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F),
                              e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E), e.TVA, e.DCREAT, e.DMODIF,
                              e.DREVIS, e.CIPREFERANT, f.EVENEMENT,
                              d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi),
                              g.IDORGANISME, g.PRIX_TTC_F, g.PRIX_TTC_E, g.DISPO, g.COMMENTAIRE,
                              '''' , '''' , '''' , '''' , '''' , g.CODHOPITAL, ''A'', e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                  UNION ALL
                     -- recherche des CIP dans le livret HOPITAL
                     SELECT   e.ID_SPEPRESENTATIONHOP, 0 ID_SPECIALITE, e.CIP,
                              e.UCD, '''' AMMEUROPE, '''' LIEUDISPO,
                              '''' CONDDISPO , '''' LISTE, '''' DUREEPRESCRIPTION,
                              '''' PRESCRIPTIONINITIALE, '''' PRESCRIPTIONRESERVEE,
                              '''' RENOUVELRESERVE, '''' MEDPARTIC, '''' NATURESURVEILLANCE,
                              '''' CODEREFERANTGENERIQUE, '''' REMPLACE, '''' SOURCEREMPLACE,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACE,
                              '''' REMPLACEPAR, '''' SOURCEREMPLACEPAR,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACEPAR,
                              0 PRIXPRODHTF, a.PRIX_TTC_F PRIXPUBLICTTCF, 0 PRIXPRODHTE, a.PRIX_TTC_E PRIXPUBLICTTCE, '''' TVA,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DCREAT,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DMODIF,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DREVIS,
                              '''' CIPREFERANT, '''' EVENEMENT, TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATEEVENEMENT,
                              e.NOM DenomCip, a.IDORGANISME, a.PRIX_TTC_F, a.PRIX_TTC_E, a.DISPO, a.COMMENTAIRE,
                              e.PRESENTATION, e.FORME, e.DOSAGE, e.LABO, a.CODHOPITAL, ''C'' FLAG_CAN, '''' DISPONIBILITE, 0 NBprise, '''' PriseUnitaire, 10 codedispo
                     FROM     SPEPRESENTATIONHOP e, LIVRETHOP a, COMPOHOP c, T_SUBHOP d
                     WHERE    d.ID_T_SUBHOP = '||GetCipsWithLivret_id.Terme||'
                       AND    a.ID_SPEPRESENTATIONHOP = e.ID_SPEPRESENTATIONHOP
                       AND    a.IDORGANISME           = e.IDORGANISME
                       AND    a.IDORGANISME           = '||GetCipsWithLivret_id.Id_hop||'
                       AND    c.IDORGANISME           = e.IDORGANISME
                       AND    c.ID_SPEPRESENTATIONHOP = e.ID_SPEPRESENTATIONHOP
                       AND    d.ID_T_SUBHOP           = c.ID_T_SUBHOP
                       AND    d.IDORGANISME           = c.IDORGANISME
                  ) ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  EVENEMENT, DENOMCIP';

				  OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR Req;

                 ELSE
                   --OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                     -- recherche des CIP dans le livret VIDAL
                     Req:= 'SELECT * FROM ( SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                              e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                              e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                              e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                              e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                              e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                              e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
                              e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                              e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                              e.DREVIS, e.CIPREFERANT, f.EVENEMENT, MAX(f.DATEEVENEMENT),
                              d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                              g.IDORGANISME, g.PRIX_TTC_F, g.PRIX_TTC_E, g.DISPO, g.COMMENTAIRE,
                              '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL, ''A'' FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                     FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, SPEEVTPRESENTATION f, LIVRETVIDAL g
                     WHERE    b.DENOMSUB IN ( SELECT LIBELLE
                                              FROM   T_SUB
                                              WHERE  ID_T_SUB = '||GetCipsWithLivret_id.Terme||'
                                            )
                       AND    c.ID_SPECOMPO             = b.ID_SPECOMPO';

					   IF typ = 25 THEN
					   	  Req:= Req ||' AND b.bconstactif=''1''';
					   ELSIF typ = 27 THEN
					   	  Req:= Req ||' AND b.bconstactif=''0''';
					   END IF;

                       Req:= Req||' AND    d.ID_SPECIALITE           = c.ID_SPECIALITE
                       AND    e.ID_SPECIALITE           = d.ID_SPECIALITE
					             AND    d.IDTYPESPE IN ('||domaine||')
             --ML : Projet Nouveaux et Supprimés-13/05/2004
                        AND    e.codedispo NOT IN ('||Supp||')
                       AND    e.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION + 0
                       AND    g.ID_SPEPRESENTATION      = e.ID_SPEPRESENTATION
                       AND    g.IDORGANISME             = '||GetCipsWithLivret_id.Id_hop||'
                       AND    UPPER(f.EVENEMENT) LIKE ''%REMB%''
                     GROUP BY e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                              e.UCD, e.AMMEUROPE,  e.LIEUDISPO,
                              e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                              e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                              e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                              e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                              e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
                              e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F),
                              e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E), e.TVA, e.DCREAT, e.DMODIF,
                              e.DREVIS, e.CIPREFERANT, f.EVENEMENT,
                              d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi),
                              g.IDORGANISME, g.PRIX_TTC_F, g.PRIX_TTC_E, g.DISPO, g.COMMENTAIRE,
                              '''' , '''' , '''' , '''' , '''' , g.CODHOPITAL,  ''A'', e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                    UNION
                     SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                              e.UCD, e.AMMEUROPE,  e.LIEUDISPO,
                              e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                              e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                              e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                              e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                              e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
                              e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                              e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                              e.DREVIS, e.CIPREFERANT, f.EVENEMENT, MAX(f.DATEEVENEMENT),
                              d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                              g.IDORGANISME, g.PRIX_TTC_F, g.PRIX_TTC_E, g.DISPO, g.COMMENTAIRE,
                              '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL, ''A'' FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                     FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, SPEEVTPRESENTATION f, LIVRETVIDAL g
                     WHERE    b.DENOMSUB IN ( SELECT LIBELLE
                                              FROM   T_SUB
                                              WHERE  ID_T_SUB IN ( SELECT DISTINCT  i.ID_T_SUB_F
                                                                   FROM             COUPLETERMETERME i
                                                                   CONNECT BY PRIOR i.ID_T_SUB_F = i.ID_T_SUB_P
                                                                   START WITH       i.ID_T_SUB_P = '||GetCipsWithLivret_id.Terme||'
                                                                 )
                                            )
                       AND    c.ID_SPECOMPO             = b.ID_SPECOMPO';

					   IF typ = 25 THEN
					   	  Req:= Req ||' AND b.bconstactif=''1''';
					   ELSIF typ = 27 THEN
					   	  Req:= Req ||' AND b.bconstactif=''0''';
					   END IF;

                       Req:= Req ||' AND    d.ID_SPECIALITE           = c.ID_SPECIALITE
                       AND    e.ID_SPECIALITE           = d.ID_SPECIALITE
					             AND    d.IDTYPESPE IN ('||domaine||')
                --ML : Projet Nouveaux et Supprimés-13/05/2004
                        AND    e.codedispo NOT IN ('||Supp||')
                       AND    e.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION
                       AND    g.ID_SPEPRESENTATION      = e.ID_SPEPRESENTATION
                       AND    g.IDORGANISME             = '||GetCipsWithLivret_id.Id_hop||'
                       AND    UPPER(f.EVENEMENT) LIKE ''%REMB%''
                   GROUP BY   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                              e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                              e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                              e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                              e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                              e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                              e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
                              e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F),
                              e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E), e.TVA, e.DCREAT, e.DMODIF,
                              e.DREVIS, e.CIPREFERANT, f.EVENEMENT,
                              d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi),
                              g.IDORGANISME, g.PRIX_TTC_F, g.PRIX_TTC_E, g.DISPO, g.COMMENTAIRE,
                              '''', '''', '''', '''', '''', g.CODHOPITAL,  ''A'', e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                  UNION
                     -- recherche des CIP dans le livret HOPITAL
                     SELECT   e.ID_SPEPRESENTATIONHOP, 0 ID_SPECIALITE, e.CIP,
                              e.UCD, '''' AMMEUROPE, '''' LIEUDISPO,
                              '''' CONDDISPO , '''' LISTE, '''' DUREEPRESCRIPTION,
                              '''' PRESCRIPTIONINITIALE, '''' PRESCRIPTIONRESERVEE,
                              '''' RENOUVELRESERVE, '''' MEDPARTIC, '''' NATURESURVEILLANCE,
                              '''' CODEREFERANTGENERIQUE, '''' REMPLACE, '''' SOURCEREMPLACE,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACE,
                              '''' REMPLACEPAR, '''' SOURCEREMPLACEPAR,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACEPAR,
                              0 PRIXPRODHTF, a.PRIX_TTC_F PRIXPUBLICTTCF, 0 PRIXPRODHTE, a.PRIX_TTC_E PRIXPUBLICTTCE, '''' TVA,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DCREAT,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DMODIF,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DREVIS,
                              '''' CIPREFERANT, ''EVENEMENT'' EVENEMENT, TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATEEVENEMENT,
                              e.NOM DenomCip, a.IDORGANISME, a.PRIX_TTC_F, a.PRIX_TTC_E, a.DISPO, a.COMMENTAIRE,
                              e.PRESENTATION, e.FORME, e.DOSAGE, e.LABO, a.CODHOPITAL, ''C'' FLAG_CAN, '''' DISPONIBILITE, 0 NBprise, '''' PriseUnitaire, 10 codedispo
                     FROM     SPEPRESENTATIONHOP e, LIVRETHOP a, COMPOHOP c, T_SUBHOP d
                     WHERE    d.ID_T_SUBHOP = '||GetCipsWithLivret_id.Terme||'
                       AND    a.ID_SPEPRESENTATIONHOP = e.ID_SPEPRESENTATIONHOP
                       AND    a.IDORGANISME           = e.IDORGANISME
                       AND    a.IDORGANISME           = '||GetCipsWithLivret_id.Id_hop||'
                       AND    c.IDORGANISME           = e.IDORGANISME
                       AND    c.ID_SPEPRESENTATIONHOP = e.ID_SPEPRESENTATIONHOP
                       AND    d.ID_T_SUBHOP           = c.ID_T_SUBHOP
                       AND    d.IDORGANISME           = c.IDORGANISME
                  ) ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  EVENEMENT, DENOMCIP';

				  OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR Req;

                 END IF;
               ELSE
                 IF Banque = 'O' THEN
                   --OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                     -- recherche des CIP dans la banque VIDAL
                     Req:= 'SELECT * FROM ( SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                              e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                              e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                              e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                              e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                              e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                              e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
                              e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(f.idorganisme, NULL, e.PRIXPUBLICTTCF, f.PRIX_TTC_F) PRIXPUBLICTTCF,
                              e.PRIXPRODHTE, DECODE(f.idorganisme, NULL, e.PRIXPUBLICTTCE, f.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                              e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                              d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                              f.IDORGANISME, f.PRIX_TTC_F, f.PRIX_TTC_E, f.DISPO, f.COMMENTAIRE,
                              '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, f.CODHOPITAL,
                              DECODE(f.IDORGANISME,NULL,''N'',''A'') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                     FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, LIVRETVIDAL f
                     WHERE    b.DENOMSUB IN ( SELECT LIBELLE
                                              FROM   T_SUB
                                              WHERE  ID_T_SUB = '||GetCipsWithLivret_id.Terme||'
                                            )
                       AND    c.ID_SPECOMPO             = b.ID_SPECOMPO';

					   IF typ = 25 THEN
					   	  Req:= Req ||' AND b.bconstactif=''1''';
					   ELSIF typ = 27 THEN
					   	  Req:= Req ||' AND b.bconstactif=''0''';
					   END IF;

                       Req:= Req ||' AND    d.ID_SPECIALITE           = c.ID_SPECIALITE
                       AND    e.ID_SPECIALITE           = d.ID_SPECIALITE
					             AND    d.IDTYPESPE IN ('||domaine||')
                --ML : Projet Nouveaux et Supprimés-13/05/2004
                        AND    e.codedispo NOT IN ('||Supp||')
                       AND    f.ID_SPEPRESENTATION (+)     = e.ID_SPEPRESENTATION
                       AND    f.IDORGANISME (+)            = '||GetCipsWithLivret_id.Id_hop||'

                    UNION
                     SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                              e.UCD, e.AMMEUROPE,  e.LIEUDISPO,
                              e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                              e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                              e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                              e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                              e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
                              e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(f.idorganisme, NULL, e.PRIXPUBLICTTCF, f.PRIX_TTC_F) PRIXPUBLICTTCF,
                              e.PRIXPRODHTE, DECODE(f.idorganisme, NULL, e.PRIXPUBLICTTCE, f.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                              e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                              d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                              f.IDORGANISME, f.PRIX_TTC_F, f.PRIX_TTC_E, f.DISPO, f.COMMENTAIRE,
                              '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, f.CODHOPITAL,
                              DECODE(f.IDORGANISME,NULL,''N'',''A'') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                     FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, LIVRETVIDAL f
                     WHERE    b.DENOMSUB IN ( SELECT LIBELLE
                                              FROM   T_SUB
                                              WHERE  ID_T_SUB IN ( SELECT DISTINCT  g.ID_T_SUB_F
                                                                   FROM             COUPLETERMETERME g
                                                                   CONNECT BY PRIOR g.ID_T_SUB_F = g.ID_T_SUB_P
                                                                   START WITH       g.ID_T_SUB_P = '||GetCipsWithLivret_id.Terme||'
                                                                 )
                                            )
                       AND    c.ID_SPECOMPO             = b.ID_SPECOMPO';

					   IF typ = 25 THEN
					   	  Req:= Req ||' AND b.bconstactif=''1''';
					   ELSIF typ = 27 THEN
					   	  Req:= Req ||' AND b.bconstactif=''0''';
					   END IF;

                       Req:= Req || ' AND    d.ID_SPECIALITE           = c.ID_SPECIALITE
                       AND    e.ID_SPECIALITE           = d.ID_SPECIALITE
					             AND    d.IDTYPESPE IN ('||domaine||')
                --ML : Projet Nouveaux et Supprimés-13/05/2004
                        AND    e.codedispo NOT IN ('||Supp||')
                       AND    f.ID_SPEPRESENTATION (+)     = e.ID_SPEPRESENTATION
                       AND    f.IDORGANISME (+)            = '||GetCipsWithLivret_id.Id_hop||'

                  UNION
                     -- recherche des CIP dans le livret HOPITAL
                     SELECT   b.ID_SPEPRESENTATIONHOP, 0 ID_SPECIALITE, b.CIP,
                              b.UCD, '''' AMMEUROPE,  '''' LIEUDISPO,
                              '''' CONDDISPO , '''' LISTE, '''' DUREEPRESCRIPTION,
                              '''' PRESCRIPTIONINITIALE, '''' PRESCRIPTIONRESERVEE,
                              '''' RENOUVELRESERVE, '''' MEDPARTIC, '''' NATURESURVEILLANCE,
                              '''' CODEREFERANTGENERIQUE, '''' REMPLACE, '''' SOURCEREMPLACE,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACE,
                              '''' REMPLACEPAR, '''' SOURCEREMPLACEPAR,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACEPAR,
                              0 PRIXPRODHTF, a.PRIX_TTC_F PRIXPUBLICTTCF, 0 PRIXPRODHTE, a.PRIX_TTC_E PRIXPUBLICTTCE, '''' TVA,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DCREAT,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DMODIF,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DREVIS,
                              '''' CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT, b.NOM DenomCip,
                              a.IDORGANISME, a.PRIX_TTC_F, a.PRIX_TTC_E, a.DISPO, a.COMMENTAIRE,
                              b.PRESENTATION, b.FORME, b.DOSAGE, b.LABO, a.CODHOPITAL, ''C'' FLAG_CAN, '''' DISPONIBILITE, 0 NBprise, '''' PriseUnitaire, 10 codedispo
                     FROM     SPEPRESENTATIONHOP b, LIVRETHOP a, COMPOHOP c, T_SUBHOP d
                     WHERE    d.ID_T_SUBHOP = '||GetCipsWithLivret_id.Terme||'
                       AND    a.ID_SPEPRESENTATIONHOP = b.ID_SPEPRESENTATIONHOP
                       AND    a.IDORGANISME           = b.IDORGANISME
                       AND    a.IDORGANISME           = '||GetCipsWithLivret_id.Id_hop||'
                       AND    c.IDORGANISME           = b.IDORGANISME
                       AND    c.ID_SPEPRESENTATIONHOP = b.ID_SPEPRESENTATIONHOP
                       AND    d.ID_T_SUBHOP           = c.ID_T_SUBHOP
                       AND    d.IDORGANISME           = c.IDORGANISME
                  ) ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  DenomCip';

				  OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR Req;

                 ELSE
                   --OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                     -- recherche des CIP dans le livret VIDAL
                     Req:= 'SELECT * FROM ( SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                              e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                              e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                              e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                              e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                              e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                              e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
                              e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(f.idorganisme, NULL, e.PRIXPUBLICTTCF, f.PRIX_TTC_F) PRIXPUBLICTTCF,
                              e.PRIXPRODHTE, DECODE(f.idorganisme, NULL, e.PRIXPUBLICTTCE, f.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                              e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                              d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                              f.IDORGANISME, f.PRIX_TTC_F, f.PRIX_TTC_E, f.DISPO, f.COMMENTAIRE,
                              '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, f.CODHOPITAL, ''A'' FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                     FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, LIVRETVIDAL f
                     WHERE    b.DENOMSUB IN ( SELECT LIBELLE
                                              FROM   T_SUB
                                              WHERE  ID_T_SUB = '||GetCipsWithLivret_id.Terme||'
                                            )
                       AND    c.ID_SPECOMPO             = b.ID_SPECOMPO';

					   IF typ = 25 THEN
					   	  Req:= Req ||' AND b.bconstactif=''1''';
					   ELSIF typ = 27 THEN
					   	  Req:= Req ||' AND b.bconstactif=''0''';
					   END IF;

                       Req:= Req ||' AND    d.ID_SPECIALITE           = c.ID_SPECIALITE
                       AND    e.ID_SPECIALITE           = d.ID_SPECIALITE
					             AND    d.IDTYPESPE IN ('||domaine||')
                --ML : Projet Nouveaux et Supprimés-13/05/2004
                        AND    e.codedispo NOT IN ('||Supp||')
                       AND    f.ID_SPEPRESENTATION      = e.ID_SPEPRESENTATION
                       AND    f.IDORGANISME             = '||GetCipsWithLivret_id.Id_hop||'

                    UNION
                     SELECT   e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                              e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                              e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                              e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                              e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                              e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                              e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
                              e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(f.idorganisme, NULL, e.PRIXPUBLICTTCF, f.PRIX_TTC_F) PRIXPUBLICTTCF,
                              e.PRIXPRODHTE, DECODE(f.idorganisme, NULL, e.PRIXPUBLICTTCE, f.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                              e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                              d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                              f.IDORGANISME, f.PRIX_TTC_F, f.PRIX_TTC_E, f.DISPO, f.COMMENTAIRE,
                              '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, f.CODHOPITAL, ''A'' FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                     FROM     SPEPRESENTATION e, SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, LIVRETVIDAL f
                     WHERE    b.DENOMSUB IN ( SELECT LIBELLE
                                              FROM   T_SUB
                                              WHERE  ID_T_SUB IN ( SELECT DISTINCT  g.ID_T_SUB_F
                                                                   FROM             COUPLETERMETERME g
                                                                   CONNECT BY PRIOR g.ID_T_SUB_F = g.ID_T_SUB_P
                                                                   START WITH       g.ID_T_SUB_P = '||GetCipsWithLivret_id.Terme||'
                                                                 )
                                            )
                       AND    c.ID_SPECOMPO             = b.ID_SPECOMPO';

					   IF typ = 25 THEN
					   	  Req:= Req ||' AND b.bconstactif=''1''';
					   ELSIF typ = 27 THEN
					   	  Req:= Req ||' AND b.bconstactif=''0''';
					   END IF;

					   Req:= Req ||' AND    d.ID_SPECIALITE           = c.ID_SPECIALITE
                       AND    e.ID_SPECIALITE           = d.ID_SPECIALITE
                       AND    d.IDTYPESPE IN ('||domaine||')
                --ML : Projet Nouveaux et Supprimés-13/05/2004
                        AND    e.codedispo NOT IN ('||Supp||')
                       AND    f.ID_SPEPRESENTATION      = e.ID_SPEPRESENTATION
                       AND    f.IDORGANISME             = '||GetCipsWithLivret_id.Id_hop||'

                  UNION
                     -- recherche des CIP dans le livret HOPITAL
                     SELECT   b.ID_SPEPRESENTATIONHOP, 0 ID_SPECIALITE, b.CIP,
                              b.UCD, '''' AMMEUROPE, '''' LIEUDISPO,
                              '''' CONDDISPO , '''' LISTE, '''' DUREEPRESCRIPTION,
                              '''' PRESCRIPTIONINITIALE, '''' PRESCRIPTIONRESERVEE,
                              '''' RENOUVELRESERVE, '''' MEDPARTIC, '''' NATURESURVEILLANCE,
                              '''' CODEREFERANTGENERIQUE, '''' REMPLACE, '''' SOURCEREMPLACE,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACE,
                              '''' REMPLACEPAR, '''' SOURCEREMPLACEPAR,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DATESOURCEREMPLACEPAR,
                              0 PRIXPRODHTF, a.PRIX_TTC_F PRIXPUBLICTTCF, 0 PRIXPRODHTE, a.PRIX_TTC_E PRIXPUBLICTTCE, '''' TVA,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DCREAT,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DMODIF,
                              TO_DATE(''31/12/2099'',''DD/MM/YYYY'') DREVIS,
                              '''' CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT, b.NOM DenomCip,
                              a.IDORGANISME, a.PRIX_TTC_F, a.PRIX_TTC_E, a.DISPO, a.COMMENTAIRE,
                              b.PRESENTATION, b.FORME, b.DOSAGE, b.LABO, a.CODHOPITAL, ''C'' FLAG_CAN, '''' DISPONIBILITE, 0 NBprise, '''' PriseUnitaire, 10 codedispo
                     FROM     SPEPRESENTATIONHOP b, LIVRETHOP a, COMPOHOP c, T_SUBHOP d
                     WHERE    d.ID_T_SUBHOP = '||GetCipsWithLivret_id.Terme||'
                       AND    a.ID_SPEPRESENTATIONHOP = b.ID_SPEPRESENTATIONHOP
                       AND    a.IDORGANISME           = b.IDORGANISME
                       AND    a.IDORGANISME           = '||GetCipsWithLivret_id.Id_hop||'
                       AND    c.IDORGANISME           = b.IDORGANISME
                       AND    c.ID_SPEPRESENTATIONHOP = b.ID_SPEPRESENTATIONHOP
                       AND    d.ID_T_SUBHOP           = c.ID_T_SUBHOP
                       AND    d.IDORGANISME           = c.IDORGANISME
                  ) ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  DenomCip';

				  OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR req;

                 END IF;
               END IF;

--***********************************************--On recherche par identifiant de classe thérapeutique*****************************************
--**********************************************************************************************************************************************
          ELSIF Typ = 3 THEN
            --Tri par prix
            IF ordre = 2 THEN
              --Recherche uniquement dans la banque Vidal et dans les médicaments admis au livret
               IF Banque = 'O' THEN
                  OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                 'Select            e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                           e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                           e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                           e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                           e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                           e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                           e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                           e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                           d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                           g.IDORGANISME ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL,
                           DECODE(g.IDORGANISME,NULL,'||'''N'''||','||'''A'''||') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, LIVRETVIDAL g
                  WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)
                                                FROM             SPECIALITE d, SPECLASSIRIS c
                                                WHERE            d.id_specialite =  c.id_specialite
                                                  AND            c.ID_DICOCOMCLASSIRIS IN ( SELECT           a.ID_DICOCOMCLASSIRIS
                                                                                            FROM             DICOCOMCLASSIRIS a
                                                                                            CONNECT BY PRIOR a.id_dicocomclassiris = a.dic_id_dicocomclassiris
                                                                                            START WITH       a.id_dicocomclassiris = (' || GetCipsWithLivret_id.Terme || ')))
                    AND    e.id_specialite               = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
                --ML : Projet Nouveaux et Supprimés-13/05/2004
                    AND    e.codedispo NOT IN ('||Supp||')
                    AND    g.ID_SPEPRESENTATION (+)         = e.ID_SPEPRESENTATION
                    AND    g.IDORGANISME (+)                = ' || GetCipsWithLivret_id.Id_hop || '
                 ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  PRIXPUBLICTTCE, DENOMCIP ';

               ELSE
                OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                 'Select       e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                           e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                           e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                           e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                           e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                           e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                           e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                           e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                           d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                           g.IDORGANISME  ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL, ''A'' FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, LIVRETVIDAL g
                  WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)
                                                FROM             SPECIALITE d, SPECLASSIRIS c
                                                WHERE            d.id_specialite =  c.id_specialite
                                                  AND            c.ID_DICOCOMCLASSIRIS IN ( SELECT           a.ID_DICOCOMCLASSIRIS
                                                                                            FROM             DICOCOMCLASSIRIS a
                                                                                            CONNECT BY PRIOR a.id_dicocomclassiris = a.dic_id_dicocomclassiris
                                                                                            START WITH       a.id_dicocomclassiris = (' || GetCipsWithLivret_id.Terme || ')))
                    AND    e.id_specialite               = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
                --ML : Projet Nouveaux et Supprimés-13/05/2004
                    AND    e.codedispo NOT IN ('||Supp||')
                    AND    g.ID_SPEPRESENTATION          = e.ID_SPEPRESENTATION
                    AND    g.IDORGANISME                 = ' || GetCipsWithLivret_id.Id_hop || '
                 ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  PRIXPUBLICTTCE, DENOMCIP';

               END IF;
             --Tri par evenement
             ELSIF ordre = 3 THEN
               IF Banque = 'O' THEN
               --Recherche uniquement dans la banque Vidal et dans les médicaments admis au livret
                 OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                  'Select   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                           e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                           e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                           e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                           e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                           e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                           e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(i.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,i.PRIX_TTC_F) PRIXPUBLICTTCF,
--                           e.PRIXPRODHTE, DECODE(i.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,i.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(i.idorganisme, NULL, e.PRIXPUBLICTTCF, i.PRIX_TTC_F) PRIXPUBLICTTCF,
                           e.PRIXPRODHTE, DECODE(i.idorganisme, NULL, e.PRIXPUBLICTTCE, i.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DREVIS, e.CIPREFERANT, f.EVENEMENT, f.DATEEVENEMENT,
                           d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                           i.IDORGANISME  ID_ORGANISME, i.PRIX_TTC_F PrixTTCF, i.PRIX_TTC_E PRIXTTCE, i.Dispo, i.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, i.CODHOPITAL,
                           DECODE(i.IDORGANISME,NULL,'||'''N'''||','||'''A'''||') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, SPEEVTPRESENTATION f, LIVRETVIDAL i
                  WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)
                                                FROM             SPECIALITE d, SPECLASSIRIS c
                                                --FROM             SPECIALITE d, SPEINDIC c
                                                WHERE            d.id_specialite =  c.id_specialite
                                                  AND            c.ID_DICOCOMCLASSIRIS IN ( SELECT           a.ID_DICOCOMCLASSIRIS
                                                                                            FROM             DICOCOMCLASSIRIS a
                                                                                            CONNECT BY PRIOR a.id_dicocomclassiris = a.dic_id_dicocomclassiris
                                                                                            START WITH       a.id_dicocomclassiris = (' || GetCipsWithLivret_id.Terme || ')))
                    AND    e.id_specialite           = d.id_specialite
                    AND    d.IDTYPESPE IN ('||domaine||')
                --ML : Projet Nouveaux et Supprimés-13/05/2004
                     AND    e.codedispo NOT IN ('||Supp||')
                    AND    e.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION
                --    AND    h.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION
                --    AND    UPPER(h.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    f.DATEEVENEMENT      = ( SELECT MAX(g.DATEEVENEMENT)
                                                    FROM   SPEEVTPRESENTATION g
                                                    WHERE  g.ID_SPEPRESENTATION = f.ID_SPEPRESENTATION
                                                      AND  UPPER(g.EVENEMENT) LIKE ''%REMB%'')
                    AND    UPPER(f.EVENEMENT) LIKE ''%REMB%''
                    AND    i.ID_SPEPRESENTATION (+)= e.ID_SPEPRESENTATION
                    AND    i.IDORGANISME (+)       = ' || GetCipsWithLivret_id.Id_hop || '
                  ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  EVENEMENT, DENOMCIP';
               ELSE
                 OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                 'Select   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                           e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                           e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                           e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                           e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                           e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                           e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(i.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,i.PRIX_TTC_F) PRIXPUBLICTTCF,
--                           e.PRIXPRODHTE, DECODE(i.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,i.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(i.idorganisme, NULL, e.PRIXPUBLICTTCF, i.PRIX_TTC_F) PRIXPUBLICTTCF,
                           e.PRIXPRODHTE, DECODE(i.idorganisme, NULL, e.PRIXPUBLICTTCE, i.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DREVIS, e.CIPREFERANT, f.EVENEMENT, f.DATEEVENEMENT,
                           d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                           i.IDORGANISME  ID_ORGANISME, i.PRIX_TTC_F PrixTTCF, i.PRIX_TTC_E PRIXTTCE, i.Dispo, i.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, i.CODHOPITAL, ''A'' FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, SPEEVTPRESENTATION f, LIVRETVIDAL i
                  WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)
                                                FROM             SPECIALITE d, SPECLASSIRIS c
                                                --FROM             SPECIALITE d, SPEINDIC c
                                                WHERE            d.id_specialite =  c.id_specialite
                                                  AND            c.ID_DICOCOMCLASSIRIS IN ( SELECT           a.ID_DICOCOMCLASSIRIS
                                                                                            FROM             DICOCOMCLASSIRIS a
                                                                                            CONNECT BY PRIOR a.id_dicocomclassiris = a.dic_id_dicocomclassiris
                                                                                            START WITH       a.id_dicocomclassiris = (' || GetCipsWithLivret_id.Terme || ')))
                    AND    e.id_specialite           = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
                --ML : Projet Nouveaux et Supprimés-13/05/2004
                     AND    e.codedispo NOT IN ('||Supp||')
                    AND    e.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION
               --     AND    h.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION
               --     AND    UPPER(h.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    f.DATEEVENEMENT      = ( SELECT MAX(g.DATEEVENEMENT)
                                                    FROM   SPEEVTPRESENTATION g
                                                    WHERE  g.ID_SPEPRESENTATION = f.ID_SPEPRESENTATION
                                                      AND  UPPER(g.EVENEMENT) LIKE ''%REMB%'')
                    AND    UPPER(f.EVENEMENT) LIKE ''%REMB%''
                    AND    i.ID_SPEPRESENTATION = e.ID_SPEPRESENTATION
                    AND    i.IDORGANISME        = ' || GetCipsWithLivret_id.Id_hop || '
                  ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  EVENEMENT, DENOMCIP';
                END IF;
             --Tri par nom
             ELSE
               --Recherche dans la banque Vidal et dans les médicaments admis
               IF Banque = 'O' THEN
                 OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                 'Select   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                           e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                           e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                           e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                           e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                           e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                           e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,
--                           e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                           e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                           d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                           g.IDORGANISME  ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL,
                           DECODE(g.IDORGANISME,NULL,'||'''N'''||','||'''A'''||') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, LIVRETVIDAL g
                  WHERE    e.id_specialite IN ( SELECT DISTINCT  d.id_specialite
                                                FROM             SPECIALITE d, SPECLASSIRIS c
                                                --FROM             SPECIALITE d, SPEINDIC c
                                                WHERE            d.id_specialite =  c.id_specialite
                                                  AND            c.ID_DICOCOMCLASSIRIS IN ( SELECT           a.ID_DICOCOMCLASSIRIS
                                                                                            FROM             DICOCOMCLASSIRIS a
                                                                                            CONNECT BY PRIOR a.id_dicocomclassiris = a.dic_id_dicocomclassiris
                                                                                            START WITH       a.id_dicocomclassiris =(' || GetCipsWithLivret_id.Terme || ')))
                    AND    e.id_specialite               = d.id_specialite
                    AND    d.IDTYPESPE IN ('||domaine||')
                --ML : Projet Nouveaux et Supprimés-13/05/2004
                     AND    e.codedispo NOT IN ('||Supp||')
             --       AND    f.ID_SPEPRESENTATION (+)      = e.ID_SPEPRESENTATION
             --       AND    UPPER(f.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    g.ID_SPEPRESENTATION (+)= e.ID_SPEPRESENTATION
                    AND    g.IDORGANISME (+)       = ' || GetCipsWithLivret_id.Id_hop || '
                  ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  DenomCip';
                ELSE
                  OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                  'Select   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                           e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                           e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                           e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                           e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                           e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                           e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,
--                           e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                           e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                           d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                           g.IDORGANISME  ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL, ''A'' FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, LIVRETVIDAL g
                  WHERE    e.id_specialite IN ( SELECT DISTINCT  d.id_specialite
                                                FROM             SPECIALITE d, SPECLASSIRIS c
                                                --FROM             SPECIALITE d, SPEINDIC c
                                                WHERE            d.id_specialite =  c.id_specialite
                                                  AND            c.ID_DICOCOMCLASSIRIS IN ( SELECT           a.ID_DICOCOMCLASSIRIS
                                                                                            FROM             DICOCOMCLASSIRIS a
                                                                                            CONNECT BY PRIOR a.id_dicocomclassiris = a.dic_id_dicocomclassiris
                                                                                            START WITH       a.id_dicocomclassiris = (' || GetCipsWithLivret_id.Terme || ')))
                    AND    e.id_specialite               = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
                --ML : Projet Nouveaux et Supprimés-13/05/2004
                     AND    e.codedispo NOT IN ('||Supp||')
              --      AND    f.ID_SPEPRESENTATION (+)      = e.ID_SPEPRESENTATION
              --      AND    UPPER(f.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    g.ID_SPEPRESENTATION = e.ID_SPEPRESENTATION
                    AND    g.IDORGANISME        = ' || GetCipsWithLivret_id.Id_hop || '
                  ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  DenomCip';
                END IF;
             END IF;

--*****************************************************--Recherche par laboratoire**************************************************************
--**********************************************************************************************************************************************
           ELSIF Typ = 4 THEN
             --Recherche dans la banque Vidal et dans les medicaments admis
             IF  ordre = 2 THEN
               IF Banque = 'O' THEN
                 OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                 'SELECT   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                          e.UCD, e.AMMEUROPE,  e.LIEUDISPO,
                          e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                          e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                          e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                          e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                          e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                          e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,
--                          e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                          e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                          e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                          e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                          d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                          g.IDORGANISME  ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL,
                          DECODE(g.IDORGANISME,NULL,''N'',''A'') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                 FROM     SPEPRESENTATION e, SPECIALITE d, SPELABS_REL c, LABORATOIRE a, LIVRETVIDAL g
                 WHERE    a.ID_LABORATOIRE              = '||GetCipsWithLivret_id.Terme||'
                   AND    c.ID_LABORATOIRE              = a.ID_LABORATOIRE
                   AND    d.ID_SPECIALITE               = c.ID_SPECIALITE
                   AND    e.ID_SPECIALITE               = d.ID_SPECIALITE
				           AND    d.IDTYPESPE IN ('||domaine||')
              --     AND    f.ID_SPEPRESENTATION (+)      = e.ID_SPEPRESENTATION
              --     AND    UPPER(f.TYPECONDPRIMAIRE (+)) = ''DENOMCIP''
                   AND    g.ID_SPEPRESENTATION (+)         = e.ID_SPEPRESENTATION
                   AND    g.IDORGANISME (+)                = '||GetCipsWithLivret_id.Id_hop||'
                 ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  PRIXPUBLICTTCE, DENOMCIP';
               ELSE
                 OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                 'SELECT   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                          e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                          e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                          e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                          e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                          e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                          e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                          e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,
--                          e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                          e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                          e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                          e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                          d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                          g.IDORGANISME  ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL, ''A'' FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                 FROM     SPEPRESENTATION e, SPECIALITE d, SPELABS_REL c, LABORATOIRE a, LIVRETVIDAL g
                 WHERE    a.ID_LABORATOIRE              = '||GetCipsWithLivret_id.Terme||'
                   AND    c.ID_LABORATOIRE              = a.ID_LABORATOIRE
                   AND    d.ID_SPECIALITE               = c.ID_SPECIALITE
                   AND    e.ID_SPECIALITE               = d.ID_SPECIALITE
				           AND    d.IDTYPESPE IN ('||domaine||')
               --    AND    f.ID_SPEPRESENTATION (+)      = e.ID_SPEPRESENTATION
               --    AND    UPPER(f.TYPECONDPRIMAIRE (+)) = ''DENOMCIP''
                   AND    g.ID_SPEPRESENTATION          = e.ID_SPEPRESENTATION
                   AND    g.IDORGANISME                 = '||GetCipsWithLivret_id.Id_hop||'
                 ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  PRIXPUBLICTTCE, DENOMCIP';
               END IF;
             ELSIF  ordre = 3 THEN
               IF Banque = 'O' THEN
                 OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                 'SELECT   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                          e.UCD, e.AMMEUROPE,  e.LIEUDISPO,
                          e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                          e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                          e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                          e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                          e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                          e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,
--                          e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                          e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                          e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                          e.DREVIS, e.CIPREFERANT, f.EVENEMENT, f.DATEEVENEMENT,
                          d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                          g.IDORGANISME  ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL,
                          DECODE(g.IDORGANISME,NULL,''N'',''A'') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                 FROM     SPEPRESENTATION e, SPECIALITE d, SPELABS_REL c, LABORATOIRE a ,SPEEVTPRESENTATION f, LIVRETVIDAL g
                 WHERE    a.ID_LABORATOIRE          = '||GetCipsWithLivret_id.Terme||'
                   AND    c.ID_LABORATOIRE          = a.ID_LABORATOIRE
                   AND    d.ID_SPECIALITE           = c.ID_SPECIALITE
                   AND    e.ID_SPECIALITE           = d.ID_SPECIALITE
				           AND    d.IDTYPESPE IN ('||domaine||')
                   AND    e.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION
               --    AND    h.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION
               --    AND    UPPER(h.TYPECONDPRIMAIRE (+)) = ''DENOMCIP''
                   AND    f.DATEEVENEMENT = ( SELECT MAX(g.DATEEVENEMENT)
                                              FROM   SPEEVTPRESENTATION g
                                              WHERE  g.ID_SPEPRESENTATION = f.ID_SPEPRESENTATION
                                                AND  UPPER(g.EVENEMENT) LIKE ''%REMB%'')
                   AND    UPPER(f.EVENEMENT) LIKE ''%REMB%''
                   AND    g.ID_SPEPRESENTATION (+)= e.ID_SPEPRESENTATION
                   AND    g.IDORGANISME (+)       = '||GetCipsWithLivret_id.Id_hop||'
                 ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  EVENEMENT, DENOMCIP';
               ELSE
               OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                 'SELECT   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                          e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                          e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                          e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                          e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                          e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                          e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                          e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF,DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,
--                          e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                          e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                          e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                          e.DREVIS, e.CIPREFERANT, f.EVENEMENT, f.DATEEVENEMENT,
                          d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                          g.IDORGANISME  ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL, ''A'' FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                 FROM     SPEPRESENTATION e, SPECIALITE d, SPELABS_REL c, LABORATOIRE a ,SPEEVTPRESENTATION f, LIVRETVIDAL g
                 WHERE    a.ID_LABORATOIRE          = '||GetCipsWithLivret_id.Terme||'
                   AND    c.ID_LABORATOIRE          = a.ID_LABORATOIRE
                   AND    d.ID_SPECIALITE           = c.ID_SPECIALITE
                   AND    e.ID_SPECIALITE           = d.ID_SPECIALITE
				           AND    d.IDTYPESPE IN ('||domaine||')
                   AND    e.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION
             --      AND    h.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION
             --      AND    UPPER(h.TYPECONDPRIMAIRE (+)) = ''DENOMCIP''
                   AND    f.DATEEVENEMENT = ( SELECT MAX(g.DATEEVENEMENT)
                                              FROM   SPEEVTPRESENTATION g
                                              WHERE  g.ID_SPEPRESENTATION = f.ID_SPEPRESENTATION
                                                AND  UPPER(g.EVENEMENT) LIKE ''%REMB%'')
                   AND    UPPER(f.EVENEMENT) LIKE ''%REMB%''
                   AND    g.ID_SPEPRESENTATION = e.ID_SPEPRESENTATION
                   AND    g.IDORGANISME        = '||GetCipsWithLivret_id.Id_hop||'
                 ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  EVENEMENT, DENOMCIP';
               END IF;
             --Tri par nom
             ELSE
               --Recherche dans la banque et dans les medicaments admis
               IF Banque = 'O' THEN
                 OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                 'SELECT   /*+ RULE */       e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                          e.UCD, e.AMMEUROPE,  e.LIEUDISPO,
                          e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                          e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                          e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                          e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                          e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                          e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,
--                          e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                          e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                          e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                          e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                          d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                          g.IDORGANISME  ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL,
                          DECODE(g.IDORGANISME,NULL,''N'',''A'') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                 FROM     SPEPRESENTATION e, SPECIALITE d, SPELABS_REL c, LABORATOIRE a, LIVRETVIDAL g
                 WHERE    a.ID_LABORATOIRE          = '||GetCipsWithLivret_id.Terme||'
                   AND    c.ID_LABORATOIRE          = a.ID_LABORATOIRE
                   AND    d.ID_SPECIALITE           = c.ID_SPECIALITE
                   AND    e.ID_SPECIALITE           = d.ID_SPECIALITE
				           AND    d.IDTYPESPE IN ('||domaine||')
             --      AND    f.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION
             --      AND    UPPER(f.TYPECONDPRIMAIRE (+)) = ''DENOMCIP''
                   AND    g.ID_SPEPRESENTATION (+)= e.ID_SPEPRESENTATION
                   AND    g.IDORGANISME (+)       = '||GetCipsWithLivret_id.Id_hop||'
                 ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  DenomCip';
             ELSE
             OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
             'SELECT   /*+ RULE */       e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                          e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                          e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                          e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                          e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                          e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                          e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                          e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,
--                          e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                          e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                          e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                          e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                          d.DENOMSPE||DECODE(condi,NULL,'''','' : ''||condi) DenomCip,
                          g.IDORGANISME  ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL, ''A'' FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                 FROM     SPEPRESENTATION e, SPECIALITE d, SPELABS_REL c, LABORATOIRE a, LIVRETVIDAL g
                 WHERE    a.ID_LABORATOIRE          = '||GetCipsWithLivret_id.Terme||'
                   AND    c.ID_LABORATOIRE          = a.ID_LABORATOIRE
                   AND    d.ID_SPECIALITE           = c.ID_SPECIALITE
                   AND    e.ID_SPECIALITE           = d.ID_SPECIALITE
				           AND    d.IDTYPESPE IN ('||domaine||')
             --      AND    f.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION
             --      AND    UPPER(f.TYPECONDPRIMAIRE (+)) = ''DENOMCIP''
                   AND    g.ID_SPEPRESENTATION = e.ID_SPEPRESENTATION
                   AND    g.IDORGANISME        = '||GetCipsWithLivret_id.Id_hop||'
                 ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  DenomCip';
             END IF;
          END IF;

--//////////////////////////////////////////////----Classes ATC----/////////////////////////////////////////////////////////
         ELSIF Typ = 5  THEN
            --Tri par prix
            IF ordre = 2 THEN
              --Recherche uniquement dans la banque Vidal et dans les médicaments admis au livret
               IF Banque = 'O' THEN
                  OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                  'Select   /*+ RULE */         e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                         e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                         e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                         e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                         e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                         e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                         e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
                     --    e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,
                     --    e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                         e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                         e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                         e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                         d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                         g.IDORGANISME ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                         '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL,
                         DECODE(g.IDORGANISME,NULL,'||'''N'''||','||'''A'''||') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, LIVRETVIDAL g
                  WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)
                                                FROM             SPECIALITE d, SPEPHARMACODYNAMIE p,
												                        DICOT_ATC_IRIS q
	                                              WHERE   q.LIBELLE = p.ATC_IRIS
									                                AND   d.ID_SPECIALITE = p.ID_SPECIALITE
                                                  AND   q.ID_DICOT_ATC_IRIS IN ( SELECT          q.ID_DICOT_ATC_IRIS
                                                                                 FROM            DICOT_ATC_IRIS q
                                                                                 CONNECT BY PRIOR q.ID_DICOT_ATC_IRIS = q.DIC_ID_DICOT_ATC_IRIS
                                                                                 START WITH       q.ID_DICOT_ATC_IRIS = (' || GetCipsWithLivret_id.Terme || ')))
                    AND    e.id_specialite             = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
                --ML : Projet Nouveaux et Supprimés-13/05/2004
                     AND    e.codedispo NOT IN ('||Supp||')
                   -- AND    f.ID_SPEPRESENTATION (+)      = e.ID_SPEPRESENTATION
                  --  AND    UPPER(f.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    g.ID_SPEPRESENTATION(+)      = e.ID_SPEPRESENTATION
                    AND    g.IDORGANISME(+)             = '||GetCipsWithLivret_id.Id_hop||'
				   ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),   PRIXPUBLICTTCE, DENOMCIP';
               ELSE
                OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                 'Select   /*+ RULE */         e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                           e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                           e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                           e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                           e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                           e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                           e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                         e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,
--                         e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                           e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                           d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                           g.IDORGANISME  ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL, ''A'' FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, LIVRETVIDAL g
                  WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)
                                                FROM             SPECIALITE d, SPEPHARMACODYNAMIE p,
												                        DICOT_ATC_IRIS q
	                                              WHERE   q.LIBELLE = p.ATC_IRIS
									                                AND   d.ID_SPECIALITE = p.ID_SPECIALITE
                                                  AND   q.ID_DICOT_ATC_IRIS IN ( SELECT          q.ID_DICOT_ATC_IRIS
                                                                                 FROM            DICOT_ATC_IRIS q
                                                                                 CONNECT BY PRIOR q.ID_DICOT_ATC_IRIS = q.DIC_ID_DICOT_ATC_IRIS
                                                                                 START WITH       q.ID_DICOT_ATC_IRIS = (' || GetCipsWithLivret_id.Terme || ')))
                    AND    e.id_specialite               = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
                --ML : Projet Nouveaux et Supprimés-13/05/2004
                     AND    e.codedispo NOT IN ('||Supp||')
                  --  AND    f.ID_SPEPRESENTATION (+)      = e.ID_SPEPRESENTATION
                  --  AND    UPPER(f.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    g.ID_SPEPRESENTATION          = e.ID_SPEPRESENTATION
                    AND    g.IDORGANISME                 = ' || GetCipsWithLivret_id.Id_hop || '
                 ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),   PRIXPUBLICTTCE, DENOMCIP';
               END IF;
             --Tri par evenement
            ELSIF ordre = 3 THEN
               IF Banque = 'O' THEN
               --Recherche uniquement dans la banque Vidal et dans les médicaments admis au livret
                 OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                  'Select   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                           e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                           e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                           e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                           e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                           e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                           e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                         e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(i.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,i.PRIX_TTC_F) PRIXPUBLICTTCF,
--                         e.PRIXPRODHTE, DECODE(i.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,i.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(i.idorganisme, NULL, e.PRIXPUBLICTTCF, i.PRIX_TTC_F) PRIXPUBLICTTCF,
                           e.PRIXPRODHTE, DECODE(i.idorganisme, NULL, e.PRIXPUBLICTTCE, i.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DREVIS, e.CIPREFERANT, f.EVENEMENT, f.DATEEVENEMENT,
                           d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                           i.IDORGANISME  ID_ORGANISME, i.PRIX_TTC_F PrixTTCF, i.PRIX_TTC_E PRIXTTCE, i.Dispo, i.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, i.CODHOPITAL,
                           DECODE(i.IDORGANISME,NULL,'||'''N'''||','||'''A'''||') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, SPEEVTPRESENTATION f, LIVRETVIDAL i
                  WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)
                                                FROM             SPECIALITE d, SPEPHARMACODYNAMIE p,
												                        DICOT_ATC_IRIS q
	                                              WHERE   q.LIBELLE = p.ATC_IRIS
									                                AND   d.ID_SPECIALITE = p.ID_SPECIALITE
                                                  AND   q.ID_DICOT_ATC_IRIS IN ( SELECT          q.ID_DICOT_ATC_IRIS
                                                                                 FROM            DICOT_ATC_IRIS q
                                                                                 CONNECT BY PRIOR q.ID_DICOT_ATC_IRIS = q.DIC_ID_DICOT_ATC_IRIS
                                                                                 START WITH       q.ID_DICOT_ATC_IRIS = (' || GetCipsWithLivret_id.Terme || ')))
                    AND    e.id_specialite           = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
                --ML : Projet Nouveaux et Supprimés-13/05/2004
                     AND    e.codedispo NOT IN ('||Supp||')
                    AND    e.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION
               --     AND    h.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION
               --     AND    UPPER(h.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    f.DATEEVENEMENT      = ( SELECT MAX(g.DATEEVENEMENT)
                                                    FROM   SPEEVTPRESENTATION g
                                                    WHERE  g.ID_SPEPRESENTATION = f.ID_SPEPRESENTATION
                                                      AND  UPPER(g.EVENEMENT) LIKE ''%REMB%'')
                    AND    UPPER(f.EVENEMENT) LIKE ''%REMB%''
                    AND    i.ID_SPEPRESENTATION (+)= e.ID_SPEPRESENTATION
                    AND    i.IDORGANISME (+)       = ' || GetCipsWithLivret_id.Id_hop || '
                  ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  EVENEMENT, DENOMCIP';
               ELSE
                 OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                 'Select   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                           e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                           e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                           e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                           e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                           e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                           e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                         e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(i.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,i.PRIX_TTC_F) PRIXPUBLICTTCF,
--                         e.PRIXPRODHTE, DECODE(i.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,i.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(i.idorganisme, NULL, e.PRIXPUBLICTTCF, i.PRIX_TTC_F) PRIXPUBLICTTCF,
                           e.PRIXPRODHTE, DECODE(i.idorganisme, NULL, e.PRIXPUBLICTTCE, i.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DREVIS, e.CIPREFERANT, f.EVENEMENT, f.DATEEVENEMENT,
                           d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                           i.IDORGANISME  ID_ORGANISME, i.PRIX_TTC_F PrixTTCF, i.PRIX_TTC_E PRIXTTCE, i.Dispo, i.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, i.CODHOPITAL, ''A'' FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, SPEEVTPRESENTATION f, LIVRETVIDAL i
                  WHERE    e.id_specialite IN ( SELECT DISTINCT (d.id_specialite)
                                                FROM             SPECIALITE d, SPEPHARMACODYNAMIE p,
												                        DICOT_ATC_IRIS q
	                                              WHERE   q.LIBELLE = p.ATC_IRIS
									                                AND   d.ID_SPECIALITE = p.ID_SPECIALITE
                                                  AND   q.ID_DICOT_ATC_IRIS IN ( SELECT          q.ID_DICOT_ATC_IRIS
                                                                                 FROM            DICOT_ATC_IRIS q
                                                                                 CONNECT BY PRIOR q.ID_DICOT_ATC_IRIS = q.DIC_ID_DICOT_ATC_IRIS
                                                                                 START WITH       q.ID_DICOT_ATC_IRIS = (' || GetCipsWithLivret_id.Terme || ')))
                    AND    e.id_specialite           = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
                --ML : Projet Nouveaux et Supprimés-13/05/2004
                     AND    e.codedispo NOT IN ('||Supp||')
                    AND    e.ID_SPEPRESENTATION      = f.ID_SPEPRESENTATION
         --           AND    h.ID_SPEPRESENTATION (+)  = e.ID_SPEPRESENTATION
          --          AND    UPPER(h.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    f.DATEEVENEMENT      = ( SELECT MAX(g.DATEEVENEMENT)
                                                    FROM   SPEEVTPRESENTATION g
                                                    WHERE  g.ID_SPEPRESENTATION = f.ID_SPEPRESENTATION
                                                      AND  UPPER(g.EVENEMENT) LIKE ''%REMB%'')
                    AND    UPPER(f.EVENEMENT) LIKE ''%REMB%''
                    AND    i.ID_SPEPRESENTATION = e.ID_SPEPRESENTATION
                    AND    i.IDORGANISME        = ' || GetCipsWithLivret_id.Id_hop || '
                  ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  EVENEMENT, DENOMCIP';
                END IF;
             --Tri par nom
            ELSE
               IF Banque = 'O' THEN
                 OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                 'Select   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                           e.UCD, e.AMMEUROPE, e.LIEUDISPO,
                           e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                           e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                           e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                           e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                           e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                         e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,
--                         e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                           e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                           d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                           g.IDORGANISME  ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL,
                            DECODE(g.IDORGANISME,NULL,'||'''N'''||','||'''A'''||') FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, LIVRETVIDAL g
                  WHERE    e.id_specialite IN ( SELECT DISTINCT  d.id_specialite
                                                FROM             SPECIALITE d, SPEPHARMACODYNAMIE p,
												                        DICOT_ATC_IRIS q
	                                              WHERE   q.LIBELLE = p.ATC_IRIS
									                                AND   d.ID_SPECIALITE = p.ID_SPECIALITE
                                                  AND   q.ID_DICOT_ATC_IRIS IN ( SELECT          q.ID_DICOT_ATC_IRIS
                                                                                 FROM            DICOT_ATC_IRIS q
                                                                                 CONNECT BY PRIOR q.ID_DICOT_ATC_IRIS = q.DIC_ID_DICOT_ATC_IRIS
                                                                                 START WITH       q.ID_DICOT_ATC_IRIS = (' || GetCipsWithLivret_id.Terme || ')))
                    AND    e.id_specialite               = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
                --ML : Projet Nouveaux et Supprimés-13/05/2004
                     AND    e.codedispo NOT IN ('||Supp||')
              --      AND    f.ID_SPEPRESENTATION (+)      = e.ID_SPEPRESENTATION
              --      AND    UPPER(f.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    g.ID_SPEPRESENTATION (+)= e.ID_SPEPRESENTATION
                    AND    g.IDORGANISME (+)       = ' || GetCipsWithLivret_id.Id_hop || '
                  ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  DenomCip';
                ELSE
                  OPEN GetCipsWithLivret_id.RefSPEPRESENTATION FOR
                  'Select   /*+ RULE */ e.ID_SPEPRESENTATION, e.ID_SPECIALITE, e.CIP,
                           e.UCD, e.AMMEUROPE,  e.LIEUDISPO,
                           e.CONDDISPO, e.LISTE, e.DUREEPRESCRIPTION,
                           e.PRESCRIPTIONINITIALE, e.PRESCRIPTIONRESERVEE,
                           e.RENOUVELRESERVE, e.MEDPARTIC, e.NATURESURVEILLANCE,
                           e.CODEREFERANTGENERIQUE, e.REMPLACE, e.SOURCEREMPLACE,
                           e.DATESOURCEREMPLACE, e.REMPLACEPAR, e.SOURCEREMPLACEPAR,
--                         e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.PRIX_TTC_F,NULL,e.PRIXPUBLICTTCF,g.PRIX_TTC_F) PRIXPUBLICTTCF,
--                         e.PRIXPRODHTE, DECODE(g.PRIX_TTC_E,NULL,e.PRIXPUBLICTTCE,g.PRIX_TTC_E)  PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DATESOURCEREMPLACEPAR, e.PRIXPRODHTF, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCF, g.PRIX_TTC_F) PRIXPUBLICTTCF,
                           e.PRIXPRODHTE, DECODE(g.idorganisme, NULL, e.PRIXPUBLICTTCE, g.PRIX_TTC_E) PRIXPUBLICTTCE, e.TVA, e.DCREAT, e.DMODIF,
                           e.DREVIS, e.CIPREFERANT, '''' EVENEMENT, '''' DATEEVENEMENT,
                           d.DENOMSPE||DECODE(condi,NULL,'||''''''||','||''' : '''||'||condi) DenomCip,
                           g.IDORGANISME  ID_ORGANISME, g.PRIX_TTC_F PrixTTCF, g.PRIX_TTC_E PRIXTTCE, g.Dispo, g.COMMENTAIRE,
                           '''' PRESENTATION, '''' FORME, '''' DOSAGE, '''' LABO, g.CODHOPITAL, ''A'' FLAG_CAN, e.DISPONIBILITE, e.NBprise, e.PriseUnitaire, e.codedispo
                  FROM     SPEPRESENTATION e, SPECIALITE d, LIVRETVIDAL g
                  WHERE    e.id_specialite IN ( SELECT DISTINCT  d.id_specialite
                                                FROM             SPECIALITE d, SPEPHARMACODYNAMIE p,
												                        DICOT_ATC_IRIS q
	                                              WHERE   q.LIBELLE = p.ATC_IRIS
									                                AND   d.ID_SPECIALITE = p.ID_SPECIALITE
                                                  AND   q.ID_DICOT_ATC_IRIS IN ( SELECT          q.ID_DICOT_ATC_IRIS
                                                                                 FROM            DICOT_ATC_IRIS q
                                                                                 CONNECT BY PRIOR q.ID_DICOT_ATC_IRIS = q.DIC_ID_DICOT_ATC_IRIS
                                                                                 START WITH       q.ID_DICOT_ATC_IRIS = (' || GetCipsWithLivret_id.Terme || ')))
                    AND    e.id_specialite               = d.id_specialite
					          AND    d.IDTYPESPE IN ('||domaine||')
                --ML : Projet Nouveaux et Supprimés-13/05/2004
                      AND    e.codedispo NOT IN ('||Supp||')
             --       AND    f.ID_SPEPRESENTATION (+)      = e.ID_SPEPRESENTATION
             --       AND    UPPER(f.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    g.ID_SPEPRESENTATION = e.ID_SPEPRESENTATION
                    AND    g.IDORGANISME        = ' || GetCipsWithLivret_id.Id_hop || '
                  ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  DenomCip';
               END IF;
--////////////////////////////////////////////////////////----Fin Classes ATC----/////////////////////////////////////////////////
           --  END
           END IF;
         END IF;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCipsWithLivret_id%');
--         COMMIT;
-------------------------------------------------------------

         RETURN 1;
         EXCEPTION
           WHEN OTHERS THEN
           RETURN SQLCODE;
END GetCipsWithLivret_id;
  -- ----------------------------------------------------------------------
  -- Fonction de sélection  : GetSpeCipsInLivret_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- Modification #1 : Permet d'obtenir les CIP ( rattachés à l'identifiant
  --          de spécialité passé en paramètre : Id_Specialite ) qui se
  --          trouvent dans le livret VIDAL de l'organisme concerné (Id_hop)
  --          Résultats restitués dans l'ordre des identifiants de CIP.
  -- ----------------------------------------------------------------------
           PROCEDURE GetSpeCipsInLivret_id ( Id_Specialite        IN    Specialite_Pubres.Id_Specialite               DEFAULT NULL,
                                          Id_hop               IN    Spepresentation_Pubres.ID_ORGANISME,
                                          RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp3,
                                          Ret                  OUT   NUMBER)
           IS
           BEGIN
                        Ret := GetSpeCipsInLivret_id ( Id_Specialite, Id_hop, RefSPEPRESENTATION);
           END GetSpeCipsInLivret_id;
           FUNCTION GetSpeCipsInLivret_id ( Id_Specialite        IN    Specialite_Pubres.Id_Specialite               DEFAULT NULL,
                                         Id_hop               IN    Spepresentation_Pubres.ID_ORGANISME,
                                         RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp3)
                                       RETURN NUMBER
           IS
		   BEGIN
		    OPEN GetSpeCipsInLivret_id.RefSPEPRESENTATION FOR
               SELECT   b.Id_Spepresentation, b.Id_Specialite,
                        b.Cip, b.Ucd, b.Ammeurope,
                        b.Lieudispo, b.Conddispo,
                        b.Liste, b.Dureeprescription, b.Prescriptioninitiale,
                        b.Prescriptionreservee, b.Renouvelreserve, b.Medpartic,
                        b.Naturesurveillance, b.Codereferantgenerique, b.Remplace,
                        b.Sourceremplace, b.Datesourceremplace, b.Remplacepar,
                        b.Sourceremplacepar, b.Datesourceremplacepar, b.Prixprodhtf,
                        c.PRIX_TTC_F Prixpublicttcf, b.Prixprodhte, c.PRIX_TTC_E Prixpublicttce,
                        b.Tva, b.Dcreat, b.Dmodif, b.Drevis, b.Cipreferant,
                        a.DENOMSPE||DECODE(condi,NULL,'',' : '||condi) DenomCip , c.Idorganisme,
                        b.disponibilite, b.NBprise, b.PriseUnitaire
               FROM     SPEPRESENTATION b, SPECIALITE a, LIVRETVIDAL c
               WHERE    a.ID_SPECIALITE           = b.ID_SPECIALITE
                 AND    a.ID_SPECIALITE           = GetSpeCipsInLivret_id.Id_Specialite
                 AND    c.ID_SPEPRESENTATION      = b.ID_SPEPRESENTATION
                 AND    c.IDORGANISME             = GetSpeCipsInLivret_id.Id_hop
            --     AND    d.ID_SPEPRESENTATION (+)  = b.ID_SPEPRESENTATION
            --     AND    UPPER(d.TYPECONDPRIMAIRE (+)) = 'DENOMCIP'
               ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)),  DenomCip;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSpeCipsInLivret_id%');
--         COMMIT;
-------------------------------------------------------------
             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetSpeCipsInLivret_id;

-- ====================================================================
-- Fin de package
-- ====================================================================
END Avidal_Cip_Livret;
/
CREATE OR REPLACE PACKAGE Avidal_Classe_ATC IS
-- ====================================================================
-- Script     : AVIDAL_CLASSE_ATC    Type : Package
-- Objet      : Ressources Select tables
-- Owner      : VIDAL
-- Création   : 31/01/02
-- Auteur     : AL
-- ====================================================================


	   PROCEDURE GetFirstATC (  RefDICOT_ATC_IRIS OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
	   			 			   	  Ret				  OUT NUMBER);
--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles Entrées
--/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	   PROCEDURE GetATCs_txt ( LIBELLE				 IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	    RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
	   			 			   	  Ret				  OUT NUMBER);

	   PROCEDURE GetATC_id ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.Id_DICOT_ATC_IRIS	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
	   			 			   	  Ret				  OUT NUMBER);
	    PROCEDURE GetATC_txt ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
	   			 			   	  Ret				  OUT NUMBER);

	   PROCEDURE GetATCAncester_id ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.Id_DICOT_ATC_IRIS	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
	   			 			   	  Ret				  OUT NUMBER);
	   PROCEDURE GetATCAncester_txt ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
	   			 			   	  Ret				  OUT NUMBER);

	   PROCEDURE GetATCParent_id ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.Id_DICOT_ATC_IRIS	 DEFAULT NULL,
	   				   	   		  RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
	   			 			   	  Ret				  OUT NUMBER);
	   PROCEDURE GetATCParent_txt ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   		  RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
	   			 			   	  Ret				  OUT NUMBER);

	   PROCEDURE GetATCChild_id ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.Id_DICOT_ATC_IRIS	 DEFAULT NULL,
	   				   	   		RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
	   			 			   	  Ret				  OUT NUMBER);
	   PROCEDURE GetATCChild_txt ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   		RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
	   			 			   	  Ret				  OUT NUMBER);

	   PROCEDURE GetATCSpes_id ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.Id_DICOT_ATC_IRIS	 DEFAULT NULL,
	   				   	 	   RefSPECIALITE	OUT Specialite_Pubres.SPECIALITECurTyp,
	   			 			   	  Ret				  OUT NUMBER);
	   PROCEDURE GetATCSpes_txt ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	 	   RefSPECIALITE	OUT Specialite_Pubres.SPECIALITECurTyp,
	   			 			   	  Ret				  OUT NUMBER);

	   PROCEDURE GetATCsCode_txt ( LIBELLE				 IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	    RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
	   			 			   	  Ret				  OUT NUMBER);

	   FUNCTION FormatLibDicoT_ATC_IRIS ( LIBELLE	IN  DicoT_ATC_IRIS_Pubres.LIBELLE)
	   			RETURN VARCHAR2;
	   FUNCTION FormatCodeDicoT_ATC_IRIS ( LIBELLE	IN  DicoT_ATC_IRIS_Pubres.LIBELLE)
	   			RETURN VARCHAR2;
	    PRAGMA RESTRICT_REFERENCES(FormatLibDicoT_ATC_IRIS,WNDS);

   -- =====================================================================
   -- Function		  : GetFirstATC
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by AL 31/01/2002
   -- =====================================================================
	   FUNCTION GetFirstATC (  RefDICOT_ATC_IRIS OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER;
	    PRAGMA RESTRICT_REFERENCES(GetFirstATC,WNDS,WNPS,RNPS);

--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles Entrées
--/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   -- =====================================================================
   -- Function		  : GetATCs
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by AL 31/01/2002
   -- =====================================================================
	   FUNCTION GetATCs_txt ( LIBELLE				 IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	    RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER;

	    --Pragma Restrict_References(GetATCs);

   -- =====================================================================
   -- Function		  : GetATC
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by AL 31/01/2002
   -- =====================================================================

	   FUNCTION GetATC_id( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.Id_DICOT_ATC_IRIS	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER;

	   FUNCTION GetATC_txt ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER;
	   --PRAGMA RESTRICT_REFERENCES(GetATC,WNDS);

   -- =====================================================================
   -- Function		  : GetATCAncester
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by AL 31/01/2002
   -- =====================================================================
	   FUNCTION GetATCAncester_id ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.Id_DICOT_ATC_IRIS	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER ;
	   FUNCTION GetATCAncester_txt ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER ;
	   --PRAGMA RESTRICT_REFERENCES(GetATCAncester, WNDS);

   -- =====================================================================
   -- Function		  : GetATCParent
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by AL 31/01/2002
   -- =====================================================================
	   FUNCTION GetATCParent_id ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.Id_DICOT_ATC_IRIS	 DEFAULT NULL,
	   				   	   		  RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER ;
	   FUNCTION GetATCParent_txt ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   		  RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER ;
	   --PRAGMA RESTRICT_REFERENCES(GetATCParent, WNDS);

   -- =====================================================================
   -- Function		  : GetATCChild
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by AL 31/01/2002
   -- =====================================================================
	   FUNCTION GetATCChild_id ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.Id_DICOT_ATC_IRIS	 DEFAULT NULL,
	   				   	   		RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER ;
	   FUNCTION GetATCChild_txt ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   		RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER ;
	   --PRAGMA RESTRICT_REFERENCES(GetATCChild, WNDS);


   -- =====================================================================
   -- Function		  : GetATCSpes
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by AL 31/01/2002
   -- =====================================================================
	   FUNCTION GetATCSpes_id ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.Id_DICOT_ATC_IRIS	 DEFAULT NULL,
	   				   	 	   RefSPECIALITE	OUT Specialite_Pubres.SPECIALITECurTyp)
	   			RETURN NUMBER ;
	   FUNCTION GetATCSpes_txt ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	 	   RefSPECIALITE	OUT Specialite_Pubres.SPECIALITECurTyp)
	   			RETURN NUMBER ;
	   --PRAGMA RESTRICT_REFERENCES(GetATCSpes, WNDS,WNPS,RNPS);

     FUNCTION Getatcscode_Txt ( LIBELLE				 IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	    RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER;

-- ====================================================================
-- Fin de package
-- ====================================================================
END Avidal_Classe_ATC;
/

CREATE OR REPLACE PACKAGE BODY Avidal_Classe_ATC IS
-- ====================================================================
-- Script     : AVIDAL_CLASSE_ATC    Type : Package Body
-- Objet      : Ressources Select tables
-- Owner      : VIDAL
-- Création   : 31/01/2002
-- Auteur     : AL
-- ====================================================================

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : FormatLibDicoT_ATC_IRIS
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------

	   FUNCTION FormatCodeDicot_atc_iris ( LIBELLE	IN  Dicot_atc_iris_Pubres.LIBELLE)
	   			RETURN VARCHAR2 IS

	   r Dicot_atc_iris_Pubres.LIBELLE;

	   BEGIN

	   	  SELECT RTRIM (SUBSTR(LIBELLE,1,INSTR(libelle,'/')-2)) INTO r
		  FROM dual;

		  RETURN r;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLERRM;

	   END FormatCodeDicot_atc_iris;

	   FUNCTION FormatLibDicot_atc_iris ( LIBELLE	IN  Dicot_atc_iris_Pubres.LIBELLE)
	   			RETURN VARCHAR2 IS

	   r Dicot_atc_iris_Pubres.LIBELLE;

	   BEGIN

	   	  SELECT LTRIM (SUBSTR(LIBELLE,INSTR(libelle,'/')+2)) INTO r
		  FROM dual;

		  RETURN r;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLERRM;

	   END FormatLibDicot_atc_iris;


--///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles Entrées
--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetFirstATC
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   PROCEDURE GetFirstATC (  RefDICOT_ATC_IRIS 	OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
	   			 			   	  Ret					OUT	NUMBER)
	   			 IS
	   BEGIN

	   		Ret := GetFirstATC(RefDICOT_ATC_IRIS);
	   END GetFirstATC;

	   FUNCTION GetFirstATC (  RefDICOT_ATC_IRIS 	OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER IS
	   BEGIN

		OPEN GetFirstATC.RefDICOT_ATC_IRIS FOR
		SELECT NULL ID_DICOT_ATC_IRIS, '' CODE, 'CLASSEMENT ATC' LIBELLE, 1 HASCHILD
		  FROM DUAL;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetFirstATC%');
--         COMMIT;
-------------------------------------------------------------

	   	RETURN 1;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLCODE;

	   END GetFirstATC;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetATCs_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   PROCEDURE GetATCs_txt ( LIBELLE         	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
						   Ret					OUT NUMBER)
	   			 IS
	   BEGIN
	   		Ret := GetATCs_txt(LIBELLE, RefDICOT_ATC_IRIS);
	   END GetATCs_txt;

	   FUNCTION GetATCs_txt ( LIBELLE         	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER IS

	   BEGIN

		     OPEN GetATCs_txt.RefDICOT_ATC_IRIS FOR
		   SELECT a.ID_DICOT_ATC_IRIS, a.CodeATC Code, a.LIBATC LIBELLE,
		   		  DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1) HasChild
		     FROM DICOT_ATC_IRIS b, DICOT_ATC_IRIS a
		    WHERE UPPER(TRANSLATE(a.LIBATC, Avidal_Pubres.ch1, Avidal_Pubres.ch2)) LIKE UPPER(TRANSLATE(GetATCs_txt.LIBELLE, Avidal_Pubres.ch1, Avidal_Pubres.ch2))
		      AND b.DIC_ID_DICOT_ATC_IRIS (+)= a.ID_DICOT_ATC_IRIS
		 GROUP BY a.ID_DICOT_ATC_IRIS, a.CodeATC, a.LIBATC, DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1)
     ORDER BY Code;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetATCs_txt%');
--         COMMIT;
-------------------------------------------------------------

	   	RETURN 1;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLCODE;

	   END GetATCs_txt;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetATC_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   PROCEDURE GetATC_id ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.Id_DICOT_ATC_IRIS	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
						   Ret					OUT NUMBER)
	   			 IS
	   BEGIN
	   		Ret := GetATC_id(ID_DICOT_ATC_IRIS, RefDICOT_ATC_IRIS);
	   END GetATC_id;

	   FUNCTION GetATC_id ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.Id_DICOT_ATC_IRIS	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER IS

	   BEGIN

		     OPEN GetATC_id.RefDICOT_ATC_IRIS FOR
		   SELECT a.ID_DICOT_ATC_IRIS, a.CodeATC Code, a.LIBATC LIBELLE,
		   		  DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1) HasChild
		     FROM DICOT_ATC_IRIS a, DICOT_ATC_IRIS b
		    WHERE a.id_dicoT_ATC_IRIS = GetATC_id.ID_DICOT_ATC_IRIS
		      AND b.DIC_ID_DICOT_ATC_IRIS (+)= a.ID_DICOT_ATC_IRIS
		 GROUP BY a.ID_DICOT_ATC_IRIS,  a.CodeATC, a.LIBATC, DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1);
-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetATC_id%');
--         COMMIT;
-------------------------------------------------------------

	   	RETURN 1;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLCODE;

	   END GetATC_id;

	   PROCEDURE GetATC_txt ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
						   Ret					OUT NUMBER)
	   			 IS
	   BEGIN
	   		Ret := GetATC_txt(ID_DICOT_ATC_IRIS, RefDICOT_ATC_IRIS);
	   END GetATC_txt;

	   FUNCTION GetATC_txt ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER IS

	   BEGIN

		     OPEN GetATC_txt.RefDICOT_ATC_IRIS FOR
		   SELECT a.ID_DICOT_ATC_IRIS, a.CodeATC Code, a.LIBATC LIBELLE,
		   		  DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1) HasChild
		     FROM DICOT_ATC_IRIS a, DICOT_ATC_IRIS b
		    WHERE FormatcodeDicot_ATC_IRIS(a.LIBELLE) = GetATC_txt.ID_DICOT_ATC_IRIS
		      AND b.DIC_ID_DICOT_ATC_IRIS (+)= a.ID_DICOT_ATC_IRIS
		 GROUP BY a.ID_DICOT_ATC_IRIS, a.CodeATC, a.LIBATC, DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1);

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetATC_txt%');
--         COMMIT;
-------------------------------------------------------------

	   	RETURN 1;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLCODE;

	   END GetATC_txt;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetATCAncester_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   PROCEDURE GetATCAncester_id ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.Id_DICOT_ATC_IRIS	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
						   Ret					OUT NUMBER)
	   			 IS
	   BEGIN
	   		Ret := GetATCAncester_id(ID_DICOT_ATC_IRIS, RefDICOT_ATC_IRIS);
	   END GetATCAncester_id;

	   FUNCTION GetATCAncester_id ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.Id_DICOT_ATC_IRIS	 DEFAULT NULL,
	   				   	   		   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER IS

	   BEGIN

		     OPEN GetATCAncester_id.RefDICOT_ATC_IRIS FOR
			SELECT a.ID_DICOT_ATC_IRIS, a.CodeATC Code, a.LIBATC LIBELLE,
	   		  DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1) HasChild
		     FROM DICOT_ATC_IRIS a, DICOT_ATC_IRIS b
		    WHERE a.DIC_ID_DICOT_ATC_IRIS IS NULL
			AND  a.id_dicoT_ATC_IRIS IN (SELECT id_dicoT_ATC_IRIS FROM DICOT_ATC_IRIS
				  					   	  		  CONNECT BY PRIOR dic_id_dicoT_ATC_IRIS = id_dicoT_ATC_IRIS
				  								  START WITH id_dicoT_ATC_IRIS = GetATCAncester_id.ID_DICOT_ATC_IRIS)
			AND b.dic_id_dicoT_ATC_IRIS(+) = a.id_dicoT_ATC_IRIS
			GROUP BY a.ID_DICOT_ATC_IRIS, a.CodeATC, a.LIBATC, DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1);

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetATCAncester_id%');
--         COMMIT;
-------------------------------------------------------------
	   	RETURN 1;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLCODE;

	   END GetATCAncester_id;

	   PROCEDURE GetATCAncester_txt ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
						   Ret					OUT NUMBER)
	   			 IS
	   BEGIN
	   		Ret := GetATCAncester_txt(ID_DICOT_ATC_IRIS, RefDICOT_ATC_IRIS);
	   END GetATCAncester_txt;

	   FUNCTION GetATCAncester_txt ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   		   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER IS

	   BEGIN

		     OPEN GetATCAncester_txt.RefDICOT_ATC_IRIS FOR
			SELECT a.ID_DICOT_ATC_IRIS, a.CodeATC Code, a.LIBATC LIBELLE,
	   		  DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1) HasChild
		     FROM DICOT_ATC_IRIS a, DICOT_ATC_IRIS b
		    WHERE a.DIC_ID_DICOT_ATC_IRIS IS NULL
			AND  a.id_dicoT_ATC_IRIS IN (SELECT id_dicoT_ATC_IRIS FROM DICOT_ATC_IRIS
				  					   	  		  CONNECT BY PRIOR dic_id_dicoT_ATC_IRIS = id_dicoT_ATC_IRIS
				  								  START WITH a.CodeATC = GetATCAncester_txt.ID_DICOT_ATC_IRIS)
			AND b.dic_id_dicoT_ATC_IRIS(+) = a.id_dicoT_ATC_IRIS
			GROUP BY a.ID_DICOT_ATC_IRIS, a.CodeATC, a.LIBATC, DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1);
-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetATCAncester_txt%');
--         COMMIT;
-------------------------------------------------------------

	   	RETURN 1;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLCODE;

	   END GetATCAncester_txt;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetATCaParent
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   PROCEDURE GetATCParent_id ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.Id_DICOT_ATC_IRIS	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
						   Ret					OUT NUMBER)
	   			 IS
	   BEGIN
	   		Ret := GetATCParent_id(ID_DICOT_ATC_IRIS, RefDICOT_ATC_IRIS);
	   END GetATCParent_id;

	   FUNCTION GetATCParent_id ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.Id_DICOT_ATC_IRIS	 DEFAULT NULL,
	   				   	   		   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER IS

	   BEGIN

		   OPEN GetATCParent_id.RefDICOT_ATC_IRIS FOR
		   SELECT a.ID_DICOT_ATC_IRIS, a.CodeATC Code, a.LIBATC LIBELLE,
		   		  DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1) HasChild
		     FROM DICOT_ATC_IRIS a, DICOT_ATC_IRIS b
			WHERE a.id_dicoT_ATC_IRIS = ( SELECT dic_id_dicoT_ATC_IRIS
	  					  	  		  	  FROM 	 DICOT_ATC_IRIS
	  					  	  		  	  WHERE  ID_DICOT_ATC_IRIS = GetATCParent_id.ID_DICOT_ATC_IRIS)
		      AND b.DIC_ID_DICOT_ATC_IRIS (+)= a.ID_DICOT_ATC_IRIS
		 GROUP BY a.ID_DICOT_ATC_IRIS,  a.CodeATC, a.LIBATC, DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1);
-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetATCParent_id%');
--         COMMIT;
-------------------------------------------------------------


	   	RETURN 1;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLCODE;

	   END GetATCParent_id;

	   PROCEDURE GetATCParent_txt ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
						   Ret					OUT NUMBER)
	   			 IS
	   BEGIN
	   		Ret := GetATCParent_txt(ID_DICOT_ATC_IRIS, RefDICOT_ATC_IRIS);
	   END GetATCParent_txt;

	   FUNCTION GetATCParent_txt ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   		   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER IS

	   BEGIN

		   OPEN GetATCParent_txt.RefDICOT_ATC_IRIS FOR
		   SELECT a.ID_DICOT_ATC_IRIS, a.CodeATC Code, a.LIBATC LIBELLE,
		   		  DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1) HasChild
		     FROM DICOT_ATC_IRIS a, DICOT_ATC_IRIS b
			WHERE a.id_dicoT_ATC_IRIS = ( SELECT dic_id_dicoT_ATC_IRIS
	  					  	  		  	  FROM 	 DICOT_ATC_IRIS
	  					  	  		  	  WHERE  a.CodeATC = GetATCParent_txt.ID_DICOT_ATC_IRIS)
		      AND b.DIC_ID_DICOT_ATC_IRIS (+)= a.ID_DICOT_ATC_IRIS
		 GROUP BY a.ID_DICOT_ATC_IRIS,  a.CodeATC, a.LIBATC, DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1);

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetATCParent_txt%');
--         COMMIT;
-------------------------------------------------------------


	   	RETURN 1;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLCODE;

	   END GetATCParent_txt;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetATCChild
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   PROCEDURE GetATCChild_id ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.Id_DICOT_ATC_IRIS	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
						   Ret					OUT NUMBER)
	   			 IS
	   BEGIN
	   		Ret := GetATCChild_id(ID_DICOT_ATC_IRIS, RefDICOT_ATC_IRIS);
	   END GetATCChild_id;

	   FUNCTION GetATCChild_id ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.Id_DICOT_ATC_IRIS	 DEFAULT NULL,
	   				   	   		   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER IS

	   BEGIN

	   IF ID_DICOT_ATC_IRIS IS NULL THEN

		   OPEN GetATCChild_id.RefDICOT_ATC_IRIS FOR
		   SELECT a.ID_DICOT_ATC_IRIS,  a.CodeATC Code, a.LIBATC LIBELLE,
		   		  DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1) HasChild
		     FROM DICOT_ATC_IRIS a, DICOT_ATC_IRIS b
			WHERE a.dic_id_dicoT_ATC_IRIS IS NULL
		      AND b.DIC_ID_DICOT_ATC_IRIS (+)= a.ID_DICOT_ATC_IRIS
		 GROUP BY a.ID_DICOT_ATC_IRIS,  a.CodeATC, a.LIBATC, DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1);

	   ELSE

		   OPEN GetATCChild_id.RefDICOT_ATC_IRIS FOR
		   SELECT a.ID_DICOT_ATC_IRIS, a.CodeATC Code, a.LIBATC LIBELLE,
		   		  DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1) HasChild
		     FROM DICOT_ATC_IRIS a, DICOT_ATC_IRIS b
			WHERE a.dic_id_dicoT_ATC_IRIS = GetATCChild_id.ID_DICOT_ATC_IRIS
		      AND b.DIC_ID_DICOT_ATC_IRIS (+)= a.ID_DICOT_ATC_IRIS
		 GROUP BY a.ID_DICOT_ATC_IRIS, a.DIC_ID_DICOT_ATC_IRIS, a.CodeATC, a.LIBATC, DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1);
	   END IF;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetATCChild_id%');
--         COMMIT;
-------------------------------------------------------------


	   	RETURN 1;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLCODE;

	   END GetATCChild_id;

	   PROCEDURE GetATCChild_txt ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
						   Ret					OUT NUMBER)
	   			 IS
	   BEGIN
	   		Ret := GetATCChild_txt(ID_DICOT_ATC_IRIS, RefDICOT_ATC_IRIS);
	   END GetATCChild_txt;

	   FUNCTION GetATCChild_txt ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   		   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER IS

	   BEGIN

	   IF ID_DICOT_ATC_IRIS IS NULL THEN

		   OPEN GetATCChild_txt.RefDICOT_ATC_IRIS FOR
		   SELECT a.ID_DICOT_ATC_IRIS, a.CodeATC Code, a.LIBATC LIBELLE,
		   		  DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1) HasChild
		     FROM DICOT_ATC_IRIS a, DICOT_ATC_IRIS b
			WHERE a.dic_id_dicoT_ATC_IRIS IS NULL
		      AND b.DIC_ID_DICOT_ATC_IRIS (+)= a.ID_DICOT_ATC_IRIS
		 GROUP BY a.ID_DICOT_ATC_IRIS, a.CodeATC, a.LIBATC, DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1);

	   ELSE

		   OPEN GetATCChild_txt.RefDICOT_ATC_IRIS FOR
		   SELECT a.ID_DICOT_ATC_IRIS, a.CodeATC Code, a.LIBATC LIBELLE,
		   		  DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1) HasChild
		     FROM DICOT_ATC_IRIS a, DICOT_ATC_IRIS b, DICOT_ATC_IRIS c
			WHERE a.dic_id_dicoT_ATC_IRIS = c.ID_DICOT_ATC_IRIS
			  AND c.CodeATC = GetATCChild_txt.ID_DICOT_ATC_IRIS
		      AND b.DIC_ID_DICOT_ATC_IRIS (+)= a.ID_DICOT_ATC_IRIS
		 GROUP BY a.ID_DICOT_ATC_IRIS, a.DIC_ID_DICOT_ATC_IRIS,  a.CodeATC, a.LIBATC, DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1);
	   END IF;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetATCChild_txt%');
--         COMMIT;
-------------------------------------------------------------

	   	RETURN 1;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLCODE;

	   END GetATCChild_txt;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetATCSpes
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   PROCEDURE GetATCSpes_id ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.Id_DICOT_ATC_IRIS	 DEFAULT NULL,
	   				   	 	   RefSPECIALITE	OUT Specialite_Pubres.SPECIALITECurTyp,
						   Ret					OUT NUMBER)
	   			 IS
	   BEGIN
	   		Ret := GetATCSpes_id(ID_DICOT_ATC_IRIS, RefSpecialite);
	   END GetATCSpes_id;

	   FUNCTION GetATCSpes_id ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.Id_DICOT_ATC_IRIS	 DEFAULT NULL,
	   				   	 	   RefSPECIALITE	OUT Specialite_Pubres.SPECIALITECurTyp)
	   			RETURN NUMBER IS

	   BEGIN
		OPEN GetATCSpes_id.RefSPECIALITE FOR
		SELECT b.Id_Specialite, b.Bvalid,
		       b.Bencours, b.Nomuser, b.Denomspe,
		       b.Forme, b.Dosage, b.complement,
		       b.Commammposo, b.Reserve, b.Inferieurage,
		       b.Unitinf, b.Superieurage, b.Unifsup,
		       b.Inferieurpoids, b.Superieurpoids, b.Denomamm,
		       b.Numdosamm, b.Specategorie, b.Source,
		       b.Datesource, b.Remarques, b.Dcreat,
		       b.Dmodif, b.Drevis
		  FROM SPECIALITE b, SPEPHARMACODYNAMIE c, DICOT_ATC_IRIS a
		 WHERE a.ID_DICOT_ATC_IRIS = GetATCSpes_id.ID_DICOT_ATC_IRIS
		   AND a.LIBELLE = c.ATC_IRIS
		   AND b.ID_SPECIALITE = c.ID_SPECIALITE;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetATCSpes_id%');
--         COMMIT;
-------------------------------------------------------------

	   	RETURN 1;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLCODE;

	   END GetATCSpes_id;

	   PROCEDURE GetATCSpes_txt ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	 	   RefSPECIALITE	OUT Specialite_Pubres.SPECIALITECurTyp,
						   Ret					OUT NUMBER)
	   			 IS
	   BEGIN
	   		Ret := GetATCSpes_txt(ID_DICOT_ATC_IRIS, RefSpecialite);
	   END GetATCSpes_txt;

	   FUNCTION GetATCSpes_txt ( ID_DICOT_ATC_IRIS	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	 	   RefSPECIALITE	OUT Specialite_Pubres.SPECIALITECurTyp)
	   			RETURN NUMBER IS

	   BEGIN
		OPEN GetATCSpes_txt.RefSPECIALITE FOR
		SELECT b.Id_Specialite, b.Bvalid,
		       b.Bencours, b.Nomuser, b.Denomspe,
		       b.Forme, b.Dosage, b.complement,
		       b.Commammposo, b.Reserve, b.Inferieurage,
		       b.Unitinf, b.Superieurage, b.Unifsup,
		       b.Inferieurpoids, b.Superieurpoids, b.Denomamm,
		       b.Numdosamm, b.Specategorie, b.Source,
		       b.Datesource, b.Remarques, b.Dcreat,
		       b.Dmodif, b.Drevis
		  FROM SPECIALITE b, SPEPHARMACODYNAMIE c,DICOT_ATC_IRIS a
		 WHERE a.codeatc = GetATCSpes_txt.ID_DICOT_ATC_IRIS
		   AND a.LIBELLE = c.ATC_IRIS
		   AND b.ID_SPECIALITE = c.ID_SPECIALITE;
-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetATCSpes_txt%');
--         COMMIT;
-------------------------------------------------------------
	   	RETURN 1;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLCODE;

	   END GetATCSpes_txt;

 -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetATCs_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   PROCEDURE GetATCsCode_txt ( LIBELLE         	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp,
						   Ret					OUT NUMBER)
	   			 IS
	   BEGIN
	   		Ret := GetATCsCode_txt(LIBELLE, RefDICOT_ATC_IRIS);
	   END GetATCsCode_txt;

	   FUNCTION GetATCsCode_txt ( LIBELLE         	IN  DicoT_ATC_IRIS_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   RefDICOT_ATC_IRIS  OUT DicoT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp)
	   			RETURN NUMBER IS

	   BEGIN

		     OPEN GetATCsCode_txt.RefDICOT_ATC_IRIS FOR
		   SELECT a.ID_DICOT_ATC_IRIS, a.CodeATC Code, a.LIBATC LIBELLE,
		   		  DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1) HasChild
		     FROM DICOT_ATC_IRIS b, DICOT_ATC_IRIS a
		    WHERE UPPER(TRANSLATE(FormatcodeDicot_ATC_IRIS(a.LIBELLE), Avidal_Pubres.ch1, Avidal_Pubres.ch2)) LIKE UPPER(TRANSLATE(GetATCsCode_txt.LIBELLE, Avidal_Pubres.ch1, Avidal_Pubres.ch2))
		      AND b.DIC_ID_DICOT_ATC_IRIS (+)= a.ID_DICOT_ATC_IRIS
		 GROUP BY a.ID_DICOT_ATC_IRIS, a.CodeATC, a.LIBATC, DECODE(b.id_dicoT_ATC_IRIS, NULL, 0,1)
     ORDER BY Code;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetATCsCode_txt%');
--         COMMIT;
-------------------------------------------------------------

	   	RETURN 1;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLCODE;

	   END GetATCsCode_txt;


-- ====================================================================
-- Fin de package
-- ====================================================================
END Avidal_Classe_ATC;
/
CREATE OR REPLACE PACKAGE Avidal_Classe_Thera IS
-- ====================================================================
-- Script     : AVIDAL_CLASSE_THERA    Type : Package
-- Objet      : Ressources Select tables
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:37
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================


	   PROCEDURE GetFirstThera (  RefDICOCOMCLASSIRIS OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3,
	   			 			   	  Ret				  OUT NUMBER);
--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles Entrées
--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	   PROCEDURE GetTheras_txt ( LIBELLE				 IN  Dicocomclassiris_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	    RefDICOCOMCLASSIRIS  OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3,
	   			 			   	  Ret				  OUT NUMBER);

	   PROCEDURE GetThera_id ( ID_DICOCOMCLASSIRIS	IN  Dicocomclassiris_Pubres.Id_DICOCOMCLASSIRIS	 DEFAULT NULL,
	   				   	   RefDICOCOMCLASSIRIS  OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3,
	   			 			   	  Ret				  OUT NUMBER);

	   PROCEDURE GetTheraAncester_id ( ID_DICOCOMCLASSIRIS	IN  Dicocomclassiris_Pubres.Id_DICOCOMCLASSIRIS	 DEFAULT NULL,
	   				   	   RefDICOCOMCLASSIRIS  OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3,
	   			 			   	  Ret				  OUT NUMBER);

	   PROCEDURE GetTheraParent_id ( ID_DICOCOMCLASSIRIS	IN  Dicocomclassiris_Pubres.Id_DICOCOMCLASSIRIS	 DEFAULT NULL,
	   				   	   		  RefDICOCOMCLASSIRIS  OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3,
	   			 			   	  Ret				  OUT NUMBER);

	   PROCEDURE GetTheraChild_id ( ID_DICOCOMCLASSIRIS	IN  Dicocomclassiris_Pubres.Id_DICOCOMCLASSIRIS	 DEFAULT NULL,
	   				   	   		RefDICOCOMCLASSIRIS  OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3,
	   			 			   	  Ret				  OUT NUMBER);

	   PROCEDURE GetTheraSpes_id ( ID_DICOCOMCLASSIRIS	IN  Dicocomclassiris_Pubres.Id_DICOCOMCLASSIRIS	 DEFAULT NULL,
	   				   	 	   RefSPECIALITE	OUT Specialite_Pubres.SPECIALITECurTyp,
	   			 			   	  Ret				  OUT NUMBER);
---------------------------------------------------------------------------------------------------------------------
	   FUNCTION FormatLibDicocomclassiris ( LIBELLE	IN  Dicocomclassiris_Pubres.LIBELLE)
	   			RETURN VARCHAR2;
	   PRAGMA RESTRICT_REFERENCES(FormatLibDicocomclassiris,WNDS);

--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles Entrées
--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   -- =====================================================================
   -- Function		  : GetFirstThera
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   FUNCTION GetFirstThera (  RefDICOCOMCLASSIRIS OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3)
	   			RETURN NUMBER;
	   PRAGMA RESTRICT_REFERENCES(GetFirstThera,WNDS,WNPS,RNPS);

   -- =====================================================================
   -- Function		  : GetTheras
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   FUNCTION GetTheras_txt ( LIBELLE				 IN  Dicocomclassiris_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	    RefDICOCOMCLASSIRIS  OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3)
	   			RETURN NUMBER;
	   --Pragma Restrict_References(GetTheras);

   -- =====================================================================
   -- Function		  : GetThera
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   FUNCTION GetThera_id ( ID_DICOCOMCLASSIRIS	IN  Dicocomclassiris_Pubres.Id_DICOCOMCLASSIRIS	 DEFAULT NULL,
	   				   	   RefDICOCOMCLASSIRIS  OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3)
	   			RETURN NUMBER;
	   PRAGMA RESTRICT_REFERENCES(GetThera_id,WNDS);

   -- =====================================================================
   -- Function		  : GetTheraAncester
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   FUNCTION GetTheraAncester_id ( ID_DICOCOMCLASSIRIS	IN  Dicocomclassiris_Pubres.Id_DICOCOMCLASSIRIS	 DEFAULT NULL,
	   				   	   RefDICOCOMCLASSIRIS  OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3)
	   			RETURN NUMBER ;
	   PRAGMA RESTRICT_REFERENCES(GetTheraAncester_id, WNDS);

   -- =====================================================================
   -- Function		  : GetTheraParent
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   FUNCTION GetTheraParent_id ( ID_DICOCOMCLASSIRIS	IN  Dicocomclassiris_Pubres.Id_DICOCOMCLASSIRIS	 DEFAULT NULL,
	   				   	   		  RefDICOCOMCLASSIRIS  OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3)
	   			RETURN NUMBER ;
	   PRAGMA RESTRICT_REFERENCES(GetTheraParent_id, WNDS);

   -- =====================================================================
   -- Function		  : GetTheraChild
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   FUNCTION GetTheraChild_id ( ID_DICOCOMCLASSIRIS	IN  Dicocomclassiris_Pubres.Id_DICOCOMCLASSIRIS	 DEFAULT NULL,
	   				   	   		RefDICOCOMCLASSIRIS  OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3)
	   			RETURN NUMBER ;
	   PRAGMA RESTRICT_REFERENCES(GetTheraChild_id, WNDS);


   -- =====================================================================
   -- Function		  : GetTheraSpes
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   FUNCTION GetTheraSpes_id ( ID_DICOCOMCLASSIRIS	IN  Dicocomclassiris_Pubres.Id_DICOCOMCLASSIRIS	 DEFAULT NULL,
	   				   	 	   RefSPECIALITE	OUT Specialite_Pubres.SPECIALITECurTyp)
	   			RETURN NUMBER ;
	   PRAGMA RESTRICT_REFERENCES(GetTheraSpes_id, WNDS,WNPS,RNPS);


-- ====================================================================
-- Fin de package
-- ====================================================================
END Avidal_Classe_Thera;
/

CREATE OR REPLACE PACKAGE BODY Avidal_Classe_Thera IS
-- ====================================================================
-- Script     : AVIDAL_CLASSE_THERA    Type : Package Body
-- Objet      : Ressources Select tables
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:39
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : FormatLibDicocomclassiris
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------

	   FUNCTION FormatLibDicocomclassiris ( LIBELLE	IN  Dicocomclassiris_Pubres.LIBELLE)
	   			RETURN VARCHAR2 IS

	   r Dicocomclassiris_Pubres.LIBELLE;

	   BEGIN

	   	  SELECT LTRIM (DECODE(SUBSTR(UPPER(libelle), 1,3), 'ZZ_', SUBSTR(libelle, INSTR(libelle, '\')+1, DECODE(INSTR(libelle, '\',1,2),0,255, INSTR(libelle, '\',1,2)-INSTR(libelle, '\')-2)), libelle)) INTO r
		  FROM dual;

		  RETURN r;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLERRM;

	   END FormatLibDicocomclassiris;


  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetFirstThera
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   PROCEDURE GetFirstThera (  RefDICOCOMCLASSIRIS 	OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3,
	   			 			   	  Ret					OUT	NUMBER)
	   			 IS
	   BEGIN

	   		Ret := GetFirstThera(RefDICOCOMCLASSIRIS);
	   END GetFirstThera;

	   FUNCTION GetFirstThera (  RefDICOCOMCLASSIRIS 	OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3)
	   			RETURN NUMBER IS
	   BEGIN

		OPEN GetFirstThera.RefDICOCOMCLASSIRIS FOR
		SELECT NULL ID_DICOCOMCLASSIRIS, 0 DIC_ID_DICOCOMCLASSIRIS, 'CLASSEMENT THERAPEUTIQUE' LIBELLE, 0 ORDRE, 1 HASCHILD
		  FROM DUAL;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetFirstThera%');
--         COMMIT;
-------------------------------------------------------------

	   	RETURN 1;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLCODE;

	   END GetFirstThera;

--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles Entrées
--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetTheras
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   PROCEDURE GetTheras_txt ( LIBELLE         	IN  Dicocomclassiris_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   RefDICOCOMCLASSIRIS  OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3,
						   Ret					OUT NUMBER)
	   			 IS
	   BEGIN
	   		Ret := GetTheras_txt(LIBELLE, RefDICOCOMCLASSIRIS);
	   END GetTheras_txt;

	   FUNCTION GetTheras_txt ( LIBELLE         	IN  Dicocomclassiris_Pubres.LIBELLE	 DEFAULT NULL,
	   				   	   RefDICOCOMCLASSIRIS  OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3)
	   			RETURN NUMBER IS

	   BEGIN

		     OPEN GetTheras_txt.RefDICOCOMCLASSIRIS FOR
		   SELECT a.ID_DICOCOMCLASSIRIS, null DIC_ID_DICOCOMCLASSIRIS, FormatLibDicocomclassiris(a.LIBELLE) LIBELLE,
		   		  a.ORDRE, DECODE(b.id_dicocomclassiris, NULL, 0,1) HASCHILD
		     FROM DICOCOMCLASSIRIS b, DICOCOMCLASSIRIS a
		    WHERE UPPER(TRANSLATE(FormatLibDicocomclassiris(a.LIBELLE), Avidal_Pubres.ch1, Avidal_Pubres.ch2)) LIKE UPPER(TRANSLATE(GetTheras_txt.LIBELLE, Avidal_Pubres.ch1, Avidal_Pubres.ch2))
		      AND b.DIC_ID_DICOCOMCLASSIRIS (+)= a.ID_DICOCOMCLASSIRIS
		 GROUP BY a.ID_DICOCOMCLASSIRIS, a.DIC_ID_DICOCOMCLASSIRIS, a.LIBELLE, a.ORDRE,
		   		  DECODE(b.id_dicocomclassiris, NULL, 0,1);

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetTheras_txt%');
--         COMMIT;
-------------------------------------------------------------
	   	RETURN 1;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLCODE;

	   END GetTheras_txt;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetThera
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   PROCEDURE GetThera_id ( ID_DICOCOMCLASSIRIS	IN  Dicocomclassiris_Pubres.Id_DICOCOMCLASSIRIS	 DEFAULT NULL,
	   				   	   RefDICOCOMCLASSIRIS  OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3,
						   Ret					OUT NUMBER)
	   			 IS
	   BEGIN
	   		Ret := GetThera_id(ID_DICOCOMCLASSIRIS, RefDICOCOMCLASSIRIS);
	   END GetThera_id;

	   FUNCTION GetThera_id ( ID_DICOCOMCLASSIRIS	IN  Dicocomclassiris_Pubres.Id_DICOCOMCLASSIRIS	 DEFAULT NULL,
	   				   	   RefDICOCOMCLASSIRIS  OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3)
	   			RETURN NUMBER IS

	   BEGIN

		     OPEN GetThera_id.RefDICOCOMCLASSIRIS FOR
		   SELECT a.ID_DICOCOMCLASSIRIS, null DIC_ID_DICOCOMCLASSIRIS, FormatLibDicocomclassiris(a.LIBELLE) LIBELLE,
		   		  a.ORDRE, DECODE(b.id_dicocomclassiris, NULL, 0,1) HASCHILD
		     FROM DICOCOMCLASSIRIS a, DICOCOMCLASSIRIS b
		    WHERE a.id_dicocomclassiris = GetThera_id.ID_DICOCOMCLASSIRIS
		      AND b.DIC_ID_DICOCOMCLASSIRIS (+)= a.ID_DICOCOMCLASSIRIS
		 GROUP BY a.ID_DICOCOMCLASSIRIS, a.DIC_ID_DICOCOMCLASSIRIS, a.LIBELLE, a.ORDRE,
		   		  DECODE(b.id_dicocomclassiris, NULL, 0,1);

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetThera_id%');
--         COMMIT;
-------------------------------------------------------------

	   	RETURN 1;
		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLCODE;

	   END GetThera_id;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetTheraAncester
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   PROCEDURE GetTheraAncester_id ( ID_DICOCOMCLASSIRIS	IN  Dicocomclassiris_Pubres.Id_DICOCOMCLASSIRIS	 DEFAULT NULL,
	   				   	   RefDICOCOMCLASSIRIS  OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3,
						   Ret					OUT NUMBER)
	   			 IS
	   BEGIN
	   		Ret := GetTheraAncester_id(ID_DICOCOMCLASSIRIS, RefDICOCOMCLASSIRIS);
	   END GetTheraAncester_id;

	   FUNCTION GetTheraAncester_id ( ID_DICOCOMCLASSIRIS	IN  Dicocomclassiris_Pubres.Id_DICOCOMCLASSIRIS	 DEFAULT NULL,
	   				   	   		   RefDICOCOMCLASSIRIS  OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3)
	   			RETURN NUMBER IS

	   BEGIN

		     OPEN GetTheraAncester_id.RefDICOCOMCLASSIRIS FOR
			SELECT a.ID_DICOCOMCLASSIRIS, null DIC_ID_DICOCOMCLASSIRIS, FormatLibDicocomclassiris(a.LIBELLE) LIBELLE,
	   		  a.ORDRE, DECODE(b.id_dicocomclassiris, NULL, 0,1) HASCHILD
		     FROM DICOCOMCLASSIRIS a, DICOCOMCLASSIRIS b
		    WHERE a.DIC_ID_DICOCOMCLASSIRIS IS NULL
			AND  a.id_dicocomclassiris IN (SELECT id_dicocomclassiris FROM DICOCOMCLASSIRIS
				  					   	  		  CONNECT BY PRIOR dic_id_dicocomclassiris = id_dicocomclassiris
				  								  START WITH id_dicocomclassiris = GetTheraAncester_id.ID_DICOCOMCLASSIRIS)
			AND b.dic_id_dicocomclassiris(+) = a.id_dicocomclassiris
			GROUP BY a.ID_DICOCOMCLASSIRIS, a.DIC_ID_DICOCOMCLASSIRIS, a.LIBELLE, a.ORDRE,
		   		  DECODE(b.id_dicocomclassiris, NULL, 0,1);

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetTheraAncester_id%');
--         COMMIT;
-------------------------------------------------------------

  	RETURN 1;
		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLCODE;

	   END GetTheraAncester_id;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetTheraParent
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   PROCEDURE GetTheraParent_id ( ID_DICOCOMCLASSIRIS	IN  Dicocomclassiris_Pubres.Id_DICOCOMCLASSIRIS	 DEFAULT NULL,
	   				   	   RefDICOCOMCLASSIRIS  OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3,
						   Ret					OUT NUMBER)
	   			 IS
	   BEGIN
	   		Ret := GetTheraParent_id(ID_DICOCOMCLASSIRIS, RefDICOCOMCLASSIRIS);
	   END GetTheraParent_id;

	   FUNCTION GetTheraParent_id ( ID_DICOCOMCLASSIRIS	IN  Dicocomclassiris_Pubres.Id_DICOCOMCLASSIRIS	 DEFAULT NULL,
	   				   	   		   RefDICOCOMCLASSIRIS  OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3)
	   			RETURN NUMBER IS

	   BEGIN

		   OPEN GetTheraParent_id.RefDICOCOMCLASSIRIS FOR
		   SELECT a.ID_DICOCOMCLASSIRIS, null DIC_ID_DICOCOMCLASSIRIS, FormatLibDicocomclassiris(a.LIBELLE) LIBELLE,
		   		  a.ORDRE, DECODE(b.id_dicocomclassiris, NULL, 0,1) HasChild
		     FROM DICOCOMCLASSIRIS a, DICOCOMCLASSIRIS b
			WHERE a.id_dicocomclassiris = ( SELECT dic_id_dicocomclassiris
	  					  	  		  	  FROM 	 DICOCOMCLASSIRIS
	  					  	  		  	  WHERE  ID_DICOCOMCLASSIRIS = GetTheraParent_id.ID_DICOCOMCLASSIRIS)
		      AND b.DIC_ID_DICOCOMCLASSIRIS (+)= a.ID_DICOCOMCLASSIRIS
		 GROUP BY a.ID_DICOCOMCLASSIRIS, a.DIC_ID_DICOCOMCLASSIRIS, a.LIBELLE, a.ORDRE,
		   		  DECODE(b.id_dicocomclassiris, NULL, 0,1);

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetTheraParent_id%');
--         COMMIT;
-------------------------------------------------------------

	   	RETURN 1;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLCODE;

	   END GetTheraParent_id;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetTheraChild
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   PROCEDURE GetTheraChild_id ( ID_DICOCOMCLASSIRIS	IN  Dicocomclassiris_Pubres.Id_DICOCOMCLASSIRIS	 DEFAULT NULL,
	   				   	   RefDICOCOMCLASSIRIS  OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3,
						   Ret					OUT NUMBER)
	   			 IS
	   BEGIN
	   		Ret := GetTheraChild_id(ID_DICOCOMCLASSIRIS, RefDICOCOMCLASSIRIS);
	   END GetTheraChild_id;

	   FUNCTION GetTheraChild_id ( ID_DICOCOMCLASSIRIS	IN  Dicocomclassiris_Pubres.Id_DICOCOMCLASSIRIS	 DEFAULT NULL,
	   				   	   		   RefDICOCOMCLASSIRIS  OUT Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp3)
	   			RETURN NUMBER IS

	   BEGIN

	   IF ID_DICOCOMCLASSIRIS IS NULL THEN

		   OPEN GetTheraChild_id.RefDICOCOMCLASSIRIS FOR
		   SELECT a.ID_DICOCOMCLASSIRIS, null DIC_ID_DICOCOMCLASSIRIS, FormatLibDicocomclassiris(a.LIBELLE) LIBELLE,
		   		  a.ORDRE, DECODE(b.id_dicocomclassiris, NULL, 0,1) HASCHILD
		     FROM DICOCOMCLASSIRIS a, DICOCOMCLASSIRIS b
			WHERE a.dic_id_dicocomclassiris IS NULL
		      AND b.DIC_ID_DICOCOMCLASSIRIS (+)= a.ID_DICOCOMCLASSIRIS
		 GROUP BY a.ID_DICOCOMCLASSIRIS, a.DIC_ID_DICOCOMCLASSIRIS, a.LIBELLE, a.ORDRE,
		   		  DECODE(b.id_dicocomclassiris, NULL, 0,1)
		 ORDER BY a.ORDRE;

	   ELSE

		   OPEN GetTheraChild_id.RefDICOCOMCLASSIRIS FOR
		   SELECT a.ID_DICOCOMCLASSIRIS, null DIC_ID_DICOCOMCLASSIRIS, FormatLibDicocomclassiris(a.LIBELLE) LIBELLE,
		   		  a.ORDRE, DECODE(b.id_dicocomclassiris, NULL, 0,1) HASCHILD
		     FROM DICOCOMCLASSIRIS a, DICOCOMCLASSIRIS b
			WHERE a.dic_id_dicocomclassiris = GetTheraChild_id.ID_DICOCOMCLASSIRIS
		      AND b.DIC_ID_DICOCOMCLASSIRIS (+)= a.ID_DICOCOMCLASSIRIS
		 GROUP BY a.ID_DICOCOMCLASSIRIS, a.DIC_ID_DICOCOMCLASSIRIS, a.LIBELLE, a.ORDRE,
		   		  DECODE(b.id_dicocomclassiris, NULL, 0,1)
		 ORDER BY a.ORDRE;
	   END IF;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetTheraChild_id%');
--         COMMIT;
-------------------------------------------------------------

	   	RETURN 1;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLCODE;

	   END GetTheraChild_id;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetTheraSpes
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   PROCEDURE GetTheraSpes_id ( ID_DICOCOMCLASSIRIS	IN  Dicocomclassiris_Pubres.Id_DICOCOMCLASSIRIS	 DEFAULT NULL,
	   				   	 	   RefSPECIALITE	OUT Specialite_Pubres.SPECIALITECurTyp,
						   Ret					OUT NUMBER)
	   			 IS
	   BEGIN
	   		Ret := GetTheraSpes_id (ID_DICOCOMCLASSIRIS, RefSpecialite);
	   END GetTheraSpes_id ;

	   FUNCTION GetTheraSpes_id  ( ID_DICOCOMCLASSIRIS	IN  Dicocomclassiris_Pubres.Id_DICOCOMCLASSIRIS	 DEFAULT NULL,
	   				   	 	   RefSPECIALITE	OUT Specialite_Pubres.SPECIALITECurTyp)
	   			RETURN NUMBER IS

	   BEGIN
		OPEN GetTheraSpes_id .RefSPECIALITE FOR
		SELECT b.Id_Specialite, b.Bvalid,
		       b.Bencours, b.Nomuser, b.Denomspe,
		       b.Forme, b.Dosage, b.complement,
		       b.Commammposo, b.Reserve, b.Inferieurage,
		       b.Unitinf, b.Superieurage, b.Unifsup,
		       b.Inferieurpoids, b.Superieurpoids, b.Denomamm,
		       b.Numdosamm, b.Specategorie, b.Source,
		       b.Datesource, b.Remarques, b.Dcreat,
		       b.Dmodif, b.Drevis
		  FROM SPECIALITE b, SPECLASSIRIS a
		 --FROM SPECIALITE b, SPEINDIC a
		 WHERE a.ID_DICOCOMCLASSIRIS = GetTheraSpes_id .ID_DICOCOMCLASSIRIS
		   AND b.ID_SPECIALITE = a.ID_SPECIALITE;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--     Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetTheraSpes_id%');
--         COMMIT;
-------------------------------------------------------------
	   	RETURN 1;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLCODE;

	   END GetTheraSpes_id ;

-- ====================================================================
-- Fin de package
-- ====================================================================
END Avidal_Classe_Thera;
/
CREATE OR REPLACE PACKAGE AVIDAL_CLOSECURSEUR AS

   Type TypeCurseurAFermer  Is Ref Cursor ;

   -- ===========================================================
   -- Procédure permettant de fermer un curseur passé en paramètre
   -- CurseurAFermer le curseur à fermer
   -- Ret 1 si exécution correcte si non le sqlcode
   -- ===========================================================

   Procedure FermerCuseur (CurseurAFermer In TypeCurseurAFermer,
                           Ret            Out Number);
   Function FermerCuseur ( CurseurAFermer In TypeCurseurAFermer)
	   			  Return Number;

END AVIDAL_CLOSECURSEUR;
/

CREATE OR REPLACE PACKAGE BODY AVIDAL_CLOSECURSEUR AS

  Procedure FermerCuseur (CurseurAFermer In TypeCurseurAFermer, Ret	Out Number)
  is

  Begin
    Ret:= FermerCuseur ( CurseurAFermer);
  end FermerCuseur;

  Function FermerCuseur ( CurseurAFermer In TypeCurseurAFermer)
  Return Number Is

  Begin
    if FermerCuseur.CurseurAFermer%isopen then
      Close FermerCuseur.CurseurAFermer;
    end if;
-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%FermerCuseur%');
--         COMMIT;
-------------------------------------------------------------

        Return 1;
		EXCEPTION
		When Others Then
			  Return SQLCODE;
  end FermerCuseur;

END AVIDAL_CLOSECURSEUR;
/
CREATE OR REPLACE package AVIDAL_CONTRAINTES is
-----------------------------------------------------------------------
  -- Author  : MALIKA LAGHLA
  -- Created : 06/03/2003 15:37:08
  -- Purpose : Active ou désactive les contraintes d'intégrité
-----------------------------------------------------------------------

  -- Public function and procedure declarations

     procedure Active_contraintes(Own  in Varchar2,
                             err_code out Varchar2);

     procedure Desactive_contraintes(Own  in Varchar2,
                               err_code out Varchar2);



end AVIDAL_CONTRAINTES;
/

CREATE OR REPLACE package body AVIDAL_CONTRAINTES is

  -- Function and procedure implementations
 procedure Active_contraintes(Own  in Varchar2,
                              err_code out Varchar2)
 is


 	w_p_string varchar2(254);
	w_cursor_id integer;
	w_p_exec integer;

cursor get_cons is
    select owner, table_name,constraint_name
    from all_constraints
    where constraint_type='R'
     and status = 'DISABLED'
   and owner = UPPER(Own);

con_rec get_cons%ROWTYPE;

begin

  w_cursor_id:=dbms_sql.open_cursor;
   FOR con_rec IN get_cons LOOP
      w_p_string := 'alter table '||con_rec.owner||'.'||con_rec.table_name||
                    ' enable constraint '||con_rec.constraint_name;

   --     dbms_output.put_line(w_p_string);
      dbms_sql.parse(w_cursor_id,w_p_string,1);
      w_p_exec := dbms_sql.execute(w_cursor_id);
   END LOOP;
   dbms_sql.close_cursor(w_cursor_id);

     EXCEPTION
      WHEN others THEN
       err_code := SQLERRM;

/*        dbms_output.put_line('Error Processing '
                           ||con_rec.owner||'.'||con_rec.table_name||' '
                           ||con_rec.constraint_name);
        dbms_output.put_line(SQLERRM);
pour tester les clefs activées  lancer cet requette

select status,count(*) from all_constraints
where constraint_type='R' and owner = UPPER('sa_test')
group by status;
*/


end Active_contraintes;


procedure Desactive_contraintes(Own  in Varchar2,
                               err_code out Varchar2)

IS
	w_p_string varchar2(254);
	w_cursor_id integer;
	w_p_exec integer;

cursor get_cons is
    select owner, table_name,constraint_name
    from all_constraints
    where constraint_type='R'
     and status = 'ENABLED'
     and owner = UPPER(own);

con_rec get_cons%ROWTYPE;

begin
   w_cursor_id:=dbms_sql.open_cursor;
   FOR con_rec IN get_cons LOOP
      w_p_string := 'alter table '||con_rec.owner||'.'||con_rec.table_name||
                    ' disable constraint '||con_rec.constraint_name;
 --     dbms_output.put_line(w_p_string);
      dbms_sql.parse(w_cursor_id,w_p_string,1);
      w_p_exec := dbms_sql.execute(w_cursor_id);
   END LOOP;
   dbms_sql.close_cursor(w_cursor_id);
/*

pour tester les clefs disactivées  lancer cet requette

select status,count(*) from all_constraints
where constraint_type='R' and owner = UPPER('sa_test')
group by status;

*/
EXCEPTION
      WHEN others THEN
       err_code := SQLERRM;

end Desactive_contraintes;



end AVIDAL_CONTRAINTES;
/
CREATE OR REPLACE PACKAGE AVIDAL_CONTRE_INDICATION AS
-- ====================================================================
-- Script     : AVIDAL_CONTRE_INDICATION    Type : Package
-- Objet      : Ressources Select tables
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:37
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

	   Procedure GetFirstCIndic (  RefT_CI 	Out T_CI_Pubres.T_CICurTyp2,
	   			 				   Ret		Out	Number);
--////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles entrées
--////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	   Procedure RGetCIndics_txt( LIBELLE	In  T_CI_Pubres.LIBELLE	 Default Null,
	   				   	    RefT_CI Out T_CI_Pubres.T_CICurTyp2,
	   			 				   Ret		Out	Number);
	   Procedure GetCindic_id ( ID_T_CI	In  T_CI_Pubres.Id_T_CI	 Default Null,
	   				   	    RefT_CI Out T_CI_Pubres.T_CICurTyp2,
	   			 				   Ret		Out	Number);
	   Procedure GetCIndicAncesters_id ( ID_T_CI	In  T_CI_Pubres.Id_T_CI	 Default Null,
	   				   	    	   	 RefT_CI 	Out T_CI_Pubres.T_CICurTyp2,
	   			 				   Ret		Out	Number);
	   Procedure GetCIndicParent_id ( ID_T_CI	In  T_CI_Pubres.Id_T_CI	 Default Null,
	   				   	    	  RefT_CI 	Out T_CI_Pubres.T_CICurTyp2,
	   			 				   Ret		Out	Number);
	   Procedure GetCIndicChild_id ( ID_T_CI	In  T_CI_Pubres.Id_T_CI	 Default Null,
	   				   	       	 RefT_CI Out T_CI_Pubres.T_CICurTyp2,
	   			 				   Ret		Out	Number);
	   Procedure GetCIndicSpes_id ( ID_T_CI			In  T_CI_Pubres.Id_T_CI	 Default Null,
	   				   	 	  	RefSPECIALITE	Out SPECIALITE_Pubres.SPECIALITECurTyp,
	   			 				   Ret		Out	Number);
   -- =====================================================================
   -- Function		  : GetFirstCIndic
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   Function GetFirstCIndic (  RefT_CI 	Out T_CI_Pubres.T_CICurTyp2)
	   			Return Number;
	     Pragma Restrict_References(GetFirstCIndic,WNDS,WNPS,RNPS);

--////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles entrées
--////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   -- =====================================================================
   -- Function		  : RGetCIndics
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   Function RGetCIndics_txt( LIBELLE	In  T_CI_Pubres.LIBELLE	 Default Null,
	   				   	    RefT_CI Out T_CI_Pubres.T_CICurTyp2)
	   			Return Number;
	   --Pragma Restrict_References(RGetCindics,WNDS);
   -- =====================================================================
   -- Function		  : GetCindic
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   Function GetCindic_id ( ID_T_CI	In  T_CI_Pubres.Id_T_CI	 Default Null,
	   				   	    RefT_CI Out T_CI_Pubres.T_CICurTyp2)
	   			Return Number;
	    Pragma Restrict_References(GetCindic_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function		  : GetCIndicAncesters
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   Function GetCIndicAncesters_id ( ID_T_CI	In  T_CI_Pubres.Id_T_CI	 Default Null,
	   				   	    	   	 RefT_CI 	Out T_CI_Pubres.T_CICurTyp2)
	   			Return Number ;
	    Pragma Restrict_References(GetCIndicAncesters_id, WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function		  : GetCIndicParent
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   Function GetCIndicParent_id ( ID_T_CI	In  T_CI_Pubres.Id_T_CI	 Default Null,
	   				   	    	  RefT_CI 	Out T_CI_Pubres.T_CICurTyp2)
	   			Return Number ;
	    Pragma Restrict_References(GetCIndicParent_id, WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function		  : GetCIndicChild
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   Function GetCIndicChild_id ( ID_T_CI	In  T_CI_Pubres.Id_T_CI	 Default Null,
	   				   	       	 RefT_CI Out T_CI_Pubres.T_CICurTyp2)
	   			Return Number ;
	    Pragma Restrict_References(GetCIndicParent_id, WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function		  : GetCIndicSpes
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   Function GetCIndicSpes_id ( ID_T_CI			In  T_CI_Pubres.Id_T_CI	 Default Null,
	   				   	 	  	RefSPECIALITE	Out SPECIALITE_Pubres.SPECIALITECurTyp)
	   			Return Number ;
	     Pragma Restrict_References(GetCIndicSpes_id, WNDS,WNPS,RNPS);


-- ====================================================================
-- Fin de package
-- ====================================================================
END AVIDAL_CONTRE_INDICATION;
/

CREATE OR REPLACE PACKAGE BODY AVIDAL_CONTRE_INDICATION AS

-- ====================================================================
-- Script     : AVIDAL_CONTRE_INDICATION    Type : Package Body
-- Objet      : Ressources Select tables
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:39
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetFirstCIndic
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   Procedure GetFirstCIndic (  RefT_CI 	Out T_CI_Pubres.T_CICurTyp2,
	   			 				   Ret		Out	Number)
				Is
	   Begin
	   		Ret:=GetFirstCIndic (  RefT_CI);
	   End GetFirstCIndic;
	   Function GetFirstCIndic (  RefT_CI 	Out T_CI_Pubres.T_CICurTyp2)
	   			Return Number Is
	   Begin
		Open GetFirstCIndic.RefT_CI For
		Select 0, 'CONTRE-INDICATION', null, sysdate, 'V', null, 1
		  From DUAL;
-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetFirstCIndic%');
--         COMMIT;
-------------------------------------------------------------


	   	Return 1;
		EXCEPTION
		When Others Then
			 Return SQLCODE;
	   End GetFirstCIndic;

--////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles entrées
--////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : RGetCIndics
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   Procedure RGetCIndics_txt( LIBELLE	In  T_CI_Pubres.LIBELLE	 Default Null,
	   				   	     RefT_CI Out T_CI_Pubres.T_CICurTyp2,
							 Ret	 Out Number)
	   			 Is
	   Begin
	   		Ret := RGetCIndics_txt( LIBELLE, RefT_CI);
	   End RGetCIndics_txt;
	   Function RGetCIndics_txt( LIBELLE	In  T_CI_Pubres.LIBELLE	 Default Null,
	   				   	     RefT_CI Out T_CI_Pubres.T_CICurTyp2)
	   			Return Number Is
	   Begin
		   Open RGetCIndics_txt.RefT_CI For
		   Select a.ID_T_CI, a.LIBELLE, a.TEXTE, a.CREATION, a.VALIDATION,
		   		  REMARQUES, DECODE(b.ID_T_CI_F, Null, 0, 1)
		     From t_ci a, HIERARCHIECI_REL b
			Where UPPER(TRANSLATE(a.LIBELLE, AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2)) LIKE UPPER(TRANSLATE(RGetCIndics_txt.LIBELLE, AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
			  And b.ID_T_CI_P(+) = a.ID_T_CI
			UNION
		    Select a.ID_T_CI, c.libelle||' = '||a.LIBELLE, a.TEXTE, a.CREATION, a.VALIDATION,
	   			   a.REMARQUES, DECODE(b.ID_T_CI_F, Null, 0, 1)
			  From T_SYNONYCI c, SYNONYCI_REL d, t_ci a, HIERARCHIECI_REL b
			 Where UPPER(TRANSLATE(c.LIBELLE, AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2)) LIKE UPPER(TRANSLATE(RGetCIndics_txt.LIBELLE, AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
			   And d.ID_T_SYNONYCI  = c.ID_T_SYNONYCI
			   And a.ID_T_CI        = d.ID_T_CI
			   And b.ID_T_CI_P(+)   = a.ID_T_CI
			   Order by 2;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%RGetCIndics_txt%');
--         COMMIT;
-------------------------------------------------------------

Return 1;
		EXCEPTION
		When Others Then
			 Return SQLCODE;
	   End RGetCIndics_txt;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCindic
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   Procedure GetCindic_id ( ID_T_CI	In  T_CI_Pubres.Id_T_CI	 Default Null,
	   				   	    RefT_CI Out T_CI_Pubres.T_CICurTyp2,
							Ret		Out	Number)
	   			Is
	   Begin
	   		Ret := GetCindic_id ( ID_T_CI, RefT_CI);
	   End GetCindic_id;
	   Function GetCindic_id ( ID_T_CI	In  T_CI_Pubres.Id_T_CI	 Default Null,
	   				   	    RefT_CI Out T_CI_Pubres.T_CICurTyp2)
	   			Return Number Is
	   r number;
	   Cursor C_HIERARCHIECI_REL(ID_T_CI In T_CI_Pubres.Id_T_CI) Is
	   Select count(1) Nb
	     From HIERARCHIECI_REL
		Where HIERARCHIECI_REL.ID_T_CI_P = C_HIERARCHIECI_REL.ID_T_CI;
	   R_HIERARCHIECI_REL C_HIERARCHIECI_REL%RowType;
	   Begin
		Open C_HIERARCHIECI_REL(GetCindic_id.ID_T_CI);
		Fetch C_HIERARCHIECI_REL Into R_HIERARCHIECI_REL;
		If R_HIERARCHIECI_REL.Nb = 0 Then
		   Open GetCindic_id.RefT_CI For
		   Select ID_T_CI, LIBELLE, TEXTE, CREATION, VALIDATION, REMARQUES, 0
		   	 From T_CI
		    Where (ID_T_CI = GetCindic_id.ID_T_CI Or GetCindic_id.ID_T_CI Is null);
		Else
		   Open GetCindic_id.RefT_CI For
		   Select ID_T_CI, LIBELLE, TEXTE, CREATION, VALIDATION, REMARQUES, 1
		   	 From T_CI
		    Where (ID_T_CI = GetCindic_id.ID_T_CI Or GetCindic_id.ID_T_CI Is null);
		End if;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCindic_id%');
--         COMMIT;
-------------------------------------------------------------

	   	Return 1;
		EXCEPTION
		When Others Then
			 Return SQLCODE;
	   End GetCindic_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCIndicAncesters_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   Procedure GetCIndicAncesters_id ( ID_T_CI	In  T_CI_Pubres.Id_T_CI	 Default Null,
	   				   	    	   	 RefT_CI 	Out T_CI_Pubres.T_CICurTyp2,
									 Ret		Out	Number)
	   			Is
	   Begin
	   	Ret := GetCIndicAncesters_id ( ID_T_CI, RefT_CI);
	   End GetCIndicAncesters_id;

	   Function GetCIndicAncesters_id ( ID_T_CI	In  T_CI_Pubres.Id_T_CI	 Default Null,
	   			   	    	   	 RefT_CI 	Out T_CI_Pubres.T_CICurTyp2)
	   			Return Number Is
	   Begin
		Open GetCIndicAncesters_id.RefT_CI For
		Select ID_T_CI, LIBELLE, TEXTE, CREATION, VALIDATION, REMARQUES, 1
		  From T_CI
		    Where (ID_T_CI = GetCIndicAncesters_id.ID_T_CI Or GetCIndicAncesters_id.ID_T_CI Is null)
			And not exists(select id_t_ci_f from HIERARCHIECI_REL
			               where id_t_ci_f=id_t_ci)
			and validation = 'V';
-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCIndicAncesters_id%');
--         COMMIT;
-------------------------------------------------------------

	 	Return 1;
		EXCEPTION
		When Others Then
			 Return SQLCODE;
	   End GetCIndicAncesters_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCIndicParent_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   Procedure GetCIndicParent_id ( ID_T_CI	In  T_CI_Pubres.Id_T_CI	 Default Null,
	   				   	    	  RefT_CI 	Out T_CI_Pubres.T_CICurTyp2,
								  Ret		Out	Number)
				Is
	   Begin
	   		Ret := GetCIndicParent_id ( ID_T_CI, RefT_CI);
	   End GetCIndicParent_id;
	   Function GetCIndicParent_id ( ID_T_CI	In  T_CI_Pubres.Id_T_CI	 Default Null,
	   				   	    RefT_CI Out T_CI_Pubres.T_CICurTyp2)
	   			Return Number Is
	   Begin
		   Open GetCIndicParent_id.RefT_CI For
		   Select ID_T_CI, LIBELLE, TEXTE, T_CI.CREATION, VALIDATION, REMARQUES, 0
		   	 From T_CI, HIERARCHIECI_REL
		    Where ID_T_CI_F = GetCIndicParent_id.ID_T_CI
			  And ID_T_CI = ID_T_CI_P;
-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCIndicParent_id%');
--         COMMIT;
-------------------------------------------------------------

	   	Return 1;
		EXCEPTION
		When Others Then
			 Return SQLCODE;
	   End GetCIndicParent_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCIndicChild
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   Procedure GetCIndicChild_id ( ID_T_CI	In  T_CI_Pubres.Id_T_CI	 Default Null,
	   				   	       	 RefT_CI Out T_CI_Pubres.T_CICurTyp2,
								 Ret	 Out Number)
	   			Is
	   Begin
	   		Ret := GetCIndicChild_id ( ID_T_CI, RefT_CI);
	   End GetCIndicChild_id;
	   Function GetCIndicChild_id ( ID_T_CI	In  T_CI_Pubres.Id_T_CI	 Default Null,
	   				   	       	 RefT_CI Out T_CI_Pubres.T_CICurTyp2)
	   			Return Number Is
	   Begin
		   Open GetCIndicChild_id.RefT_CI For
		   Select ID_T_CI, LIBELLE, TEXTE, T_CI.CREATION, VALIDATION,
		   		  REMARQUES, DECODE(HIERARCHIECI_REL.ID_T_CI_F, Null, 0, 1)
		     From t_ci, HIERARCHIECI_REL
			Where ID_T_CI In ( Select ID_T_CI_F
	  		  	   		  	   From HIERARCHIECI_REL
	  		  	   			   Where HIERARCHIECI_REL.ID_T_CI_P = GetCIndicChild_id.ID_T_CI)
			  And  HIERARCHIECI_REL.ID_T_CI_P(+) = t_ci.ID_T_CI
		 Group By ID_T_CI, LIBELLE, TEXTE, T_CI.CREATION, VALIDATION,
		 	   	  REMARQUES, DECODE(HIERARCHIECI_REL.ID_T_CI_F, Null, 0, 1);
-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCIndicChild_id%');
--         COMMIT;
-------------------------------------------------------------

	   	Return 1;
		EXCEPTION
		When Others Then
			 Return SQLCODE;
	   End GetCIndicChild_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetCIndicSpes_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   Procedure GetCIndicSpes_id ( ID_T_CI			In  T_CI_Pubres.Id_T_CI	 Default Null,
	   				   	 	  	RefSPECIALITE	Out SPECIALITE_Pubres.SPECIALITECurTyp,
								Ret				Out	Number)
								Is
	   Begin
	   		Ret := GetCIndicSpes_id ( ID_T_CI, RefSPECIALITE);
	   End GetCIndicSpes_id;
	   Function GetCIndicSpes_id ( ID_T_CI			In  T_CI_Pubres.Id_T_CI	 Default Null,
	   				   	 	  	RefSPECIALITE	Out SPECIALITE_Pubres.SPECIALITECurTyp)
	   			Return Number Is
	   Begin
		Open GetCIndicSpes_id.RefSPECIALITE For
		Select b.Id_Specialite, b.Bvalid,
		       b.Bencours, b.Nomuser, b.Denomspe,
		       b.Forme, b.Dosage, b.complement,
		       b.Commammposo, b.Reserve, b.Inferieurage,
		       b.Unitinf, b.Superieurage, b.Unifsup,
		       b.Inferieurpoids, b.Superieurpoids, b.Denomamm,
		       b.Numdosamm, b.Specategorie, b.Source,
		       b.Datesource, b.Remarques, b.Dcreat,
		       b.Dmodif, b.Drevis
		  From SPECIALITE b, SPECI a
		 Where a.ID_T_CI = GetCIndicSpes_id.ID_T_CI
		   And b.ID_SPECIALITE = a.ID_SPECIALITE;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCIndicSpes_id%');
--         COMMIT;
-------------------------------------------------------------

	   	Return 1;
		EXCEPTION
		When Others Then
			 Return SQLCODE;
	   End GetCIndicSpes_id;

-- ====================================================================
-- Fin de package
-- ====================================================================
END AVIDAL_CONTRE_INDICATION;
/
CREATE OR REPLACE Package AVIDAL_EXPLIVRET AS

   -- ======================================================================================
   -- Script      : AVIDAL_EXPLIVRET    Type : Package
   -- Objet       :
   -- Owner       : VIDAL
   -- Création    : 06/06/2001
   -- Auteur      : MHA K2/PixelPark
   -- Généré par  :
   -- Modifié par :
   --
   -- ======================================================================================

   Procedure ExpSpePresentationHop(Rep Varchar2, Fich Varchar2);

   sep_table   Varchar2(255) := 'EXP_NOUVELLE_TABLE';
End;
/

CREATE OR REPLACE PACKAGE BODY      "AVIDAL_EXPLIVRET"  AS
   -- ======================================================================================
   -- Script      : AVIDAL_EXPLIVRET    Type : Package
   -- Objet       :
   -- Owner       : VIDAL
   -- Création    : 06/06/2001
   -- Auteur      : MHA K2/PixelPark
   -- Généré par  :
   -- Modifié par :
   --
   -- ======================================================================================
   Procedure ExpSpePresentationHop(Rep Varchar2, Fich Varchar2) Is
      id_file UTL_FILE.FILE_TYPE;
   Begin
      id_file := UTL_FILE.FOpen(Rep, Fich, 'w');
      --
      -- Export de la table SPEPRESENTATIONHOP
      --
      For r_spe In ( Select   IDORGANISME            ,
                              ID_SPEPRESENTATIONHOP  ,
                              NOM                    ,
                              PRESENTATION           ,
                              FORME                  ,
                              DOSAGE                 ,
                              CIP                    ,
                              UCD                    ,
                              LABO
                     From SPEPRESENTATIONHOP
                   )
      Loop
         UTL_FILE.Put_Line(id_file, r_spe.idorganisme);
         UTL_FILE.Put_Line(id_file, r_spe.id_spepresentationhop);
         UTL_FILE.Put_Line(id_file, r_spe.nom);
         UTL_FILE.Put_Line(id_file, r_spe.presentation);
         UTL_FILE.Put_Line(id_file, r_spe.forme);
         UTL_FILE.Put_Line(id_file, r_spe.dosage);
         UTL_FILE.Put_Line(id_file, r_spe.cip);
         UTL_FILE.Put_Line(id_file, r_spe.ucd);
         UTL_FILE.Put_Line(id_file, r_spe.labo);
      End Loop;
      UTL_FILE.Put_Line(id_file, AVIDAL_EXPLIVRET.sep_table);
      --
      -- Export de la table T_SUBHOP
      --
      For r_tsub In ( Select  IDORGANISME ,
                              ID_T_SUBHOP ,
                              LIBELLE
                      From T_SUBHOP
                    )
      Loop
         UTL_FILE.Put_Line(id_file, r_tsub.idorganisme);
         UTL_FILE.Put_Line(id_file, r_tsub.id_t_subhop);
         UTL_FILE.Put_Line(id_file, r_tsub.libelle);
      End Loop;
      UTL_FILE.Put_Line(id_file, AVIDAL_EXPLIVRET.sep_table);
      --
      -- Export de la table LIVRETHOP
      --
      For r_livr In (  Select IDORGANISME            ,
                              ID_SPEPRESENTATIONHOP  ,
                              PRIX_TTC_F             ,
                              PRIX_TTC_E             ,
                              DISPO                  ,
                              COMMENTAIRE            ,
							  CODHOPITAL
                       From LIVRETHOP
                    )
      Loop
         UTL_FILE.Put_Line(id_file, r_livr.idorganisme);
         UTL_FILE.Put_Line(id_file, r_livr.id_spepresentationhop);
         UTL_FILE.Put_Line(id_file, r_livr.prix_ttc_f);
         UTL_FILE.Put_Line(id_file, r_livr.prix_ttc_e);
         UTL_FILE.Put_Line(id_file, r_livr.dispo);
         UTL_FILE.Put_Line(id_file, r_livr.commentaire);
		 UTL_FILE.Put_Line(id_file, r_livr.codhopital);
      End Loop;
      UTL_FILE.Put_Line(id_file, AVIDAL_EXPLIVRET.sep_table);
      --
      -- Export de la table LIVRETVIDAL
      --
      For r_livr In (  Select IDORGANISME            ,
                              ID_SPEPRESENTATION     ,
                              PRIX_TTC_F             ,
                              PRIX_TTC_E             ,
                              DISPO                  ,
                              COMMENTAIRE            ,
							  CODHOPITAL
                       From LIVRETVIDAL
                    )
      Loop
         UTL_FILE.Put_Line(id_file, r_livr.idorganisme);
         UTL_FILE.Put_Line(id_file, r_livr.id_spepresentation);
         UTL_FILE.Put_Line(id_file, r_livr.prix_ttc_f);
         UTL_FILE.Put_Line(id_file, r_livr.prix_ttc_e);
         UTL_FILE.Put_Line(id_file, r_livr.dispo);
         UTL_FILE.Put_Line(id_file, r_livr.commentaire);
		 UTL_FILE.Put_Line(id_file, r_livr.codhopital);
      End Loop;
      UTL_FILE.Put_Line(id_file, AVIDAL_EXPLIVRET.sep_table);
      --
      -- Export de la table COMPOHOP
      --
      For r_comp In (   Select   IDORGANISME           ,
                                 ID_SPEPRESENTATIONHOP ,
                                 ID_T_SUBHOP
                        From COMPOHOP
                    )
      Loop
         UTL_FILE.Put_Line(id_file, r_comp.idorganisme);
         UTL_FILE.Put_Line(id_file, r_comp.id_spepresentationhop);
         UTL_FILE.Put_Line(id_file, r_comp.id_t_subhop);
      End Loop;
      UTL_FILE.Put_Line(id_file, AVIDAL_EXPLIVRET.sep_table);
      --
      -- Export de la table COMPOVIDAL
      --
      For r_comp In (   Select   IDORGANISME           ,
                                 ID_SPEPRESENTATIONHOP ,
                                 ID_T_SUB
                        From COMPOVIDAL
                    )
      Loop
         UTL_FILE.Put_Line(id_file, r_comp.idorganisme);
         UTL_FILE.Put_Line(id_file, r_comp.id_spepresentationhop);
         UTL_FILE.Put_Line(id_file, r_comp.id_t_sub);
      End Loop;
      UTL_FILE.FClose(id_file);
   Exception
      When UTL_FILE.INVALID_PATH Then
         Dbms_OutPut.Put_Line('Chemin invalid');
      When UTL_FILE.INVALID_MODE Then
         Dbms_OutPut.Put_Line('Mode invalide');
      When UTL_FILE.INVALID_OPERATION Then
         Dbms_OutPut.Put_Line('Opération invalide');
   End;
End;
/
CREATE OR REPLACE Package AVIDAL_GENERIC Is

-- ====================================================================
-- Script     : AVIDAL_GENERIC    Type : Package
-- Objet      : Ressources Select tables
-- Owner      : VIDAL
-- Création   : 09/10/2000
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Nicolas QUERREC
-- ====================================================================
   -- =====================================================================
   -- Définition des variables et des Constantes
   -- =====================================================================

   Id		   Number;
   Terme	   Varchar2(255);
   Typ		   Number;

--/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles Entrées
--////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	   Procedure Get_id(  Id     	  In  AVIDAL_GENERIC.Id%TYPE,
	   				  Typ		  In  AVIDAL_GENERIC.Typ%Type,
	   				  Ref_Result  Out AVIDAL_PUBRES.GenericRc,
					  Ret		  Out Number);

   	   Procedure Get_txt(  Terme    	  In  AVIDAL_GENERIC.Terme%TYPE,
	   				  Typ		  In  AVIDAL_GENERIC.Typ%Type,
	   				  Ref_Result  Out AVIDAL_PUBRES.GenericRc,
					  Ret		  Out Number);

	   Procedure GetParent_id(  Id     	   In  AVIDAL_GENERIC.Id%TYPE,
	   				  		Typ		   In  AVIDAL_GENERIC.Typ%Type,
	   				  		Ref_Result Out AVIDAL_PUBRES.GenericRc,
					  		Ret		  Out Number);

	   Procedure GetChild_id(  Id     	  In  AVIDAL_GENERIC.Id%TYPE,
	   				  	   Typ		  In  AVIDAL_GENERIC.Typ%Type,
	   				  	   Ref_Result Out AVIDAL_PUBRES.GenericRc,
					  	   Ret		  Out Number);


--/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles Entrées
--////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   -- =====================================================================
   -- Function		   : Get
   -- Purpose		   :
   -- Parameters In	   : idSP
   -- Parameters Out   :
   -- Tables utilisees :
   -- History	  	   : Created by N.Q. 10 Oct 2000
   -- =====================================================================
	   Function Get_id(  Id     	  In  AVIDAL_GENERIC.Id%TYPE,
	   				  Typ		  In  AVIDAL_GENERIC.Typ%Type,
	   				  Ref_Result  Out AVIDAL_PUBRES.GenericRc)
	   			Return Number;
	     Pragma Restrict_References(Get_id,WNDS);

   -- =====================================================================
   -- Function		   : Get
   -- Purpose		   :
   -- Parameters In	   : Terme
   -- Parameters Out   :
   -- Tables utilisees :
   -- History	  	   : Created by N.Q. 10 Oct 2000
   -- =====================================================================
   	   Function Get_txt(  Terme    	  In  AVIDAL_GENERIC.Terme%TYPE,
	   				  Typ		  In  AVIDAL_GENERIC.Typ%Type,
	   				  Ref_Result  Out AVIDAL_PUBRES.GenericRc)
	   			Return Number;
	    Pragma Restrict_References(Get_txt,WNDS);


   -- =====================================================================
   -- Function		   : GetParent
   -- Purpose		   :
   -- Parameters In	   : idSP
   -- Parameters Out   :
   -- Tables utilisees :
   -- History	  	   : Created by N.Q. 10 Oct 2000
   -- =====================================================================
   -- substance
   -- contre-indication
   -- classe-thérapeutique
   --
	   Function GetParent_id(  Id     	   In  AVIDAL_GENERIC.Id%TYPE,
	   				  		Typ		   In  AVIDAL_GENERIC.Typ%Type,
	   				  		Ref_Result Out AVIDAL_PUBRES.GenericRc)
	   			Return Number;
	     Pragma Restrict_References(Get_id,WNDS);

   -- =====================================================================
   -- Function		   : GetChild
   -- Purpose		   :
   -- Parameters In	   : idSP
   -- Parameters Out   :
   -- Tables utilisees :
   -- History	  	   : Created by N.Q. 10 Oct 2000
   -- =====================================================================
   -- substance
   -- contre-indication
   -- classe-thérapeutique
   --
	   Function GetChild_id(  Id     	  In  AVIDAL_GENERIC.Id%TYPE,
	   				  	   Typ		  In  AVIDAL_GENERIC.Typ%Type,
	   				  	   Ref_Result Out AVIDAL_PUBRES.GenericRc)
	   			Return Number;
	     Pragma Restrict_References(Get_id,WNDS);

-- ====================================================================
-- Fin de package
-- ====================================================================
End AVIDAL_GENERIC;
/

CREATE OR REPLACE Package Body AVIDAL_GENERIC Is
-- ====================================================================
-- Script     : AVIDAL_GENERIC    Type : Package
-- Objet      : Ressources Select tables
-- Owner      : VIDAL
-- Création   : 09/10/2000
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Nicolas QUERREC
-- ====================================================================

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : Get
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
--/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles Entrées
--////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	   Procedure Get_id(  Id     	  In  AVIDAL_GENERIC.ID%TYPE,
	   				  Typ		  In  AVIDAL_GENERIC.Typ%Type,
	   				  Ref_Result  Out AVIDAL_PUBRES.GenericRc,
					  Ret		  Out Number)
	   			Is
	   Begin
	   		Ret := Get_id(  Id, Typ, Ref_Result);
	   End Get_id;

	   Function Get_id(  Id     	  In  AVIDAL_GENERIC.ID%TYPE,
	   				  Typ		  In  AVIDAL_GENERIC.Typ%Type,
	   				  Ref_Result  Out AVIDAL_PUBRES.GenericRc)
	   			Return Number Is
	   Begin

	   -- Traitement des substances
	   if Get_id.Typ = 2 Then

		Open Get_id.Ref_Result For
		  Select   a.ID_T_SUB,
                   a.LIBELLE,
                   a.HOMEOPATHIE,
                   a.TEXTE,
                   a.DC,
                   a.COMPLEMENTINDEXSUB
		  From     T_SUB a
		  Where    a.ID_T_SUB = Get_id.Id
		  Order by a.ID_T_SUB;

	   -- Traitement des Classes Thérapeutiques
	   Elsif Get_id.Typ = 3 Then

		     Open Get_id.Ref_Result For
		   Select a.ID_DICOCOMCLASSIRIS,
		   		  a.DIC_ID_DICOCOMCLASSIRIS,
				  AVIDAL_CLASSE_THERA.FormatLibDicocomclassiris(a.LIBELLE),
		   		  a.ORDRE,
				  decode(b.id_dicocomclassiris, null, 0,1)
		     From dicocomclassiris a, dicocomclassiris b
		    Where a.id_dicocomclassiris = Get_id.ID
		      And b.DIC_ID_DICOCOMCLASSIRIS (+)= a.ID_DICOCOMCLASSIRIS
		 Group By a.ID_DICOCOMCLASSIRIS, a.DIC_ID_DICOCOMCLASSIRIS, a.LIBELLE, a.ORDRE,
		   		  decode(b.id_dicocomclassiris, null, 0,1);

	   -- Traitement des Laboratoires
	   Elsif Get_id.Typ = 4 Then

		      Open Get_id.Ref_Result For
		    Select ID_LABORATOIRE, LAB_ID_LABORATOIRE, LABORATOIRE,
			       ADR1, ADR2, ADR3, CP, VILLE, CEDEX, PAYS, TELEPHONE,
			       TELECOPIE, EMAIL, INTERNET, COMMENTAIRE, MORT, DCREAT, DMODIF, DREVIS
		      From LABORATOIRE
		     Where Id_LABORATOIRE = Get_id.Id;

	   -- Traitement des CIP
	   Elsif Get_id.Typ = 6 Then

		     Open Get_id.Ref_Result For
		   Select ID_SPEPRESENTATION, ID_SPECIALITE, CIP,
			      UCD, AMMEUROPE, LIEUDISPO,
			   	  CONDDISPO, LISTE, DUREEPRESCRIPTION,
			   	  PRESCRIPTIONINITIALE, PRESCRIPTIONRESERVEE,
			   	  RENOUVELRESERVE, MEDPARTIC, NATURESURVEILLANCE,
			   	  CODEREFERANTGENERIQUE, REMPLACE, SOURCEREMPLACE,
			   	  DATESOURCEREMPLACE, REMPLACEPAR, SOURCEREMPLACEPAR,
			   	  DATESOURCEREMPLACEPAR, PRIXPRODHTF, PRIXPUBLICTTCF,
			   	  PRIXPRODHTE, PRIXPUBLICTTCE, TVA, DCREAT, DMODIF,
			   	  DREVIS, CIPREFERANT
		     From SPEPRESENTATION
		    Where Id_Spepresentation = Get_id.Id;

	   -- Traitement des Contres-Indications
	   Elsif Get_id.Typ = 8 Then

		     Open Get_id.Ref_Result For
		   Select ID_T_CI, LIBELLE, TEXTE, CREATION, VALIDATION, REMARQUES, 1
		   	 From T_CI
		    Where ID_T_CI = Get_id.ID;

	   -- Traitement des RMO
	   Elsif Get_id.Typ = 11 Then
		     Open Get_id.Ref_Result For
		   Select ID_RMOCLASS, ID_THEMECOMMUN, REFERENCEIRIS, TEXTERMO, CODEJO,
		   		  REMARQUE, BREMINTERNE, DCREAT, DMODIF, DREVIS
		   	 From RMOCLASS
		    Where ID_RMOCLASS = Get_id.ID;

	   -- Traitement des Voies d'administration
	   Elsif Get_id.Typ = 13 Then
		     Open Get_id.Ref_Result For
		   Select ID_SPECIALITE, VOIE, ORDRE
		   	 From SPEVOIE
		    Where ID_SPECIALITE = Get_id.ID;

	   -- Traitement des Durées de prescription
	   Elsif Get_id.Typ = 18 Then
		     Open Get_id.Ref_Result For
		   Select ID_SPEPRESENTATION, ID_SPECIALITE, CIP, UCD, AMMEUROPE,
		   		LIEUDISPO, CONDDISPO, LISTE, DUREEPRESCRIPTION,
				  PRESCRIPTIONINITIALE, PRESCRIPTIONRESERVEE, RENOUVELRESERVE,
				  MEDPARTIC, NATURESURVEILLANCE, CODEREFERANTGENERIQUE, REMPLACE,
				  SOURCEREMPLACE, DATESOURCEREMPLACE, REMPLACEPAR,
				  SOURCEREMPLACEPAR, DATESOURCEREMPLACEPAR, PRIXPRODHTF, PRIXPUBLICTTCF,
				  PRIXPRODHTE, PRIXPUBLICTTCE, TVA, DCREAT, DMODIF, DREVIS, CIPREFERANT
		   	 From SPEPRESENTATION
		    Where ID_SPEPRESENTATION = Get_id.ID;

	   -- Traitement des compositions
	   Elsif Get_id.Typ = 23 Then
		     Open Get_id.Ref_Result For
		   Select ID_SPECIALITE, ID_SPECOMPO, FORME, NUMEROFORME, COULEURFORME,
		   		  NBCONSTITUANTSACTIFS, DCREAT, DMODIF, DREVIS
		   	 From SPECOMPO
		    Where ID_SPECOMPO = Get_id.ID;
	   End if;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%Get_id%');
--         COMMIT;
-------------------------------------------------------------


	   	Return 1;

		EXCEPTION
		When Others Then
			 Return SQLCODE;

	   End Get_id;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : Get_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   Procedure Get_txt(  Terme    	  In  AVIDAL_GENERIC.Terme%TYPE,
	   				  Typ		  In  AVIDAL_GENERIC.Typ%Type,
	   				  Ref_Result  Out AVIDAL_PUBRES.GenericRc,
					  Ret		  Out Number)
	   			Is
	   Begin
	   		Ret := Get_txt(  Terme , Typ, Ref_Result);
	   End Get_txt;

	   Function Get_txt(  Terme    	  In  AVIDAL_GENERIC.Terme%TYPE,
	   				  Typ		  In  AVIDAL_GENERIC.Typ%Type,
	   				  Ref_Result  Out AVIDAL_PUBRES.GenericRc)
	   			Return Number Is
	   Begin
	   -- Traitement des substances
	  if Get_txt.Typ = 2 Then

		 Open Get_txt.Ref_Result For
		  Select   a.ID_T_SUB,
                   a.LIBELLE,
                   a.HOMEOPATHIE,
                   a.TEXTE,
                   a.DC,
                   a.COMPLEMENTINDEXSUB
		  From     T_SUB a
		  Where    UPPER(a.LIBELLE)
		           like UPPER(Get_txt.Terme)
		  Order by a.ID_T_SUB;

	   -- Traitement des Classes Thérapeutiques
	   Elsif Get_txt.Typ = 3 Then

		     Open Get_txt.Ref_Result For
		   Select a.ID_DICOCOMCLASSIRIS,
		   		  a.DIC_ID_DICOCOMCLASSIRIS,
				  AVIDAL_CLASSE_THERA.FormatLibDicocomclassiris(a.LIBELLE),
		   		  a.ORDRE,
				  decode(b.id_dicocomclassiris, null, 0,1)
		     From dicocomclassiris a, dicocomclassiris b
		    Where AVIDAL_CLASSE_THERA.FormatLibDicocomclassiris(a.LIBELLE) LIKE
			UPPER(Get_txt.Terme)
		      And b.DIC_ID_DICOCOMCLASSIRIS (+)= a.ID_DICOCOMCLASSIRIS
		 Group By a.ID_DICOCOMCLASSIRIS, a.DIC_ID_DICOCOMCLASSIRIS, a.LIBELLE, a.ORDRE,
		   		  decode(b.id_dicocomclassiris, null, 0,1);

	   -- Traitement des Laboratoires
	  Elsif Get_txt.Typ = 4 Then

		      Open Get_txt.Ref_Result For
		    Select ID_LABORATOIRE, LAB_ID_LABORATOIRE, LABORATOIRE,
			       ADR1, ADR2, ADR3, CP, VILLE, CEDEX, PAYS, TELEPHONE,
			       TELECOPIE, EMAIL, INTERNET, COMMENTAIRE, MORT, DCREAT, DMODIF, DREVIS
		      From LABORATOIRE
		     Where UPPER(LABORATOIRE)
			 LIKE UPPER(Get_txt.Terme);

	   -- Traitement des CIP
	   Elsif Get_txt.Typ = 6 Then

		     Open Get_txt.Ref_Result For
		   Select ID_SPEPRESENTATION, ID_SPECIALITE, CIP,
			      UCD, AMMEUROPE, LIEUDISPO,
			   	  CONDDISPO, LISTE, DUREEPRESCRIPTION,
			   	  PRESCRIPTIONINITIALE, PRESCRIPTIONRESERVEE,
			   	  RENOUVELRESERVE, MEDPARTIC, NATURESURVEILLANCE,
			   	  CODEREFERANTGENERIQUE, REMPLACE, SOURCEREMPLACE,
			   	  DATESOURCEREMPLACE, REMPLACEPAR, SOURCEREMPLACEPAR,
			   	  DATESOURCEREMPLACEPAR, PRIXPRODHTF, PRIXPUBLICTTCF,
			   	  PRIXPRODHTE, PRIXPUBLICTTCE, TVA, DCREAT, DMODIF,
			   	  DREVIS, CIPREFERANT
		     From SPEPRESENTATION
		    Where CIP = Get_txt.Terme;

	   -- Traitement des Contres-Indications
	   Elsif Get_txt.Typ = 8 Then

		     Open Get_txt.Ref_Result For
		   Select ID_T_CI, LIBELLE, TEXTE, CREATION, VALIDATION, REMARQUES, 1
		   	 From T_CI
		    Where UPPER(LIBELLE)
			LIKE UPPER(Get_txt.Terme);

	   -- Traitement des RMO
	   Elsif Get_txt.Typ = 11 Then
		     Open Get_txt.Ref_Result For
		   Select ID_RMOCLASS, ID_THEMECOMMUN, REFERENCEIRIS, TEXTERMO, CODEJO,
		   		  REMARQUE, BREMINTERNE, DCREAT, DMODIF, DREVIS
		   	 From RMOCLASS
		    Where ID_RMOCLASS = Get_txt.Terme;

	   -- Traitement des Voies d'administration
	   Elsif Get_txt.Typ = 13 Then
		     Open Get_txt.Ref_Result For
		   Select ID_SPECIALITE, VOIE, ORDRE
		   	 From SPEVOIE
		    Where ID_SPECIALITE = Get_txt.Terme;

	   -- Traitement des compositions
	   Elsif Get_txt.Typ = 23 Then
		     Open Get_txt.Ref_Result For
		   Select ID_SPECIALITE, ID_SPECOMPO, FORME, NUMEROFORME, COULEURFORME,
		   		  NBCONSTITUANTSACTIFS, DCREAT, DMODIF, DREVIS
		   	 From SPECOMPO
		    Where ID_SPECOMPO = Get_txt.Terme;
	   End if;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%Get_txt%');
--         COMMIT;
-------------------------------------------------------------


	   Return 1;

		EXCEPTION
		When Others Then
			 Return SQLCODE;

	   End Get_txt;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetParent_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------

	   Procedure GetParent_id(  Id     	   In  AVIDAL_GENERIC.ID%TYPE,
	   				  		Typ		   In  AVIDAL_GENERIC.Typ%Type,
	   				  		Ref_Result Out AVIDAL_PUBRES.GenericRc,
							Ret		   Out Number)
	   			Is
	   Begin
	   		Ret := GetParent_id(  Id, Typ, Ref_Result);
	   End GetParent_id;

	   Function GetParent_id(  Id     	   In  AVIDAL_GENERIC.ID%TYPE,
	   				  		Typ		   In  AVIDAL_GENERIC.Typ%Type,
	   				  		Ref_Result Out AVIDAL_PUBRES.GenericRc)
	   			Return Number Is
	   Begin

	   -- Traitement des substances
	   if GetParent_id.Typ = 2 Then

		Open GetParent_id.Ref_Result For
          Select distinct a.ID_T_SUB,
                 a.LIBELLE,
                 a.HOMEOPATHIE,
                 a.TEXTE,
                 a.DC,
                 a.COMPLEMENTINDEXSUB,
				 1 HasChild
          From   t_sub a, coupletermeterme b
         Where  b.ID_T_SUB_F = GetParent_id.Id
		 And    a.id_t_sub = b.ID_T_SUB_P
		 Order by a.ID_T_SUB;

	   -- Traitement des Classes Thérapeutiques
	   Elsif GetParent_id.Typ = 3 Then

		     Open GetParent_id.Ref_Result For
		   Select a.ID_DICOCOMCLASSIRIS, a.DIC_ID_DICOCOMCLASSIRIS, avidal_classe_thera.FormatLibDicocomclassiris(a.LIBELLE),
		   		  a.ORDRE, decode(b.id_dicocomclassiris, null, 0,1)
		     From dicocomclassiris a, dicocomclassiris b
			where a.id_dicocomclassiris = ( select dic_id_dicocomclassiris
	  					  	  		  	  from 	 dicocomclassiris
	  					  	  		  	  WHERE  ID_DICOCOMCLASSIRIS = GetParent_id.Id)
		      And b.DIC_ID_DICOCOMCLASSIRIS (+)= a.ID_DICOCOMCLASSIRIS
		 Group By a.ID_DICOCOMCLASSIRIS, a.DIC_ID_DICOCOMCLASSIRIS, a.LIBELLE, a.ORDRE,
		   		  decode(b.id_dicocomclassiris, null, 0,1);



	   -- Traitement des Contres-Indications
	   Elsif GetParent_id.Typ = 8 Then

		     Open GetParent_id.Ref_Result For
		   Select ID_T_CI, LIBELLE, TEXTE, T_CI.CREATION, VALIDATION, REMARQUES, 0
		   	 From T_CI, HIERARCHIECI_REL
		    Where ID_T_CI_F = GetParent_id.ID
			  And ID_T_CI = ID_T_CI_P;

	   Else
	   	   Null;
	   End if;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetParent_id%');
--         COMMIT;
-------------------------------------------------------------

	   	Return 1;

		EXCEPTION
		When Others Then
			 Return SQLCODE;

	   End GetParent_id;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetChild_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   Procedure GetChild_id(  Id     	   In  AVIDAL_GENERIC.ID%TYPE,
	   				  		Typ		   In  AVIDAL_GENERIC.Typ%Type,
	   				  		Ref_Result Out AVIDAL_PUBRES.GenericRc,
							Ret		   Out Number)
	   			Is
	   Begin
	   		Ret	:= GetChild_id(  Id, Typ, Ref_Result);
	   eND GetChild_id;

	   Function GetChild_id(  Id     	   In  AVIDAL_GENERIC.ID%TYPE,
	   				  		Typ		   In  AVIDAL_GENERIC.Typ%Type,
	   				  		Ref_Result Out AVIDAL_PUBRES.GenericRc)
	   			Return Number Is
	   Begin

	   -- Traitement des substances
	   if GetChild_id.Typ = 2 Then

		Open GetChild_id.Ref_Result For
          Select distinct a.ID_T_SUB,
                 a.LIBELLE,
                 a.HOMEOPATHIE,
                 a.TEXTE,
                 a.DC,
                 a.COMPLEMENTINDEXSUB,
				 1 HasChild
          From   t_sub a, coupletermeterme b
         Where  b.ID_T_SUB_P = GetChild_id.Id
		 And    a.id_t_sub = b.ID_T_SUB_F
		 Order by a.ID_T_SUB;


	   -- Traitement des Classes Thérapeutiques
	   Elsif GetChild_id.Typ = 3 Then

		     Open GetChild_id.Ref_Result For
		   Select a.ID_DICOCOMCLASSIRIS, a.DIC_ID_DICOCOMCLASSIRIS, avidal_classe_thera.FormatLibDicocomclassiris(a.LIBELLE),
		   		  a.ORDRE, decode(b.id_dicocomclassiris, null, 0,1)
		     From dicocomclassiris a, dicocomclassiris b
			where a.dic_id_dicocomclassiris = GetChild_id.ID
		      And b.DIC_ID_DICOCOMCLASSIRIS (+)= a.ID_DICOCOMCLASSIRIS
		 Group By a.ID_DICOCOMCLASSIRIS, a.DIC_ID_DICOCOMCLASSIRIS, a.LIBELLE, a.ORDRE,
		   		  decode(b.id_dicocomclassiris, null, 0,1);


	   -- Traitement des Contres-Indications
	   Elsif GetChild_id.Typ = 8 Then

		     Open GetChild_id.Ref_Result For
		   Select ID_T_CI, LIBELLE, TEXTE, T_CI.CREATION, VALIDATION,
		   		  REMARQUES, DECODE(HIERARCHIECI_REL.ID_T_CI_F, Null, 0, 1)
		     From t_ci, HIERARCHIECI_REL
			Where ID_T_CI In ( Select ID_T_CI_F
	  		  	   		  	   From HIERARCHIECI_REL
	  		  	   			   Where HIERARCHIECI_REL.ID_T_CI_P = GetChild_id.ID)
			  And  HIERARCHIECI_REL.ID_T_CI_P(+) = t_ci.ID_T_CI
		 Group By ID_T_CI, LIBELLE, TEXTE, T_CI.CREATION, VALIDATION,
		 	   	  REMARQUES, DECODE(HIERARCHIECI_REL.ID_T_CI_F, Null, 0, 1);

	   Else
	   		 Null;
	   End if;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetChild_id%');
--         COMMIT;
-------------------------------------------------------------


	   	Return 1;

		EXCEPTION
		When Others Then
			 Return SQLCODE;

	   End GetChild_id;


-- ====================================================================
-- Fin de package
-- ====================================================================
End AVIDAL_GENERIC;
/
CREATE OR REPLACE package AVIDAL_GPE_GENERIQUE is

--**--------------------------------------------------------**--
  -- Author  : MALIKA LAGHLA
  -- Created : 13/03/2003 11:03:01
  -- Purpose : APIs permettant l'usage des Groupes Génériques
--**--------------------------------------------------------**--


  -- Public function and procedure declarations
	   Procedure GetGenGroup_txt (  Libelle      IN  GPE_GENERIQUE_PUBRES.LIBELLE	 Default Null,
	   				                 Ref_GenGroup  OUT GPE_GENERIQUE_PUBRES.GPE_GENERIQUECurTyp,
					                   Ret	         OUT Number);

	   Function GetGenGroup_txt(  Libelle       IN  GPE_GENERIQUE_PUBRES.LIBELLE	 Default Null,
	   				                    Ref_GenGroup  OUT GPE_GENERIQUE_PUBRES.GPE_GENERIQUECurTyp)
	   			Return Number;
--**--------------------------------------------------------**-----------------------------------------------
	   Procedure GetCipGenGroup_txt (  CIP      IN  GPE_GENERIQUE_PUBRES.CIP	 Default Null,
	   				                 Ref_GenGroup  OUT GPE_GENERIQUE_PUBRES.GPE_GENERIQUECurTyp,
					                   Ret	         OUT Number);

	   Function GetCipGenGroup_txt(  CIP       IN  GPE_GENERIQUE_PUBRES.CIP	 Default Null,
	   				                    Ref_GenGroup  OUT GPE_GENERIQUE_PUBRES.GPE_GENERIQUECurTyp)
	   			Return Number;
--**--------------------------------------------------------**-----------------------------------------------
     Procedure GetGenGroupCIPs_id (  ID_DICOCODEGENE   IN  GPE_GENERIQUE_PUBRES.ID_DICOCODEGENE Default Null,
	   				                 Ref_GenGroup     OUT  Spepresentation_Pubres.SPEPRESENTATIONCurTyp,
					                   Ret	         OUT Number);

	   Function GetGenGroupCIPs_id ( ID_DICOCODEGENE      IN  GPE_GENERIQUE_PUBRES.ID_DICOCODEGENE Default Null,
	   				                 Ref_GenGroup     OUT  Spepresentation_Pubres.SPEPRESENTATIONCurTyp)
	   			Return Number;
--**--------------------------------------------------------**-----------------------------------------------

     Procedure GetGenGroupTheras_id (  ID_DICOCODEGENE   IN  GPE_GENERIQUE_PUBRES.ID_DICOCODEGENE Default Null,
--	   				                 Ref_GenGroup     OUT  Spepresentation_Pubres.SPEPRESENTATIONCurRef,
	   				                 Ref_GenGroup     OUT  DICOCOMCLASSIRIS_Pubres.DICOCOMCLASSIRISCurRef,
					                   Ret	         OUT Number);

	   Function GetGenGroupTheras_id ( ID_DICOCODEGENE      IN  GPE_GENERIQUE_PUBRES.ID_DICOCODEGENE Default Null,
--	   				                 Ref_GenGroup     OUT  Spepresentation_Pubres.SPEPRESENTATIONCurRef)
	   				                 Ref_GenGroup     OUT  DICOCOMCLASSIRIS_Pubres.DICOCOMCLASSIRISCurRef)
	   			Return Number;

end AVIDAL_GPE_GENERIQUE;
/

CREATE OR REPLACE package body AVIDAL_GPE_GENERIQUE is

--**--------------------------------------------------------**--
  -- Author  : MALIKA LAGHLA
  -- Created : 13/03/2003 11:03:01
  -- Purpose : APIs permettant l'usage des Groupes Génériques
--**--------------------------------------------------------**--

     Procedure GetGenGroup_txt ( LIBELLE	    IN  GPE_GENERIQUE_PUBRES.LIBELLE	 Default Null,
	   				   	               Ref_GenGroup 	OUT GPE_GENERIQUE_PUBRES.GPE_GENERIQUECurTyp,
						                   Ret			Out	Number)
						   Is
	   Begin
	   		Ret := GetGenGroup_txt ( LIBELLE, Ref_GenGroup);
	   End GetGenGroup_txt;

	   Function GetGenGroup_txt ( LIBELLE	    IN  GPE_GENERIQUE_PUBRES.LIBELLE	 Default Null,
	   				   	              Ref_GenGroup 	OUT GPE_GENERIQUE_PUBRES.GPE_GENERIQUECurTyp)
	   			Return Number Is

	   Begin
     OPEN GetGenGroup_txt.Ref_GenGroup FOR
        SELECT
          DICOCODEGENE.ID_DICOCODEGENE,
          '' CodeGroupGen,
          'GEN' typegroupe,
          DICOCODEGENE.LIBELLE,
          '' Dosage,
          '' Forme,
          '' Voie,
          count(SPEPRESENTATION.CIP) NbElement,
          DICOCODEGENE.CODEEXPEN,
          DICOCODEGENE.CODEINDIC,
          DICOCODEGENE.CODECI,
          DICOCODEGENE.CODECIALLERGIES,
          DICOCODEGENE.CODEIAM
        FROM
          DICOCODEGENE, SPEPRESENTATION, SPECIALITE, SPEVOIE
        WHERE
          UPPER(TRANSLATE(DICOCODEGENE.LIBELLE, AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
          LIKE UPPER(TRANSLATE(GetGenGroup_txt.LIBELLE, AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
          AND DICOCODEGENE.ID_DICOCODEGENE = SPEPRESENTATION.ID_DICOCODEGENE
          AND SPECIALITE.ID_SPECIALITE = SPEPRESENTATION.ID_SPECIALITE
          AND SPECIALITE.ID_SPECIALITE = SPEVOIE.ID_SPECIALITE
        GROUP BY
          DICOCODEGENE.ID_DICOCODEGENE,
          '','GEN',
          DICOCODEGENE.LIBELLE,
          '',
          '',
          '',
          DICOCODEGENE.CODEEXPEN,
          DICOCODEGENE.CODEINDIC,
          DICOCODEGENE.CODECI,
          DICOCODEGENE.CODECIALLERGIES,
          DICOCODEGENE.CODEIAM
		 ORDER BY DICOCODEGENE.LIBELLE;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetGenGroup_txt%');
--         COMMIT;
-------------------------------------------------------------

	Return 1;

		EXCEPTION
		When Others Then
			 Return SQLCODE;

      End GetGenGroup_txt;
--**------------------------------------------------------------------------------------**--
      Procedure GetCipGenGroup_txt ( CIP	    IN  GPE_GENERIQUE_PUBRES.CIP	 Default Null,
	   				   	               Ref_GenGroup 	OUT GPE_GENERIQUE_PUBRES.GPE_GENERIQUECurTyp,
						                   Ret			Out	Number)
						   Is
	   Begin
	   		Ret := GetCipGenGroup_txt ( CIP, Ref_GenGroup);
	   End GetCipGenGroup_txt;

	   Function GetCipGenGroup_txt ( CIP	    IN  GPE_GENERIQUE_PUBRES.CIP	 Default Null,
	   				   	              Ref_GenGroup 	OUT GPE_GENERIQUE_PUBRES.GPE_GENERIQUECurTyp)
	   			Return Number Is

	   Begin
     OPEN GetCipGenGroup_txt.Ref_GenGroup FOR
        SELECT
          DICOCODEGENE.ID_DICOCODEGENE,
          '' CODEGroupGen,
          'GEN' TypeGroupe,
          DICOCODEGENE.LIBELLE,
          '' DOSAGE,
          '' FORME,
          '' VOIE,
          count(b.CIP) NbElement,
          DICOCODEGENE.CODEEXPEN,
          DICOCODEGENE.CODEINDIC,
          DICOCODEGENE.CODECI,
          DICOCODEGENE.CODECIALLERGIES,
          DICOCODEGENE.CODEIAM
        FROM
          DICOCODEGENE, SPEPRESENTATION, Spepresentation b, SPECIALITE, SPEVOIE
        WHERE
          SPEPRESENTATION.CIP = GetCIPGenGroup_txt.CIP
          AND DICOCODEGENE.ID_DICOCODEGENE = SPEPRESENTATION.ID_DICOCODEGENE
          AND DICOCODEGENE.ID_DICOCODEGENE = b.ID_DICOCODEGENE
          AND SPECIALITE.ID_SPECIALITE = SPEPRESENTATION.ID_SPECIALITE
          AND SPECIALITE.ID_SPECIALITE = SPEVOIE.ID_SPECIALITE
        GROUP BY
          DICOCODEGENE.ID_DICOCODEGENE,
          '',
          DICOCODEGENE.LIBELLE,
          '',
          '',
          '',
          DICOCODEGENE.CODEEXPEN,
          DICOCODEGENE.CODEINDIC,
          DICOCODEGENE.CODECI,
          DICOCODEGENE.CODECIALLERGIES,
          DICOCODEGENE.CODEIAM;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCipGenGroup_txt%');
--         COMMIT;
-------------------------------------------------------------


	Return 1;
		EXCEPTION
		When Others Then
			 Return SQLCODE;

      End GetCipGenGroup_txt;

--**------------------------------------------------------------------------------------**--
     Procedure GetGenGroupCIPs_id (  ID_DICOCODEGENE      IN  GPE_GENERIQUE_PUBRES.ID_DICOCODEGENE  Default Null,
	   				                 Ref_GenGroup     OUT  Spepresentation_Pubres.SPEPRESENTATIONCurTyp,
					                   Ret	         OUT Number)
						   Is
	   Begin
	   		Ret := GetGenGroupCIPs_id (ID_DICOCODEGENE, Ref_GenGroup);
	   End GetGenGroupCIPs_id;

	   Function GetGenGroupCIPs_id ( ID_DICOCODEGENE      IN  GPE_GENERIQUE_PUBRES.ID_DICOCODEGENE Default Null,
	   				                 Ref_GenGroup     OUT  Spepresentation_Pubres.SPEPRESENTATIONCurTyp)
	   			Return Number

     IS
	   Begin
          OPEN GetGenGroupCIPs_id.Ref_GenGroup FOR
             SELECT     a.Id_Spepresentation, a.Id_Specialite,
                        a.Cip, a.Ucd, a.Ammeurope,
                        a.Lieudispo, a.Conddispo,
                        a.Liste, a.Dureeprescription, a.Prescriptioninitiale,
                        a.Prescriptionreservee, a.Renouvelreserve, a.Medpartic,
                        a.Naturesurveillance, a.Codereferantgenerique, a.Remplace,
                        a.Sourceremplace, a.Datesourceremplace, a.Remplacepar,
                        a.Sourceremplacepar, a.Datesourceremplacepar, a.Prixprodhtf,
                        a.Prixpublicttcf, a.Prixprodhte, a.Prixpublicttce,
                        a.Tva, a.Dcreat, a.Dmodif,
                        a.Drevis, a.Cipreferant,
                        b.DENOMSPE||DECODE(c.Renscomp,NULL,'',' : '||c.RENSCOMP) DenomCip,
                        a.disponibilite, a.nbprise, a.priseunitaire, a.codeDispo
               FROM     SPECIALITE b, SPEPRESENTATION a, SPECONDITIONNEMENTPRIMAIRE c
               WHERE    a.Id_DICOCODEGENE           = GetGenGroupCIPs_id.Id_DICOCODEGENE
                 AND    b.Id_Specialite           = a.Id_Specialite
                 AND    c.Id_Spepresentation (+)  = a.Id_Spepresentation
                 AND    UPPER(c.Typecondprimaire (+)) = 'DENOMCIP'
               ORDER BY  Denomcip;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetGenGroupCIPs_id%');
--         COMMIT;
-------------------------------------------------------------


             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;

     End GetGenGroupCIPs_id;
--**------------------------------------------------------------------------------------**--
     Procedure GetGenGroupTheras_id (  ID_DICOCODEGENE      IN  GPE_GENERIQUE_PUBRES.ID_DICOCODEGENE  Default Null,
	   				                 Ref_GenGroup     OUT  DICOCOMCLASSIRIS_Pubres.DICOCOMCLASSIRISCurRef,
					                   Ret	         OUT Number)
						   Is
	   Begin
	   		Ret := GetGenGroupTheras_id (ID_DICOCODEGENE, Ref_GenGroup);
	   End GetGenGroupTheras_id;

	   Function GetGenGroupTheras_id ( ID_DICOCODEGENE      IN  GPE_GENERIQUE_PUBRES.ID_DICOCODEGENE Default Null,
	   				                 Ref_GenGroup     OUT  DICOCOMCLASSIRIS_Pubres.DICOCOMCLASSIRISCurRef)
	   			Return Number
     IS
     liste    varchar2(2000);
     liste2    varchar2(2000);
     requete  varchar2(10000);
     req      varchar2(10000);

     CURSOR RefTEMP IS
		   		  SELECT  *
            FROM DICOCOMCLASSIRIS
            WHERE id_dicocomclassiris IN (SELECT id_dicocomclassiris FROM DICOCOMCLASSIRIS
            CONNECT BY PRIOR dic_id_dicocomclassiris = id_dicocomclassiris
            START WITH id_dicocomclassiris in (select
            dicocomclassiris.id_dicocomclassiris
            from dicocomclassiris,
            speclassiris,
            specialite,
            spepresentation
            where specialite.id_specialite = spepresentation.id_specialite
            and spepresentation.id_dicocodegene = GetGenGroupTheras_id.id_dicocodegene
            and specialite.id_specialite = speclassiris.id_specialite
            and speclassiris.id_dicocomclassiris = dicocomclassiris.id_dicocomclassiris));

      cursor reftemp2 IS
		   		  SELECT  *
            FROM DICOCOMCLASSIRIS
            WHERE dic_id_dicocomclassiris is null AND
              id_dicocomclassiris IN (SELECT id_dicocomclassiris FROM DICOCOMCLASSIRIS
            CONNECT BY PRIOR dic_id_dicocomclassiris = id_dicocomclassiris
            START WITH id_dicocomclassiris in (select
            dicocomclassiris.id_dicocomclassiris
            from dicocomclassiris,
            speclassiris,
            specialite,
            spepresentation
            where specialite.id_specialite = spepresentation.id_specialite
            and spepresentation.id_dicocodegene = GetGenGroupTheras_id.id_dicocodegene
            and specialite.id_specialite = speclassiris.id_specialite
            and speclassiris.id_dicocomclassiris = dicocomclassiris.id_dicocomclassiris));

		   enreg  RefTEMP%ROWTYPE;
		   enreg2 RefTEMP2%ROWTYPE;
		BEGIN
	      FOR enreg in RefTEMP
           LOOP
             if liste is null then
             liste := enreg.id_dicocomclassiris;
             else
             liste := liste||','||enreg.id_dicocomclassiris;
             end if;
           END LOOP;

         FOR enreg2 in RefTEMP2
             LOOP
             if liste2 is null then
             liste2 := enreg2.id_dicocomclassiris;
             else
             liste2 := liste2||','||enreg2.id_dicocomclassiris;
             end if;
             END LOOP;

            Requete :=  ' SELECT a.ID_DICOCOMCLASSIRIS,a.LIBELLE, b.ID_DICOCOMCLASSIRIS DIC_ID_DICOCOMCLASSIRIS,  b.libelle DIC_LIBELLE'
                 ||  ' FROM     DICOCOMCLASSIRIS a , DICOCOMCLASSIRIS b'
                 ||  ' WHERE    a.id_dicocomclassiris in ('||Liste2||')'
                 ||  ' AND b.id_dicocomclassiris in ('||Liste||')'
                 ||  ' AND (a.id_dicocomclassiris in ('||Liste2||') OR a.dic_id_dicocomclassiris in ('||Liste2||'))'
                 ||  ' AND b.DIC_ID_DICOCOMCLASSIRIS(+) = a.ID_DICOCOMCLASSIRIS'
                 ||  ' ORDER BY a.ordre, a.libelle';

                OPEN GetGenGroupTheras_id.Ref_GenGroup FOR Requete;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetGenGroupTheras_id%');
--         COMMIT;
-------------------------------------------------------------


             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;

     End GetGenGroupTheras_id;

END AVIDAL_GPE_GENERIQUE;
/
CREATE OR REPLACE PACKAGE Avidal_Iam AS
-- ==========================================================================
-- Script     : AVIDAL_IAM    Type : Package
-- Objet      : Ressources Select tables
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:37
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
--Modifié par : MODIFICATION#1 : SG K2-PixelPark le 21/02/2001
--            : MODIFICATION#2 : MR - 22/03/2001 : Ajout de GetSpeIAM_100_422
--            : MODIFICATION#3 : MR - 26/03/2001 : Modif. de GetSpeIAM_100_422
--            : MODIFICATION#4 : MR - 27/03/2001 : Modif. de GetSpeIAM_100_422
-- ==========================================================================

--//////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles Entrées
--//////////////////////////////////////////////////////////////////////////////////////////////////////
           PROCEDURE GetIAMClass_id ( ID_IAMCLASSE   IN    Iamclass_Pubres.Id_IAMclasse         DEFAULT NULL,
                                   RefIAMCLASS    OUT   Iamclass_Pubres.IAMCLASSCurTyp,
                                   Ret            OUT   NUMBER);
           PROCEDURE GetIAMClassIAMClasses_id ( ID_IAMCLASSE   IN    Iamclass_Pubres.Id_IAMclasse      DEFAULT NULL,
                                             RefIAMCLASS    OUT   Iamcouple_Pubres.IAMCOUPLECurTyp2,
                                             Ret            OUT   NUMBER);
           PROCEDURE GetIAMClassSpes_id ( ID_IAMCLASSE    IN    Iamclass_Pubres.Id_IAMclasse        DEFAULT NULL,
                                       RefSPECIALITE   OUT   Specialite_Pubres.SPECIALITECurTyp,
                                       Ret             OUT   NUMBER);
           PROCEDURE GetIAMClassesSpeCouples_txt ( ID_SPECIALITES   IN    VARCHAR2,
                                               RefIAMCOUPLE     OUT   Iamcouple_Pubres.IAMCOUPLECurTyp3,
                                               Ret              OUT   NUMBER);
           PROCEDURE GetIAMClassCips_id ( ID_IAMCLASSE         IN    Iamclass_Pubres.Id_IAMclasse,
                                       RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp,
                                       Ret                  OUT   NUMBER);
           PROCEDURE GetSpeIAM_100_422_txt ( ID                       IN    VARCHAR2,
                                         Typ                      IN    VARCHAR2,
                                         ID_SPEPRESENTATION_OUT   OUT   VARCHAR2,
                                         RefIAMSPE                OUT   Iamcouple_Pubres.IAMSPECurTyp,
                                         Ret                      OUT   NUMBER);

           PROCEDURE GetNoIAMSpe_txt   ( ID_Specialite            IN    VARCHAR2,
                                         Id                       IN    NUMBER,
                                         typ                      IN    VARCHAR2,
                                         RefSPECIALITE   OUT   Specialite_Pubres.SPECIALITECurRef,
                                         Ret                      OUT   NUMBER);

--//////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles Entrées
--//////////////////////////////////////////////////////////////////////////////////////////////////////
   -- =====================================================================
   -- Function            : GetIAMClass
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out      :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           FUNCTION GetIAMClass_id ( ID_IAMCLASSE   IN    Iamclass_Pubres.Id_IAMclasse         DEFAULT NULL,
                                  RefIAMCLASS    OUT   Iamclass_Pubres.IAMCLASSCurTyp)
                                RETURN NUMBER;
            PRAGMA RESTRICT_REFERENCES(GetIAMClass_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : GetIAMClassIAMClasses
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           FUNCTION GetIAMClassIAMClasses_id ( ID_IAMCLASSE   IN    Iamclass_Pubres.Id_IAMclasse       DEFAULT NULL,
                                            RefIAMCLASS    OUT   Iamcouple_Pubres.IAMCOUPLECurTyp2)
                                          RETURN NUMBER;
            PRAGMA RESTRICT_REFERENCES(GetIAMClassIAMClasses_id, WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : GetIAMClassSpes
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           FUNCTION GetIAMClassSpes_id ( ID_IAMCLASSE    IN    Iamclass_Pubres.Id_IAMclasse         DEFAULT NULL,
                                      RefSPECIALITE   OUT   Specialite_Pubres.SPECIALITECurTyp)
                                    RETURN NUMBER;
            PRAGMA RESTRICT_REFERENCES(GetIAMClass_id,WNDS,WNPS,RNPS);
  -- =====================================================================
   -- Function            : GetIAMClassesSpeCouples(idSpes)
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           FUNCTION GetIAMClassesSpeCouples_txt( ID_SPECIALITES   IN    VARCHAR2,
                                              RefIAMCOUPLE     OUT   Iamcouple_Pubres.IAMCOUPLECurTyp3)
                                            RETURN NUMBER;
           --Pragma Restrict_References(GetIAMClassesSpeCouples, WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : GetIAMClassCips
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by SG K2 - PixelPark 21/02/2001
   -- =====================================================================
     FUNCTION GetIAMClassCips_id ( ID_IAMCLASSE         IN    Iamclass_Pubres.Id_IAMclasse,
                                RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp)
                              RETURN NUMBER;
   -- =====================================================================
   -- Function            : GetSpeIAM100_422
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out      :
   -- History             : Created by MR K2 - PixelPark 23/03/2001
   --                     : Modified by MR - 26/03/2001
   --                     : Modified by MR - 27/03/2001
   -- =====================================================================
     FUNCTION GetSpeIAM_100_422_txt ( ID                       IN    VARCHAR2,
                                  Typ                      IN    VARCHAR2,
                                  ID_SPEPRESENTATION_OUT   OUT   VARCHAR2,
                                  RefIAMSPE                OUT   Iamcouple_Pubres.IAMSPECurTyp)
                                RETURN NUMBER;


     FUNCTION GetNoIAMSpe_txt   ( ID_Specialite            IN    VARCHAR2,
                                  Id                       IN    NUMBER,
                                  typ                      IN   VARCHAR2,
                                  RefSPECIALITE   OUT   Specialite_Pubres.SPECIALITECurRef)
                                RETURN NUMBER;


-- ====================================================================
-- Fin de package
-- ====================================================================
END Avidal_Iam;
/

CREATE OR REPLACE PACKAGE BODY "AVIDAL_IAM"  AS
-- ============================================================================
-- Script      : AVIDAL_IAM    Type : Package Body
-- Objet       : Ressources Select tables
-- Owner       : VIDAL
-- Création    : 14/09/99 18:31:39
-- Auteur      : AGDF (2000) from Data to Information
-- Généré par  : Kercaps - AGDF_GEN_PAC Version : 2.02
-- Modifié par : SG K2 - PixelPark le 21/02/2001
--             : MODIFICATION#2 : MR - 22/03/2001 : Ajout de GetSpeIAM_100_422
--             : MODIFICATION#3 : MR - 26/03/2001 : Modif. de GetSpeIAM_100_422
--             : MODIFICATION#4 : MR - 27/03/2001 : Modif. de GetSpeIAM_100_422
-- ============================================================================
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetIAMClass
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------

--//////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles Entrées
--//////////////////////////////////////////////////////////////////////////////////////////////////////
           PROCEDURE GetIAMClass_id ( ID_IAMCLASSE   IN    Iamclass_Pubres.Id_Iamclasse          DEFAULT NULL,
                                   RefIAMCLASS    OUT   Iamclass_Pubres.IAMCLASSCurTyp,
                                   Ret            OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetIAMClass_id ( ID_IAMCLASSE, RefIAMCLASS);
           END GetIAMClass_id;
           FUNCTION GetIAMClass_id ( ID_IAMCLASSE   IN    Iamclass_Pubres.Id_Iamclasse         DEFAULT NULL,
                                  RefIAMCLASS    OUT   Iamclass_Pubres.IAMCLASSCurTyp)
                                RETURN NUMBER
           IS
           BEGIN
             OPEN GetIAMClass_id.RefIAMCLASS FOR
               SELECT ID_IAMCLASSE, CLASSE, REMARQUE, DCREAT, DMODIF, DREVIS
               FROM   IAMCLASS
               WHERE (Id_Iamclasse = GetIAMClass_id.Id_IAMClasse);

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetIAMClass_id%');
--         COMMIT;
-------------------------------------------------------------


             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetIAMClass_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetIAMClassIAMClasses_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetIAMClassIAMClasses_id ( ID_IAMCLASSE   IN    Iamclass_Pubres.Id_IAMclasse      DEFAULT NULL,
                                             RefIAMCLASS    OUT   Iamcouple_Pubres.IAMCOUPLECurTyp2,
                                             Ret            OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetIAMClassIAMClasses_id ( ID_IAMCLASSE, RefIAMCLASS);
           END GetIAMClassIAMClasses_id;
           FUNCTION GetIAMClassIAMClasses_id ( ID_IAMCLASSE   IN    Iamclass_Pubres.Id_IAMclasse       DEFAULT NULL,
                                            RefIAMCLASS    OUT   Iamcouple_Pubres.IAMCOUPLECurTyp2)
                                          RETURN NUMBER
           IS
           BEGIN
             OPEN GetIAMClassIAMClasses_id.RefIAMCLASS FOR
               SELECT GetIAMClassIAMClasses_id.Id_IAMclasse ID_IAMCLASSE,
                      b.ID_IAMCLASSE ID_IAMCLASSE_2,
                      b.CLASSE,
                      c.NIVEAUGRAVITE,
                      c.RISQETMECAN,
                      c.CONDUITEATENIR,
                      c.REMARQUE,
                      c.DCREAT,
                      c.DMODIF,
                      c.DREVIS
               FROM   IAMCOUPLE c, IAMCLASS b, IAMCLASSE_IAMCOUPLE a
               WHERE  a.id_iamcouple IN ( SELECT ID_IAMCOUPLE
                                          FROM   IAMCLASSE_IAMCOUPLE
                                          WHERE  ID_IAMCLASSE = GetIAMClassIAMClasses_id.Id_IAMclasse)
                 AND  a.id_iamclasse <> GetIAMClassIAMClasses_id.Id_IAMclasse
                 AND  b.ID_IAMCLASSE = a.ID_IAMCLASSE
                 AND  c.ID_IAMCOUPLE = a.ID_IAMCOUPLE
               ORDER BY 3;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetIAMClassIAMClasses_id%');
--         COMMIT;
-------------------------------------------------------------


             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetIAMClassIAMClasses_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetIAMClassSpes_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetIAMClassSpes_id ( ID_IAMCLASSE    IN    Iamclass_Pubres.Id_Iamclasse         DEFAULT NULL,
                                       RefSPECIALITE   OUT   Specialite_Pubres.SPECIALITECurTyp,
                                       Ret             OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetIAMClassSpes_id ( ID_IAMCLASSE, RefSPECIALITE);
           END GetIAMClassSpes_id;
           FUNCTION GetIAMClassSpes_id ( ID_IAMCLASSE    IN    Iamclass_Pubres.Id_Iamclasse         DEFAULT NULL,
                                      RefSPECIALITE   OUT   Specialite_Pubres.SPECIALITECurTyp)
                                    RETURN NUMBER
           IS
           BEGIN
             OPEN GetIAMClassSpes_id.RefSPECIALITE FOR
               SELECT b.ID_SPECIALITE, b.BVALID, b.BENCOURS, b.NOMUSER, b.DENOMSPE,
                      b.FORME, b.DOSAGE, b.complement, b.COMMAMMPOSO, b.RESERVE,
                      b.INFERIEURAGE, b.UNITINF, b.SUPERIEURAGE, b.UNIFSUP,
                      b.INFERIEURPOIDS, b.SUPERIEURPOIDS, b.DENOMAMM, b.NUMDOSAMM,
                      b.SPECATEGORIE, b.SOURCE, b.DATESOURCE, b.REMARQUES, b.DCREAT,
                      b.DMODIF, b.DREVIS
               FROM   SPECIALITE b, SPECIALITE_IAMCLASS a
               WHERE  a.ID_IAMCLASSE = GetIAMClassSpes_id.Id_IAMClasse
                 AND b.ID_SPECIALITE = a.ID_SPECIALITE;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetIAMClassSpes_id%');
--         COMMIT;
-------------------------------------------------------------


             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetIAMClassSpes_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetIAMClassesSpeCouples_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetIAMClassesSpeCouples_txt ( ID_SPECIALITES   IN    VARCHAR2,
                                               RefIAMCOUPLE     OUT   Iamcouple_Pubres.IAMCOUPLECurTyp3,
                                               Ret              OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetIAMClassesSpeCouples_txt ( ID_SPECIALITES, RefIAMCOUPLE);
           END GetIAMClassesSpeCouples_txt;
           FUNCTION GetIAMClassesSpeCouples_txt ( ID_SPECIALITES   IN    VARCHAR2,
                                              RefIAMCOUPLE     OUT   Iamcouple_Pubres.IAMCOUPLECurTyp3)
                                            RETURN NUMBER
           IS
           BEGIN
             OPEN GetIAMClassesSpeCouples_txt.RefIAMCOUPLE FOR
               'Select distinct f.ID_SPECIALITE  ID_SPECIALITE1,
                                f.DENOMSPE       DENOMSPE1,
                                a.id_iamclasse   ID_IAMCLASSE1,
                                d.CLASSE         CLASSE1,
                                h.ID_SPECIALITE  ID_SPECIALITE2,
                                h.DENOMSPE       DENOMSPE2,
                                b.id_iamclasse   ID_IAMCLASSE2,
                                e.CLASSE         CLASSE2,
                                c.NIVEAUGRAVITE  NIVEAUGRAVITE,
                                c.RISQETMECAN    RISQETMECAN,
                                c.CONDUITEATENIR CONDUITEATENIR
                FROM            IAMCLASSE_IAMCOUPLE a , IAMCLASSE_IAMCOUPLE b, IAMCOUPLE c ,
                                IAMCLASS d, IAMCLASS e, SPECIALITE f, SPECIALITE_IAMCLASS g,
                                SPECIALITE h, SPECIALITE_IAMCLASS i
                WHERE           a.id_iamcouple = b.id_iamcouple
                  AND           a.id_iamclasse < b.id_iamclasse
                  AND           a.id_iamcouple IN ( SELECT   id_iamcouple
                                                    FROM     IAMCLASSE_IAMCOUPLE
                                                    WHERE    id_iamclasse IN ( SELECT   id_iamclasse
                                                                               FROM     SPECIALITE_IAMCLASS
                                                                               WHERE    id_specialite IN ('||ID_SPECIALITES||')
                                                                               GROUP BY id_iamclasse)
                                                    GROUP BY id_iamcouple
                                                    HAVING COUNT(*) > 1 )
                  AND           a.id_iamcouple  = c.id_iamcouple
                  AND           a.id_iamclasse  = d.id_iamclasse
                  AND           b.id_iamclasse  = e.id_iamclasse
                  AND           d.id_iamclasse  = g.id_iamclasse
                  AND           g.ID_SPECIALITE = f.ID_SPECIALITE
                  AND           f.ID_SPECIALITE IN ('||ID_SPECIALITES||')
                  AND           e.id_iamclasse  = i.id_iamclasse
                  AND           i.ID_SPECIALITE = h.ID_SPECIALITE
                  AND           h.ID_SPECIALITE IN ('||ID_SPECIALITES||')
                  AND           f.ID_SPECIALITE <> h.ID_SPECIALITE
                ORDER BY 1';
-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetIAMClassesSpeCouples_txt%');
--         COMMIT;
-------------------------------------------------------------


             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetIAMClassesSpeCouples_txt;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetIAMClassCips_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetIAMClassCips_id ( ID_IAMCLASSE         IN    Iamclass_Pubres.Id_IAMclasse,
                                       RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp,
                                       Ret                  OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetIAMClassCips_id  ( ID_IAMCLASSE, RefSPEPRESENTATION);
           END GetIAMClassCips_id ;
           FUNCTION GetIAMClassCips_id  ( ID_IAMCLASSE         IN    Iamclass_Pubres.Id_IAMclasse,
                                      RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp)
                                    RETURN NUMBER
           IS
           BEGIN
             OPEN GetIAMClassCips_id .RefSPEPRESENTATION FOR
               SELECT c.ID_SPEPRESENTATION, c.ID_SPECIALITE, c.CIP,
                      c.UCD, c.AMMEUROPE, c.LIEUDISPO,
                      c.CONDDISPO, c.LISTE, c.DUREEPRESCRIPTION,
                      c.PRESCRIPTIONINITIALE, c.PRESCRIPTIONRESERVEE,
                      c.RENOUVELRESERVE, c.MEDPARTIC, c.NATURESURVEILLANCE,
                      c.CODEREFERANTGENERIQUE, c.REMPLACE, c.SOURCEREMPLACE,
                      c.DATESOURCEREMPLACE, c.REMPLACEPAR, c.SOURCEREMPLACEPAR,
                      c.DATESOURCEREMPLACEPAR, c.PRIXPRODHTF, c.PRIXPUBLICTTCF,
                      c.PRIXPRODHTE, c.PRIXPUBLICTTCE, c.TVA, c.DCREAT, c.DMODIF,
                      c.DREVIS, c.CIPREFERANT,
                      b.DENOMSPE||DECODE(Condi,NULL,'',' : '||Condi) DenomCip,
                      c.disponibilite, c.nbprise, c.priseunitaire, c.Codedispo codedispo
               FROM   SPECIALITE b, SPECIALITE_IAMCLASS a, SPEPRESENTATION c --, SPECONDITIONNEMENTPRIMAIRE d
               WHERE  a.ID_IAMCLASSE = GetIAMClassCips_id .Id_IAMClasse
                 AND  a.ID_SPECIALITE = b.ID_SPECIALITE
                 AND  b.ID_SPECIALITE = c.ID_SPECIALITE
	--ML:06/11/103  Supression de speconditionnemnetIaire
             --    AND  d.ID_SPEPRESENTATION (+)  = c.ID_SPEPRESENTATION
             --    AND  UPPER(d.TYPECONDPRIMAIRE (+)) = 'DENOMCIP'
				 ORDER BY DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), DENOMCIP;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetIAMClassCips_id%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetIAMClassCips_id ;
  -- ----------------------------------------------------------------------------------------
  -- Fonction de sélection  : GetSpeIAM_100_422_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- MODIFICATION#2 : MR - 22/03/2001 : Cette fonction renvoie toutes
  --                   les CIP, parmi celles passées en paramètre,
  --                   qui appartiennent aux classes d'interactions 100 et 422
  -- MODIFICATION#3 : MR - 26/03/2001 : De plus, on récupère une chaine d'id de
  --                   CIP qui sont dans la liste d'id. en entrée et qui
  --                   n'appartiennent pas aux classes 100 et 422.
  -- MODIFICATION#4 : MR - 27/03/2001 : Ajout du paramètre Typ : on peut désormais
  --                                  passer des ID de CIP ou de Spepresentation
  -- ----------------------------------------------------------------------------------------
           PROCEDURE GetSpeIAM_100_422_txt ( ID                       IN    VARCHAR2,
                                         Typ                      IN    VARCHAR2,
                                         ID_SPEPRESENTATION_OUT   OUT   VARCHAR2,
                                         RefIAMSPE                OUT   Iamcouple_Pubres.IAMSPECurTyp,
                                         Ret                      OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetSpeIAM_100_422_txt ( ID, Typ, ID_SPEPRESENTATION_OUT, RefIAMSPE);
           END GetSpeIAM_100_422_txt;
           FUNCTION GetSpeIAM_100_422_txt ( ID                       IN    VARCHAR2,
                                        Typ                      IN    VARCHAR2,
                                        ID_SPEPRESENTATION_OUT   OUT   VARCHAR2,
                                        RefIAMSPE                OUT   Iamcouple_Pubres.IAMSPECurTyp)
                                      RETURN NUMBER
           IS
             ID_REPLACE VARCHAR2(4000);
             RefSpeOutCurTyp Iamcouple_Pubres.IAMSPECurTyp2;
             Enreg           Iamcouple_Pubres.IAMCOUPLESPERec2;
           BEGIN
             -- curseur des ID de la liste initiale qui sont dans les classes 100 et 422
             IF ( GetSpeIAM_100_422_txt.Typ = 'PRE') THEN
               -- cas du passage d'un ID de spepresentation
               OPEN GetSpeIAM_100_422_txt.RefIAMSPE FOR
                 'Select   d.ID_SPEPRESENTATION id_spepresentation,
                           b.DENOMSPE||DECODE(e.Renscomp,NULL,'||''''''||','||''' : '''||'||e.RENSCOMP) Libelle_CIP,
                           c.ID_IAMCLASSE id_iamclasse,
                           c.CLASSE classe
                  FROM     SPECIALITE_IAMCLASS a, SPECIALITE b, IAMCLASS c, SPEPRESENTATION d, SPECONDITIONNEMENTPRIMAIRE e
                  WHERE    a.ID_IAMCLASSE            = c.ID_IAMCLASSE
                    AND    a.ID_SPECIALITE           = b.ID_SPECIALITE
                    AND    b.ID_SPECIALITE           = d.ID_SPECIALITE
                    AND    d.ID_SPEPRESENTATION IN ('||ID||')
                    AND    e.ID_SPEPRESENTATION (+)  = d.ID_SPEPRESENTATION
                    AND    UPPER(e.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    a.ID_IAMCLASSE IN (100,422)
                  ORDER BY 1';
             ELSIF ( GetSpeIAM_100_422_txt.Typ = 'CIP') THEN
              BEGIN
                ID_REPLACE := replace(ID, ',', ''',''');
               -- cas du passage d'un ID de CIP
               OPEN GetSpeIAM_100_422_txt.RefIAMSPE FOR
                 'Select   d.cip id_spepresentation,
                           b.DENOMSPE||DECODE(e.Renscomp,NULL,'||''''''||','||''' : '''||'||e.RENSCOMP) Libelle_CIP,
                           c.ID_IAMCLASSE id_iamclasse,
                           c.CLASSE classe
                  FROM     SPECIALITE_IAMCLASS a, SPECIALITE b, IAMCLASS c, SPEPRESENTATION d, SPECONDITIONNEMENTPRIMAIRE e
                  WHERE    a.ID_IAMCLASSE            = c.ID_IAMCLASSE
                    AND    a.ID_SPECIALITE           = b.ID_SPECIALITE
                    AND    b.ID_SPECIALITE           = d.ID_SPECIALITE
                    AND    d.CIP IN ('''||ID_REPLACE||''')
                    AND    e.ID_SPEPRESENTATION (+)  = d.ID_SPEPRESENTATION
                    AND    UPPER(e.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND    a.ID_IAMCLASSE IN (100,422)
                  ORDER BY 1';
               END;
             ELSIF ( GetSpeIAM_100_422_txt.Typ = 'SPE') THEN
               -- cas du passage d'un ID de spepresentation
               OPEN GetSpeIAM_100_422_txt.RefIAMSPE FOR
                 'Select   b.ID_SPECIALITE id_spepresentation,
                           b.DENOMSPE Libelle_CIP,
                           c.ID_IAMCLASSE id_iamclasse,
                           c.CLASSE classe
                  FROM     SPECIALITE_IAMCLASS a, SPECIALITE b, IAMCLASS c
                  WHERE    a.ID_IAMCLASSE            = c.ID_IAMCLASSE
                    AND    a.ID_SPECIALITE           = b.ID_SPECIALITE
                    AND    b.ID_SPECIALITE IN ('||ID||')
                    AND    a.ID_IAMCLASSE IN (100,422)
                  ORDER BY 1';
             END IF;
             -- curseur des ID de la liste initiale qui ne sont pas dans les classes 100 et 422
             IF ( GetSpeIAM_100_422_txt.Typ = 'PRE') THEN
               OPEN RefSpeOutCurTyp FOR
                 'Select distinct   d.id_specialite id_spepresentation,
                                    b.DENOMSPE||DECODE(e.Renscomp,NULL,'||''''''||','||''' : '''||'||e.RENSCOMP) Libelle_CIP
                  FROM              SPECIALITE_IAMCLASS a, SPECIALITE b, IAMCLASS c, SPEPRESENTATION d, SPECONDITIONNEMENTPRIMAIRE e
                  WHERE             a.ID_IAMCLASSE            = c.ID_IAMCLASSE
                    AND             a.ID_SPECIALITE           = b.ID_SPECIALITE
                    AND             b.ID_SPECIALITE           = d.ID_SPECIALITE
                    AND             d.ID_SPEPRESENTATION IN ('||ID||')
                    AND             e.ID_SPEPRESENTATION (+)  = d.ID_SPEPRESENTATION
                    AND             UPPER(e.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND             a.ID_IAMCLASSE NOT IN (100,422)
                  ORDER BY 1';
               ID_SPEPRESENTATION_OUT := '';
               -- on construit la liste d'id. de sortie
               LOOP
                 FETCH RefSpeOutCurTyp INTO Enreg;
                 EXIT WHEN RefSpeOutCurTyp%NOTFOUND;
                 ID_SPEPRESENTATION_OUT := ID_SPEPRESENTATION_OUT||Enreg.ID_SPEPRESENTATION||', ';
               END LOOP;
               CLOSE RefSpeOutCurTyp;
               ID_SPEPRESENTATION_OUT := SUBSTR(ID_SPEPRESENTATION_OUT,1,LENGTH(ID_SPEPRESENTATION_OUT)-2);
             ELSIF ( GetSpeIAM_100_422_txt.Typ = 'CIP') THEN
              BEGIN
                 ID_REPLACE := replace(ID, ',', ''',''');
               OPEN RefSpeOutCurTyp FOR
                 'Select distinct   d.id_specialite id_spepresentation,
                                    b.DENOMSPE||DECODE(e.Renscomp,NULL,'||''''''||','||''' : '''||'||e.RENSCOMP) Libelle_CIP
                  FROM              SPECIALITE_IAMCLASS a, SPECIALITE b, IAMCLASS c, SPEPRESENTATION d, SPECONDITIONNEMENTPRIMAIRE e
                  WHERE             a.ID_IAMCLASSE            = c.ID_IAMCLASSE
                    AND             a.ID_SPECIALITE           = b.ID_SPECIALITE
                    AND             b.ID_SPECIALITE           = d.ID_SPECIALITE
                    AND             d.cip IN ('''||ID_REPLACE||''')
                    AND             e.ID_SPEPRESENTATION (+)  = d.ID_SPEPRESENTATION
                    AND             UPPER(e.TYPECONDPRIMAIRE (+)) = '||'''DENOMCIP'''||'
                    AND             a.ID_IAMCLASSE NOT IN (100,422)
                  ORDER BY 1';
               ID_SPEPRESENTATION_OUT := '';
               -- on construit la liste d'id. de sortie
               LOOP
                 FETCH RefSpeOutCurTyp INTO Enreg;
                 EXIT WHEN RefSpeOutCurTyp%NOTFOUND;
                 ID_SPEPRESENTATION_OUT := ID_SPEPRESENTATION_OUT||Enreg.ID_SPEPRESENTATION||', ';
               END LOOP;
              END;
               CLOSE RefSpeOutCurTyp;
               ID_SPEPRESENTATION_OUT := SUBSTR(ID_SPEPRESENTATION_OUT,1,LENGTH(ID_SPEPRESENTATION_OUT)-2);
             ELSIF ( GetSpeIAM_100_422_txt.Typ = 'SPE') THEN
               OPEN RefSpeOutCurTyp FOR
                 'Select distinct   b.id_specialite id_spepresentation,
                                    b.DENOMSPE Libelle_CIP
                  FROM              SPECIALITE_IAMCLASS a, SPECIALITE b, IAMCLASS c
                  WHERE             a.ID_IAMCLASSE            = c.ID_IAMCLASSE
                    AND             a.ID_SPECIALITE           = b.ID_SPECIALITE
                    AND             b.ID_SPECIALITE IN ('||ID||')
                    AND             a.ID_IAMCLASSE NOT IN (100,422)
                  ORDER BY 1';
               ID_SPEPRESENTATION_OUT := '';
               -- on construit la liste d'id. de sortie
               LOOP
                 FETCH RefSpeOutCurTyp INTO Enreg;
                 EXIT WHEN RefSpeOutCurTyp%NOTFOUND;
                 ID_SPEPRESENTATION_OUT := ID_SPEPRESENTATION_OUT||Enreg.ID_SPEPRESENTATION||', ';
               END LOOP;
               CLOSE RefSpeOutCurTyp;
               ID_SPEPRESENTATION_OUT := SUBSTR(ID_SPEPRESENTATION_OUT,1,LENGTH(ID_SPEPRESENTATION_OUT)-2);
             END IF;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSpeIAM_100_422_txt%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetSpeIAM_100_422_txt;
--//-----------------------------------------------------------------------------------
---------------------------------------------------------------------------------------


--//-----------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
  PROCEDURE GetNoIAMSpe_txt ( ID_Specialite            IN    VARCHAR2,
                              Id                       IN    NUMBER,
                              typ                      IN    VARCHAR2,
							  RefSPECIALITE   OUT   Specialite_Pubres.SPECIALITECurRef,
							  Ret                      OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetNoIAMSpe_txt ( ID_Specialite, Id, typ, RefSPECIALITE);
           END GetNoIAMSpe_txt;

           FUNCTION GetNoIAMSpe_txt ( ID_Specialite            IN    VARCHAR2,
                                      Id                       IN    NUMBER,
                                      typ                      IN   VARCHAR2,
									  RefSPECIALITE   OUT   Specialite_Pubres.SPECIALITECurRef)
									  RETURN NUMBER
           IS
         Requete varchar2(20000);

   BEGIN
--**//**Recherche par Indication **//**--
     IF typ = 8 THEN

     Requete := 'Select b.ID_SPECIALITE,'
       ||       '  b.Bvalid, b.Bencours,  b.Nomuser, b.Denomspe,'
       ||       '  b.Forme, b.Dosage, b.Complement, b.Commammposo, b.Reserve, b.Inferieurage,'
       ||       '  b.Unitinf, b.Superieurage, b.Unifsup, b.Inferieurpoids, b.Superieurpoids,'
       ||       '  b.Denomamm, b.Numdosamm,  b.Specategorie, b.Source, b.Datesource, b.Remarques,'
       ||       '  b.Dcreat, b.Dmodif, b.Drevis'
		   ||       '  From SPECIALITE b, SPEINDIC a'
		   ||       '  where b .ID_SPECIALITE = a.ID_SPECIALITE'
       ||       '  And (a.Id_T_Indic = '||GetNoIAMSpe_txt.Id||')'
       ||       '  And  b.ID_SPECIALITE not in (Select h.id_specialite'
       ||       '         FROM IAMCLASSE_IAMCOUPLE a,'
			 ||       '  			  IAMCLASSE_IAMCOUPLE b,'
       ||       '  								IAMCOUPLE c,'
       ||       '                 IAMCLASS d,'
       ||       '  								IAMCLASS e,'
       ||       '  								SPECIALITE f,'
       ||       '  								SPECIALITE_IAMCLASS g,'
       ||       '                 SPECIALITE h,'
       ||       '  								SPECIALITE_IAMCLASS i'
       ||       '                  WHERE           a.id_iamcouple = b.id_iamcouple'
       ||       '                    AND           a.id_iamclasse <> b.id_iamclasse'
       ||       '  			             AND           a.id_iamcouple  = c.id_iamcouple'
       ||       '                    AND           a.id_iamclasse  = d.id_iamclasse'
       ||       '                    AND           b.id_iamclasse  = e.id_iamclasse'
       ||       '                    AND           d.id_iamclasse  = g.id_iamclasse'
       ||       '                    AND           g.ID_SPECIALITE = f.ID_SPECIALITE'
       ||       '                    AND           f.ID_SPECIALITE IN ('|| GetNoIAMSpe_txt.ID_Specialite ||')'
       ||       '                    AND           e.id_iamclasse  = i.id_iamclasse'
       ||       '                    AND           i.ID_SPECIALITE = h.ID_SPECIALITE) '
       ||       ' ORDER BY b.Denomspe' ;

       ELSE IF
--**//**Recherche par Groupe d'Indications **//**--
        typ = 9 THEN
       Requete := 'Select b.ID_SPECIALITE,'
       ||       '  b.Bvalid, b.Bencours,  b.Nomuser, b.Denomspe,'
       ||       '  b.Forme, b.Dosage, b.Complement, b.Commammposo, b.Reserve, b.Inferieurage,'
       ||       '  b.Unitinf, b.Superieurage, b.Unifsup, b.Inferieurpoids, b.Superieurpoids,'
       ||       '  b.Denomamm, b.Numdosamm,  b.Specategorie, b.Source, b.Datesource, b.Remarques,'
       ||       '  b.Dcreat, b.Dmodif, b.Drevis'
       ||       '  From SPECIALITE b, SPEINDIC a, GROUPINDICINDIC_REL c'
       ||       '  Where c.ID_GROUPINDIC = ('||GetNoIAMSpe_txt.Id||')'
       ||       '  And a.ID_T_INDIC    = c.ID_T_INDIC'
       ||       '  And b.ID_SPECIALITE = a.ID_SPECIALITE'
       ||       '  And  b.ID_SPECIALITE not in (Select h.id_specialite'
       ||       '         FROM IAMCLASSE_IAMCOUPLE a,'
			 ||       '  			  IAMCLASSE_IAMCOUPLE b,'
       ||       '  								IAMCOUPLE c,'
       ||       '                 IAMCLASS d,'
       ||       '  								IAMCLASS e,'
       ||       '  								SPECIALITE f,'
       ||       '  								SPECIALITE_IAMCLASS g,'
       ||       '                 SPECIALITE h,'
       ||       '  								SPECIALITE_IAMCLASS i'
       ||       '                  WHERE           a.id_iamcouple = b.id_iamcouple'
       ||       '                    AND           a.id_iamclasse <> b.id_iamclasse'
       ||       '  			             AND           a.id_iamcouple  = c.id_iamcouple'
       ||       '                    AND           a.id_iamclasse  = d.id_iamclasse'
       ||       '                    AND           b.id_iamclasse  = e.id_iamclasse'
       ||       '                    AND           d.id_iamclasse  = g.id_iamclasse'
       ||       '                    AND           g.ID_SPECIALITE = f.ID_SPECIALITE'
       ||       '                    AND           f.ID_SPECIALITE IN ('|| GetNoIAMSpe_txt.ID_Specialite ||')'
       ||       '                    AND           e.id_iamclasse  = i.id_iamclasse'
       ||       '                    AND           i.ID_SPECIALITE = h.ID_SPECIALITE) '
       ||       ' ORDER BY b.Denomspe' ;

       ELSE IF
--**//**Recherche par Classe Théra **//**--
        typ = 3 THEN
       Requete := 'Select b.ID_SPECIALITE,'
       ||       '  b.Bvalid, b.Bencours,  b.Nomuser, b.Denomspe,'
       ||       '  b.Forme, b.Dosage, b.Complement, b.Commammposo, b.Reserve, b.Inferieurage,'
       ||       '  b.Unitinf, b.Superieurage, b.Unifsup, b.Inferieurpoids, b.Superieurpoids,'
       ||       '  b.Denomamm, b.Numdosamm,  b.Specategorie, b.Source, b.Datesource, b.Remarques,'
       ||       '  b.Dcreat, b.Dmodif, b.Drevis'
       ||       '  FROM SPECIALITE b, SPECLASSIRIS a'
       ||       '  WHERE a.ID_DICOCOMCLASSIRIS in  (SELECT id_dicocomclassiris FROM DICOCOMCLASSIRIS '
       ||       '                       CONNECT BY PRIOR id_dicocomclassiris = dic_id_dicocomclassiris '
       ||       '                       START WITH id_dicocomclassiris = ('||GetNoIAMSpe_txt.Id||')) '
		   ||       '  AND b.ID_SPECIALITE = a.ID_SPECIALITE'
       ||       '  AND b.ID_SPECIALITE not in (Select h.id_specialite'
       ||       '         FROM IAMCLASSE_IAMCOUPLE a,'
			 ||       '  			  IAMCLASSE_IAMCOUPLE b,'
       ||       '  								IAMCOUPLE c,'
       ||       '                 IAMCLASS d,'
       ||       '  								IAMCLASS e,'
       ||       '  								SPECIALITE f,'
       ||       '  								SPECIALITE_IAMCLASS g,'
       ||       '                 SPECIALITE h,'
       ||       '  								SPECIALITE_IAMCLASS i'
       ||       '                  WHERE           a.id_iamcouple = b.id_iamcouple'
       ||       '                    AND           a.id_iamclasse <> b.id_iamclasse'
       ||       '  			             AND           a.id_iamcouple  = c.id_iamcouple'
       ||       '                    AND           a.id_iamclasse  = d.id_iamclasse'
       ||       '                    AND           b.id_iamclasse  = e.id_iamclasse'
       ||       '                    AND           d.id_iamclasse  = g.id_iamclasse'
       ||       '                    AND           g.ID_SPECIALITE = f.ID_SPECIALITE'
       ||       '                    AND           f.ID_SPECIALITE IN ('|| GetNoIAMSpe_txt.ID_Specialite ||')'
       ||       '                    AND           e.id_iamclasse  = i.id_iamclasse'
       ||       '                    AND           i.ID_SPECIALITE = h.ID_SPECIALITE) '
       ||       ' ORDER BY b.Denomspe' ;
       END IF;

       END IF;

       END IF;

        OPEN GetNoIAMSpe_txt.RefSPECIALITE for Requete;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetNoIAMSpe_txt%');
--         COMMIT;
-------------------------------------------------------------


             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetNoIAMSpe_txt;


-- ====================================================================
-- Fin de package
-- ====================================================================
END Avidal_Iam;
/
CREATE OR REPLACE Package AVIDAL_INDICATION Is
-- ====================================================================
-- Script     : AVIDAL_INDICATION    Type : Package
-- Objet      : Ressources Select tables
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:37
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

--//////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles Entrées
--//////////////////////////////////////////////////////////////////////////////////////////////////////
	   Procedure GetIndics_txt ( LIBELLE	In  T_INDIC_Pubres.LIBELLE	 Default Null,
	   				   	   RefT_INDIC 	Out T_INDIC_Pubres.T_IndicCurTyp,
						   Ret			Out	Number);

	   Procedure GetIndic_id ( ID_T_INDIC	In  T_INDIC_Pubres.Id_T_Indic	 Default Null,
	   				   	   RefT_INDIC 	Out T_INDIC_Pubres.T_IndicCurTyp,
						   Ret			Out	Number);

	   Procedure GetIndicSPs_id ( ID_T_INDIC	 In  T_INDIC_Pubres.Id_T_Indic	 Default Null,
	   				   	   	  RefGROUPINDIC  Out GROUPINDIC_Pubres.GROUPINDICCurTyp,
						   	  Ret			Out	Number);

	   Procedure GetIndicSpes_id ( ID_T_INDIC	In  T_INDIC_Pubres.Id_T_Indic	 Default Null,
	   				   	   	   RefSPECIALITE	 Out SPECIALITE_Pubres.SPECIALITECurTyp,
						   	   Ret			Out	Number);

--//////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles Entrées
--//////////////////////////////////////////////////////////////////////////////////////////////////////
   -- =====================================================================
   -- Function		  : GetIndics_txt
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   Function GetIndics_txt ( LIBELLE	In  T_INDIC_Pubres.LIBELLE	 Default Null,
	   				   	   RefT_INDIC 	Out T_INDIC_Pubres.T_IndicCurTyp)
	   			Return Number;

   -- =====================================================================
   -- Function		  : GetIndic_id
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   Function GetIndic_id ( ID_T_INDIC	In  T_INDIC_Pubres.Id_T_Indic	 Default Null,
	   				   	   RefT_INDIC 	Out T_INDIC_Pubres.T_IndicCurTyp)
	   			Return Number;
	    Pragma Restrict_References(GetIndic_id,WNDS,WNPS,RNPS);

   -- =====================================================================
   -- Function		  : GetIndicSPs_id
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   Function GetIndicSPs_id ( ID_T_INDIC	 In  T_INDIC_Pubres.Id_T_Indic	 Default Null,
	   				   	   	  RefGROUPINDIC  Out GROUPINDIC_Pubres.GROUPINDICCurTyp)
	   			Return Number;
	    Pragma Restrict_References(GetIndicSPs_id,WNDS,WNPS,RNPS);

   -- =====================================================================
   -- Function		  : GetIndicSpes
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   Function GetIndicSpes_id ( ID_T_INDIC	In  T_INDIC_Pubres.Id_T_Indic	 Default Null,
	   				   	   	   RefSPECIALITE	 Out SPECIALITE_Pubres.SPECIALITECurTyp)
	   			Return Number;
	    Pragma Restrict_References(GetIndicSpes_id, WNDS,WNPS,RNPS);


-- ====================================================================
-- Fin de package
-- ====================================================================
End AVIDAL_INDICATION;
/

CREATE OR REPLACE Package Body AVIDAL_INDICATION Is
-- ====================================================================
-- Script     : AVIDAL_INDICATION    Type : Package Body
-- Objet      : Ressources Select tables
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:39
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

--//////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles Entrées
--//////////////////////////////////////////////////////////////////////////////////////////////////////
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetIndics_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   Procedure GetIndics_txt ( LIBELLE	In  T_INDIC_Pubres.LIBELLE	 Default Null,
	   				   	   RefT_INDIC 	Out T_INDIC_Pubres.T_IndicCurTyp,
						   Ret			Out	Number)
						   Is
	   Begin
	   		Ret := GetIndics_txt ( LIBELLE, RefT_INDIC);
	   End GetIndics_txt;

	   Function GetIndics_txt ( LIBELLE	In  T_INDIC_Pubres.LIBELLE	 Default Null,
	   				   	   RefT_INDIC 	Out T_INDIC_Pubres.T_IndicCurTyp)
	   			Return Number Is

	   Begin
		Open GetIndics_txt.RefT_INDIC For
		Select ID_T_INDIC, LIBELLE, TEXTE, CREATION, VALIDATION, REMARQUES
		  From T_INDIC
		 Where UPPER(TRANSLATE(t_INDIC.LIBELLE, AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2)) LIKE UPPER(TRANSLATE(GetIndics_txt.LIBELLE, AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
		 UNION
 		Select a.ID_T_INDIC, c.libelle||' = '||a.LIBELLE, a.TEXTE, a.CREATION, a.VALIDATION, a.REMARQUES
		  From T_SYNONYINDIC c, SYNONYINDIC_REL b, T_INDIC a
		 Where UPPER(TRANSLATE(c.LIBELLE, AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2)) LIKE UPPER(TRANSLATE(GetIndics_txt.LIBELLE, AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
		   And   b.ID_T_SYNONYINDIC = c.ID_T_SYNONYINDIC
		   And   a.ID_T_INDIC = b.ID_T_INDIC
		   order by 2;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetIndics_txt%');
--         COMMIT;
-------------------------------------------------------------


	   	Return 1;

		EXCEPTION
		When Others Then
			 Return SQLCODE;

	   End GetIndics_txt;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetIndic_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   Procedure GetIndic_id ( ID_T_INDIC	In  T_INDIC_Pubres.Id_T_Indic	 Default Null,
	   				   	   RefT_INDIC 	Out T_INDIC_Pubres.T_IndicCurTyp,
						   Ret			Out	Number)
						   Is
	   Begin
	   		Ret := GetIndic_id ( ID_T_INDIC, RefT_INDIC);
	   End GetIndic_id;

	   Function GetIndic_id ( ID_T_INDIC	In  T_INDIC_Pubres.Id_T_Indic	 Default Null,
	   				   	   RefT_INDIC 	Out T_INDIC_Pubres.T_IndicCurTyp)
	   			Return Number Is

	   Begin
		Open GetIndic_id.RefT_INDIC For
		Select ID_T_INDIC, LIBELLE, TEXTE, CREATION, VALIDATION, REMARQUES
		  From T_INDIC
		Where (ID_T_INDIC = GetIndic_id.ID_T_INDIC Or GetIndic_id.ID_T_INDIC Is null);

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetIndic_id%');
--         COMMIT;
-------------------------------------------------------------


	   	Return 1;

		EXCEPTION
		When Others Then
			 Return SQLCODE;

	   End GetIndic_id;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetIndicSPs_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   Procedure GetIndicSPs_id ( ID_T_INDIC	 In  T_INDIC_Pubres.Id_T_Indic	 Default Null,
	   				   	   	  RefGROUPINDIC Out GROUPINDIC_Pubres.GROUPINDICCurTyp,
							  Ret			Out Number)
							  Is
	   Begin
	   		Ret := GetIndicSPs_id ( ID_T_INDIC, RefGROUPINDIC);
	   End GetIndicSPs_id;

	   Function GetIndicSPs_id ( ID_T_INDIC	 In  T_INDIC_Pubres.Id_T_Indic	 Default Null,
	   				   	   	  RefGROUPINDIC Out GROUPINDIC_Pubres.GROUPINDICCurTyp)
	   			Return Number Is

	   Begin
		Open GetIndicSPs_id.RefGROUPINDIC For
		Select b.ID_GROUPINDIC, b.LIBELLE, b.TYPE_
		  From GROUPINDIC b, GROUPINDICINDIC_REL a
		Where a.ID_T_INDIC    = GetIndicSPs_id.ID_T_INDIC
		  And b.ID_GROUPINDIC = a.ID_GROUPINDIC;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetIndicSPs_id%');
--         COMMIT;
-------------------------------------------------------------


	   	Return 1;

		EXCEPTION
		When Others Then
			 Return SQLCODE;

	   End GetIndicSPs_id;


  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetIndicSpes_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------

	   Procedure GetIndicSpes_id ( ID_T_INDIC	In  T_INDIC_Pubres.Id_T_Indic	 Default Null,
	   				   	   	   RefSPECIALITE	 Out SPECIALITE_Pubres.SPECIALITECurTyp,
							   Ret				 Out Number)
							   Is
	   Begin
	   		Ret := GetIndicSpes_id ( ID_T_INDIC, RefSPECIALITE);
	   End GetIndicSpes_id;

	   Function GetIndicSpes_id ( ID_T_INDIC	In  T_INDIC_Pubres.Id_T_Indic	 Default Null,
	   				   	   	   RefSPECIALITE	 Out SPECIALITE_Pubres.SPECIALITECurTyp)
	   			Return Number Is

	   Begin
		  Open GetIndicSpes_id.RefSPECIALITE For
		Select b.ID_SPECIALITE, b.BVALID, b.BENCOURS, b.NOMUSER,
			   b.DENOMSPE, b.FORME, b.DOSAGE, b.complement,
			   b.COMMAMMPOSO, b.RESERVE, b.INFERIEURAGE,
			   b.UNITINF, b.SUPERIEURAGE, b.UNIFSUP,
			   b.INFERIEURPOIDS, b.SUPERIEURPOIDS,
			   b.DENOMAMM, b.NUMDOSAMM, b.SPECATEGORIE,
			   b.SOURCE, b.DATESOURCE, b.REMARQUES, b.DCREAT, b.DMODIF, b.DREVIS
		  From SPECIALITE b , SPEINDIC a
		 Where (a.Id_T_Indic = GetIndicSpes_id.Id_T_Indic Or GetIndicSpes_id.Id_T_Indic Is null)
		   And  b.ID_SPECIALITE = a.ID_SPECIALITE;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetIndicSpes_id%');
--         COMMIT;
-------------------------------------------------------------


	   	Return 1;

		EXCEPTION
		When Others Then
			 Return SQLCODE;

	   End GetIndicSpes_id;


-- ====================================================================
-- Fin de package
-- ====================================================================
End AVIDAL_INDICATION;
/
CREATE OR REPLACE PACKAGE "AVIDAL_INFO"     AS
-- ======================================================================================
-- Script      : AVIDAL_INFO    Type : Package
-- Objet       :
-- Owner       : VIDAL
-- Création    : 22/01/2002
-- Auteur      : AL
-- Généré par  :
-- ======================================================================================
--*********************************************************************
--                          Déclarations
--*********************************************************************
-- --------------------------------------------------------------------
-- Sous-types table : VERSION
-- --------------------------------------------------------------------
  SUBTYPE DB_NAME            IS  VERSION.NOM%TYPE;
  SUBTYPE DB_ID              IS  VERSION.ID_VERSION%TYPE;
  SUBTYPE DB_DATE            IS  VERSION.DATE_INFO%TYPE;
  SUBTYPE API_ID             IS  VERSION.ID_VERSION%TYPE;
  SUBTYPE API_DATE	         IS  VERSION.DATE_INFO%TYPE;
-- --------------------------------------------------------------------
-- Record : VERSION
-- --------------------------------------------------------------------
  TYPE VERSIONRec IS RECORD
  (
  DB_NAME 	Avidal_INFO.DB_NAME,
  DB_ID      	Avidal_INFO.DB_ID,
  DB_DATE       VARCHAR2(10),
  API_ID        Avidal_INFO.API_ID,
  API_DATE      VARCHAR2(10)
  );
-- ----------------------------------------
-- Ref Cursor : VERSION
--------------------------------------------------------------------
  TYPE VERSIONCurTyp 	IS REF CURSOR RETURN Avidal_INFO.VERSIONRec;
-- --------------------------------------------------------------------
--*********************************************************************
--                      Procédure
--*********************************************************************
----------------------------------------------------------------
  PROCEDURE GetVersion( RefLnkTHE     OUT    Avidal_INFO.VERSIONCurtyp,
                        Ret           OUT    NUMBER);
  FUNCTION GetVersion(RefLnkTHE     OUT    Avidal_INFO.VERSIONCurtyp)
                                   RETURN  NUMBER;
  -- ----------------------------------------------------------------

END Avidal_INFO;
/

CREATE OR REPLACE PACKAGE BODY "AVIDAL_INFO"          AS
-- =======================================================================================
-- Script      : AVIDAL_INFO    Type : Package Body
-- Objet       :
-- Owner       : VIDAL
-- Création    : 22/01/2002
-- Auteur      : AL
-- Généré par  :
--=======================================================================================
PROCEDURE GetVersion ( RefLnkTHE   OUT   Avidal_INFO.VERSIONCurtyp,
                       Ret         OUT   NUMBER)
       IS
       BEGIN
           Ret := Avidal_INFO.GetVersion ( GetVersion.RefLnkThe);
       END GetVersion;

FUNCTION GetVersion(RefLnkTHE    OUT   Avidal_INFO.VERSIONCurTyp)
                                        RETURN  NUMBER
       IS
	   api_id VARCHAR2(10);
	   api_date	   VARCHAR2(10);

       BEGIN
	   select id_version, to_char(date_info,'dd/mm/rrrr')
	   		  into api_id, api_date
			  FROM version
			  WHERE ID_TYPE_INFO = 'API'
			  AND date_info = (SELECT max(date_info) FROM version WHERE ID_TYPE_INFO = 'API');

	   OPEN GetVersion.RefLnkThe FOR
	   Select nom db_name, id_version db_id, to_char(date_info,'dd/mm/rrrr') db_date, api_id api_id, api_date api_date
	   		  FROM VERSION
			  WHERE ID_TYPE_INFO = 'DB'
			  AND date_info = (SELECT max(date_info) FROM version WHERE ID_TYPE_INFO = 'DB');

        -------------------------------------------------------------
        --Statistiques sur la procedure - rempli la table Marqueurs
        --le 25/05/2004
        -------------------------------------------------------------
        --         Update Marqueurs SET
        --                  Compteur = Compteur + 1
        --                  where upper(proc_name) Like UPPER('%GetVersion%');
        --         COMMIT;
        -------------------------------------------------------------
	   return 1;

       END GetVersion;

--==================================================================
--    FIN DE PACKAGE
--==================================================================

END Avidal_INFO;
/
CREATE OR REPLACE Package AVIDAL_LABORATOIRE Is
-- ====================================================================
-- Script     : AVIDAL_LABORATOIRE    Type : Package
-- Objet      : Ressources Select tables
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:37
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================
--////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles Entrées
--///////////////////////////////////////////////////////////////////////////////////////////////////
	   Procedure GetLabo_txt ( LABORATOIRE	    In  LABORATOIRE_Pubres.LABORATOIR	 Default Null,
	   				   	  RefLABORATOIRE    Out LABORATOIRE_Pubres.LABORATOIRECurTyp,
						  Ret				Out	Number);
	   Procedure GetLabo_id ( ID_LABORATOIRE	In  LABORATOIRE_Pubres.Id_LABORATOIRE	 Default Null,
	   				   	  RefLABORATOIRE    Out LABORATOIRE_Pubres.LABORATOIRECurTyp,
						  Ret				Out	Number);
 	   Procedure GetLaboSpes_id ( ID_LABORATOIRE  In  LABORATOIRE_Pubres.Id_LABORATOIRE	 Default Null,
 	   				   	 	  RefSPELABS_REL   Out SPELABS_REL_Pubres.SPELABS_RELCurTyp2,
						  	  Ret			   Out	Number);
--////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles Entrées
--///////////////////////////////////////////////////////////////////////////////////////////////////
   -- =====================================================================
   -- Function		  : GetLabo(Laboratoire)
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   Function GetLabo_txt ( LABORATOIRE	    In  LABORATOIRE_Pubres.LABORATOIR	 Default Null,
	   				   	  RefLABORATOIRE    Out LABORATOIRE_Pubres.LABORATOIRECurTyp)
	   			Return Number;
	   --Pragma Restrict_References(GetLabo,WNDS);
   -- =====================================================================
   -- Function		  : GetLabo(IdLabo)
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   Function GetLabo_id ( ID_LABORATOIRE	In  LABORATOIRE_Pubres.Id_LABORATOIRE	 Default Null,
	   				   	  RefLABORATOIRE    Out LABORATOIRE_Pubres.LABORATOIRECurTyp)
	   			Return Number;
	   --Pragma Restrict_References(GetLabo,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function		  : GetLaboSpes
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
 	   Function GetLaboSpes_id ( ID_LABORATOIRE  In  LABORATOIRE_Pubres.Id_LABORATOIRE	 Default Null,
 	   				   	 	  RefSPELABS_REL   Out SPELABS_REL_Pubres.SPELABS_RELCurTyp2)
 	   			Return Number;
 	    Pragma Restrict_References(GetLaboSpes_id, WNDS,WNPS,RNPS);

-- ====================================================================
-- Fin de package
-- ====================================================================
End AVIDAL_LABORATOIRE;
/

CREATE OR REPLACE Package Body AVIDAL_LABORATOIRE Is
-- ====================================================================
-- Script     : AVIDAL_LABORATOIRE    Type : Package Body
-- Objet      : Ressources Select tables
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:39
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

--////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles Entrées
--///////////////////////////////////////////////////////////////////////////////////////////////////
  -- --------------------------------------------------------------
  -- Fonction de sélection  : GetLabo_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   Procedure GetLabo_txt ( LABORATOIRE	 In  LABORATOIRE_Pubres.LABORATOIR	 Default Null,
	   				   	  RefLABORATOIRE Out LABORATOIRE_Pubres.LABORATOIRECurTyp,
						  Ret			 Out Number)
	   			Is
	   Begin
	   		Ret := GetLabo_txt ( LABORATOIRE, RefLABORATOIRE);
	   End GetLabo_txt;
	   Function GetLabo_txt ( LABORATOIRE	 In  LABORATOIRE_Pubres.LABORATOIR	 Default Null,
	   				   	  RefLABORATOIRE Out LABORATOIRE_Pubres.LABORATOIRECurTyp)
	   			Return Number Is
	   Begin
		Open GetLabo_txt.RefLABORATOIRE For
		Select ID_LABORATOIRE, null LAB_ID_LABORATOIRE, LABORATOIRE,
			   ADR1, ADR2, ADR3, CP, VILLE, CEDEX, PAYS, TELEPHONE,
			   TELECOPIE, EMAIL, INTERNET, COMMENTAIRE, MORT, DCREAT, DMODIF, DREVIS, VIGNETTE
		  From LABORATOIRE
		 Where UPPER(TRANSLATE(LABORATOIRE, AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2)) LIKE UPPER(TRANSLATE(GetLabo_txt.LABORATOIRE, AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
		 Order by LABORATOIRE;

     -------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetLabo_txt%');
--         COMMIT;
-------------------------------------------------------------

	   	Return 1;
		EXCEPTION
		When Others Then
			 Return SQLCODE;
	   End GetLabo_txt;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetLabo_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   Procedure GetLabo_id ( ID_LABORATOIRE	In  LABORATOIRE_Pubres.Id_LABORATOIRE	 Default Null,
	   				   	  RefLABORATOIRE    Out LABORATOIRE_Pubres.LABORATOIRECurTyp,
						  Ret				Out	Number)
	   			Is
	   Begin
	   		Ret := GetLabo_id ( ID_LABORATOIRE, RefLABORATOIRE);
	   End GetLabo_id;
	   Function GetLabo_id ( ID_LABORATOIRE	In  LABORATOIRE_Pubres.Id_LABORATOIRE	 Default Null,
	   				   	  RefLABORATOIRE    Out LABORATOIRE_Pubres.LABORATOIRECurTyp)
	   			Return Number Is
	   Begin
		Open GetLabo_id.RefLABORATOIRE For
		Select ID_LABORATOIRE, null LAB_ID_LABORATOIRE, LABORATOIRE,
			   ADR1, ADR2, ADR3, CP, VILLE, CEDEX, PAYS, TELEPHONE,
			   TELECOPIE, EMAIL, INTERNET, COMMENTAIRE, MORT, DCREAT, DMODIF, DREVIS, VIGNETTE
		  From LABORATOIRE
		 Where (Id_LABORATOIRE = GetLabo_id.Id_LABORATOIRE Or GetLabo_id.Id_LABORATOIRE Is null);

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetLabo_id%');
--         COMMIT;
-------------------------------------------------------------


	   	Return 1;
		EXCEPTION
		When Others Then
			 Return SQLCODE;
	   End GetLabo_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetLaboSpes_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
 	   Procedure GetLaboSpes_id ( ID_LABORATOIRE  In  LABORATOIRE_Pubres.Id_LABORATOIRE	 Default Null,
 	   				   	 	  RefSPELABS_REL  Out SPELABS_REL_Pubres.SPELABS_RELCurTyp2,
							  Ret			  Out Number )
 	   			Is
	   Begin
	   		Ret := GetLaboSpes_id ( ID_LABORATOIRE, RefSPELABS_REL);
	   End GetLaboSpes_id;
 	   Function GetLaboSpes_id ( ID_LABORATOIRE  In  LABORATOIRE_Pubres.Id_LABORATOIRE	 Default Null,
 	   				   	 	  RefSPELABS_REL   Out SPELABS_REL_Pubres.SPELABS_RELCurTyp2)
 	   			Return Number Is
	   Begin
	   --
		  Open GetLaboSpes_id.RefSPELABS_REL For
		Select b.ID_SPECIALITE, b.BVALID, b.BENCOURS, b.NOMUSER, b.DENOMSPE,
			   b.FORME, b.DOSAGE, b.complement, b.COMMAMMPOSO, b.RESERVE, b.INFERIEURAGE,
			   b.UNITINF, b.SUPERIEURAGE, b.UNIFSUP, b.INFERIEURPOIDS, b.SUPERIEURPOIDS,
			   b.DENOMAMM, b.NUMDOSAMM, b.SPECATEGORIE, b.SOURCE, b.DATESOURCE, b.REMARQUES,
			   b.DCREAT, b.DMODIF, b.DREVIS, a.TITULAIREEXPLOITANT
		  From SPECIALITE b, SPELABS_REL a
		 Where (a.Id_LABORATOIRE = GetLaboSpes_id.Id_LABORATOIRE Or GetLaboSpes_id.Id_LABORATOIRE Is null)
  		   And  b.ID_SPECIALITE = a.ID_SPECIALITE;
	   --

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetLaboSpes_id%');
--         COMMIT;
-------------------------------------------------------------


	   Return 1;
		EXCEPTION
		When Others Then
			 Return SQLCODE;
	   End GetLaboSpes_id;


-- ====================================================================
-- Fin de package
-- ====================================================================
End AVIDAL_LABORATOIRE;
/
CREATE OR REPLACE PACKAGE "AVIDAL_LIVRET"     AS
-- ======================================================================================
-- Script      : AVIDAL_LIVRET    Type : Package
-- Objet       :
-- Owner       : VIDAL
-- Création    : 05/03/2001
-- Auteur      : SG K2/PixelPark
-- Généré par  :
-- Modifié par : MR - 16/03/2001 - Modification #1 : Création de RMC_GetFromKeywordLivret
--             : MR - 23/03/2001 - Modification #2 : Création de GetSpeLivret
-- ======================================================================================
--*********************************************************************
--                          Déclarations
--*********************************************************************
-- --------------------------------------------------------------------
-- Sous-types table : LIVRETVIDAL/LIVRETHOP
-- --------------------------------------------------------------------
  SUBTYPE ID_SPEPRESENTATION IS  NUMBER;
  SUBTYPE IDORGANISME        IS  LIVRETVIDAL.IDORGANISME%TYPE;
  SUBTYPE PRIX_TTC_F         IS  LIVRETVIDAL.PRIX_TTC_F%TYPE;
  SUBTYPE PRIX_TTC_E         IS  LIVRETVIDAL.PRIX_TTC_E%TYPE;
  SUBTYPE DISPO              IS  LIVRETVIDAL.DISPO%TYPE;
  SUBTYPE COMMENTAIRE        IS  LIVRETVIDAL.COMMENTAIRE%TYPE;
  SUBTYPE CODHOPITAL		 IS  LIVRETVIDAL.CODHOPITAL%TYPE;
-- --------------------------------------------------------------------
-- Record : LIVRETVIDAL/LIVRETHOP
-- --------------------------------------------------------------------
  TYPE LIVRETVIDALRec IS RECORD
  (
  ID_SPEPRESENTATION Avidal_Livret.ID_SPEPRESENTATION,
  IDORGANISME        Avidal_Livret.IDORGANISME,
  PRIX_TTC_F         VARCHAR2(24),
  PRIX_TTC_E         VARCHAR2(24),
  DISPO              Avidal_Livret.DISPO,
  COMMENTAIRE        Avidal_Livret.COMMENTAIRE,
  CODHOPITAL	    Avidal_Livret.CODHOPITAL
  );
-- --------------------------------------------------------------------
-- Ref Cursor : LIVRETVIDAL/LIVRETHOP
-- --------------------------------------------------------------------
  TYPE LIVRETVIDALCurTyp 	IS REF CURSOR RETURN Avidal_Livret.LIVRETVIDALRec;
-- --------------------------------------------------------------------
-- Sous-types table : spepresentationhop
-- --------------------------------------------------------------------
  SUBTYPE IDORGANISMEHOP        IS SPEPRESENTATIONHOP.IDORGANISME%TYPE;
  SUBTYPE ID_SPEPRESENTATIONHOP IS SPEPRESENTATIONHOP.ID_SPEPRESENTATIONHOP%TYPE;
  SUBTYPE NOM                   IS SPEPRESENTATIONHOP.NOM%TYPE;
  SUBTYPE PRESENTATION          IS SPEPRESENTATIONHOP.PRESENTATION%TYPE;
  SUBTYPE FORME                 IS SPEPRESENTATIONHOP.FORME%TYPE;
  SUBTYPE DOSAGE                IS SPEPRESENTATIONHOP.DOSAGE%TYPE;
  SUBTYPE CIP                   IS SPEPRESENTATIONHOP.CIP%TYPE;
  SUBTYPE UCD                   IS SPEPRESENTATIONHOP.UCD%TYPE;
  SUBTYPE LABO                  IS SPEPRESENTATIONHOP.LABO%TYPE;
-- --------------------------------------------------------------------
-- Sous-types table : RMC_THE
-- --------------------------------------------------------------------
  SUBTYPE THE_IDE               IS RMC_THE.THE_IDE%TYPE;
  SUBTYPE TYPE_IDE              IS RMC_THE.TYPE_IDE%TYPE;
  SUBTYPE THE_CAF               IS RMC_THE.THE_CAF%TYPE;
  SUBTYPE THE_LAF               IS RMC_THE.THE_LAF%TYPE;
  SUBTYPE ID                    IS RMC_THE.ID%TYPE;
-- --------------------------------------------------------------------
-- Record : spepresentationhop
-- --------------------------------------------------------------------
  TYPE SpepresentationHopRec IS RECORD
  (
  IDORGANISME           Avidal_Livret.IDORGANISMEHOP,
  ID_SPEPRESENTATIONHOP Avidal_Livret.ID_SPEPRESENTATIONHOP,
  NOM                   Avidal_Livret.NOM,
  PRESENTATION          Avidal_Livret.PRESENTATION,
  FORME                 Avidal_Livret.FORME,
  DOSAGE                Avidal_Livret.DOSAGE,
  CIP                   Avidal_Livret.CIP,
  UCD                   Avidal_Livret.UCD,
  LABO                  Avidal_Livret.LABO,
  CODHOPITAL			Avidal_Livret.CODHOPITAL,
  PRIX_TTC_F            VARCHAR2(24),
  PRIX_TTC_E            VARCHAR2(24),
  DISPO                 Avidal_Livret.DISPO,
  COMMENTAIRE           Avidal_Livret.COMMENTAIRE
  );
-- --------------------------------------------------------------------
-- Ref Cursor : LIVRETVIDAL/LIVRETHOP
-- --------------------------------------------------------------------
  TYPE SpepresentationHopCurTyp 	IS REF CURSOR RETURN Avidal_Livret.SpepresentationHopRec;
-- --------------------------------------------------------------------
-- Sous-types table : T_SUBHOP
-- --------------------------------------------------------------------
  SUBTYPE IDORGANISME_SUBHOP  IS  T_SUBHOP.IDORGANISME%TYPE;
  SUBTYPE ID_T_SUBHOP  IS  T_SUBHOP.ID_T_SUBHOP%TYPE;
  SUBTYPE LIBELLE      IS  T_SUBHOP.LIBELLE%TYPE;
-- --------------------------------------------------------------------
-- Record : T_SUBHOP
-- --------------------------------------------------------------------
  TYPE T_SUBHOPRec IS RECORD
  (
  IDORGANISME   Avidal_Livret.IDORGANISME_SUBHOP,
  ID_T_SUBHOP   Avidal_Livret.ID_T_SUBHOP,
  LIBELLE       Avidal_Livret.LIBELLE
  );
-- --------------------------------------------------------------------
-- Record : RMC_THE
-- --------------------------------------------------------------------
  TYPE RMC_THERec IS RECORD
  (
   THE_IDE             Avidal_Livret.THE_IDE,
   TYPE_IDE            Avidal_Livret.TYPE_IDE,
   THE_CAF             Avidal_Livret.THE_CAF,
   THE_LAF             Avidal_Livret.THE_LAF,
   ID                  Avidal_Livret.ID,
   IDORGANISME         Avidal_Livret.IDORGANISME,
   FLAG                VARCHAR2(1)
  );
-- --------------------------------------------------------------------
-- Ref Cursor : T_SUBHOP
-- --------------------------------------------------------------------
  TYPE SUBHOPCurTyp 	  IS REF CURSOR RETURN Avidal_Livret.T_SUBHOPRec;
  TYPE RMC_THEHopCurTyp IS REF CURSOR RETURN Avidal_Livret.RMC_TheRec;
  TYPE RMC_TheCurTyp    IS REF CURSOR;
-- --------------------------------------------------------------------
-- Sous-types table : COMPOVIDAL/COPMPOHOP
-- --------------------------------------------------------------------
  SUBTYPE IDORGANISME_COMPO     IS  NUMBER;
  SUBTYPE ID_SPEPRESENTATION_COMPO IS  NUMBER;
  SUBTYPE ID_T_SUB              IS  NUMBER;
-- --------------------------------------------------------------------
-- Record : COMPOVIDAL/COPMPOHOP
-- --------------------------------------------------------------------
  TYPE COMPORec IS RECORD
  (
  IDORGANISMECOMPO      Avidal_Livret.IDORGANISME_COMPO,
  ID_SPEPRESENTATIONHOP Avidal_Livret.ID_SPEPRESENTATION_COMPO,
  ID_T_SUB              Avidal_Livret.ID_T_SUB,
  LIBELLE               Avidal_Livret.LIBELLE
  );
-- --------------------------------------------------------------------
-- Ref Cursor : COMPOVIDAL/COPMPOHOP
-- --------------------------------------------------------------------
  TYPE COMPOCurTyp 	IS REF CURSOR RETURN Avidal_Livret.COMPORec;
--*********************************************************************
--                      Procédure
--*********************************************************************
  -- ----------------------------------------------------------
  -- Procedure d'insertion - Table : LIVRETVIDAL/LIVRETHOP
  -- ----------------------------------------------------------
  PROCEDURE P_Ins_Livret(
      Param              IN  NUMBER,
      ID_SPEPRESENTATION IN  Avidal_Livret.ID_SPEPRESENTATION,
      IDORGANISME        IN  Avidal_Livret.IDORGANISME,
      PRIX_TTC_F         IN  Avidal_Livret.PRIX_TTC_F,
      PRIX_TTC_E         IN  Avidal_Livret.PRIX_TTC_E,
      DISPO              IN  Avidal_Livret.DISPO,
      COMMENTAIRE        IN  Avidal_Livret.COMMENTAIRE,
	  CODHOPITAL		 IN  Avidal_Livret.CODHOPITAL,
      Cod_Trt            OUT VARCHAR2);
  -- ----------------------------------------------------------
  -- Procedure d'suppression - Table : LIVRETVIDAL/LIVRETHOP
  -- ----------------------------------------------------------
  PROCEDURE P_Del_Livret(
      Param              IN  NUMBER,
      ID_SPEPRESENTATION IN  Avidal_Livret.ID_SPEPRESENTATION,
      IDORGANISME        IN  Avidal_Livret.IDORGANISME,
      Cod_Trt            OUT VARCHAR2);
  -- ----------------------------------------------------------
  -- Procedure de Modification - Tables : LIVRETVIDAL/LIVRETHOP
  -- ----------------------------------------------------------
  PROCEDURE P_Upd_Livret(
      Param              IN  NUMBER,
      ID_SPEPRESENTATION IN  Avidal_Livret.ID_SPEPRESENTATION,
      IDORGANISME        IN  Avidal_Livret.IDORGANISME,
      PRIX_TTC_F         IN  Avidal_Livret.PRIX_TTC_F,
      PRIX_TTC_E         IN  Avidal_Livret.PRIX_TTC_E,
      DISPO              IN  Avidal_Livret.DISPO,
      COMMENTAIRE        IN  Avidal_Livret.COMMENTAIRE,
      CODHOPITAL		 IN  Avidal_Livret.CODHOPITAL,
      Cod_Trt            OUT VARCHAR2);
  -- ----------------------------------------------------------
  -- Procedure de Modification ou d'Insertion - Tables : LIVRETVIDAL/LIVRETHOP
  -- Si l'enregistrement n'existe pas insert si non update
  -- ----------------------------------------------------------
  PROCEDURE P_InsUpd_Livret(
      Param              IN  NUMBER,
      ID_SPEPRESENTATION IN  Avidal_Livret.ID_SPEPRESENTATION,
      IDORGANISME        IN  Avidal_Livret.IDORGANISME,
      PRIX_TTC_F         IN  VARCHAR2,
      PRIX_TTC_E         IN  VARCHAR2,
      DISPO              IN  Avidal_Livret.DISPO,
      COMMENTAIRE        IN  Avidal_Livret.COMMENTAIRE,
      CODHOPITAL		 IN  Avidal_Livret.CODHOPITAL,
      Cod_Trt            OUT VARCHAR2);
  -- ----------------------------------------------------------
  -- Procedure de Sélection - Tables : LIVRETVIDAL/LIVRETHOP
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- ----------------------------------------------------------
  PROCEDURE P_Sel_Livret(
      Param              IN  NUMBER,
      ID_SPEPRESENTATION IN  Avidal_Livret.ID_SPEPRESENTATION,
      IDORGANISME        IN  Avidal_Livret.IDORGANISME,
      PRIX_TTC_F         IN  VARCHAR2,
      PRIX_TTC_E         IN  VARCHAR2,
      DISPO              IN  Avidal_Livret.DISPO,
      COMMENTAIRE        IN  Avidal_Livret.COMMENTAIRE,
      CODHOPITAL		 IN  Avidal_Livret.CODHOPITAL,
      RefLIVRET          OUT Avidal_Livret.LIVRETVIDALCurTyp,
      Ret			           OUT NUMBER);
  -- ----------------------------------------------------------
  -- Procedure d'insertion - Table : COMPOVIDAL/COMPOHOP
  -- ----------------------------------------------------------
  PROCEDURE P_Ins_Compo(
      Param                 IN  NUMBER,
      IDORGANISME           IN  Avidal_Livret.IDORGANISME,
      ID_SPEPRESENTATIONHOP IN  Avidal_Livret.ID_SPEPRESENTATIONHOP,
      ID_T_SUB              IN  Avidal_Livret.ID_T_SUB,
      Cod_Trt               OUT VARCHAR2);
  -- ----------------------------------------------------------
  -- Procedure d'suppression - Table : COMPOVIDAL/COMPOHOP
  -- ----------------------------------------------------------
  PROCEDURE P_Del_Compo(
      Param                 IN  NUMBER,
      IDORGANISME           IN  Avidal_Livret.IDORGANISME,
      ID_SPEPRESENTATIONHOP IN  Avidal_Livret.ID_SPEPRESENTATIONHOP,
      ID_T_SUB              IN  Avidal_Livret.ID_T_SUB,
      Cod_Trt               OUT VARCHAR2);
  -- ----------------------------------------------------------
  -- Procedure de Sélection - Tables : COMPOVIDAL/COMPOHOP
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- ----------------------------------------------------------
  PROCEDURE P_Sel_Compo(
      Param                 IN  NUMBER,
      IDORGANISME           IN  Avidal_Livret.IDORGANISME,
      ID_SPEPRESENTATIONHOP IN  Avidal_Livret.ID_SPEPRESENTATIONHOP,
      ID_T_SUB              IN  Avidal_Livret.ID_T_SUB,
      RefCOMPO              OUT Avidal_Livret.COMPOCurTyp,
      Ret			              OUT NUMBER);
  -- ----------------------------------------------------------
  -- Procedure d'insertion - Table : SpepresentationHop
  -- ----------------------------------------------------------
 PROCEDURE P_Ins_SpepresentationHop(
      IDORGANISME           IN  Avidal_Livret.IDORGANISME,
      ID_SPEPRESENTATIONHOP OUT Avidal_Livret.ID_SPEPRESENTATIONHOP,
      NOM                   IN  Avidal_Livret.NOM,
      PRESENTATION          IN  Avidal_Livret.PRESENTATION,
      FORME                 IN  Avidal_Livret.FORME,
      DOSAGE                IN  Avidal_Livret.DOSAGE,
      CIP                   IN  Avidal_Livret.CIP,
      UCD                   IN  Avidal_Livret.UCD,
      LABO                  IN  Avidal_Livret.LABO,
      CODHOPITAL            IN  Avidal_Livret.CODHOPITAL,
      PRIX_TTC_F            IN  VARCHAR2,
      PRIX_TTC_E            IN  VARCHAR2,
      DISPO                 IN  Avidal_Livret.DISPO,
      COMMENTAIRE           IN  Avidal_Livret.COMMENTAIRE,
      Cod_Trt               OUT VARCHAR2);
  -- ----------------------------------------------------------
  -- Procedure d'suppression - Table : SpepresentationHop
  -- ----------------------------------------------------------
  PROCEDURE P_Del_SpepresentationHop(
      IDORGANISME           IN  Avidal_Livret.IDORGANISME,
      ID_SPEPRESENTATIONHOP IN  Avidal_Livret.ID_SPEPRESENTATIONHOP,
      Cod_Trt            OUT VARCHAR2);
  -- ----------------------------------------------------------
  -- Procedure de Modification - Tables : SpepresentationHop
  -- ----------------------------------------------------------
  PROCEDURE P_Upd_SpepresentationHop(
      IDORGANISME           IN  Avidal_Livret.IDORGANISME,
      ID_SPEPRESENTATIONHOP IN  Avidal_Livret.ID_SPEPRESENTATIONHOP,
      NOM                   IN  Avidal_Livret.NOM,
      PRESENTATION          IN  Avidal_Livret.PRESENTATION,
      FORME                 IN  Avidal_Livret.FORME,
      DOSAGE                IN  Avidal_Livret.DOSAGE,
      CIP                   IN  Avidal_Livret.CIP,
      UCD                   IN  Avidal_Livret.UCD,
      LABO                  IN  Avidal_Livret.LABO,
      CODHOPITAL            IN  Avidal_Livret.CODHOPITAL,
      PRIX_TTC_F            IN  VARCHAR2,
      PRIX_TTC_E            IN  VARCHAR2,
      DISPO                 IN  Avidal_Livret.DISPO,
      COMMENTAIRE           IN  Avidal_Livret.COMMENTAIRE,
      Cod_Trt            OUT VARCHAR2);
  -- ----------------------------------------------------------
  -- Procedure de Sélection - Tables : SpepresentationHop
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- ----------------------------------------------------------
  PROCEDURE P_Sel_SpepresentationHop(
      IDORGANISME           IN  Avidal_Livret.IDORGANISME,
      ID_SPEPRESENTATIONHOP IN  Avidal_Livret.ID_SPEPRESENTATIONHOP,
      NOM                   IN  Avidal_Livret.NOM,
      PRESENTATION          IN  Avidal_Livret.PRESENTATION,
      FORME                 IN  Avidal_Livret.FORME,
      DOSAGE                IN  Avidal_Livret.DOSAGE,
      CIP                   IN  Avidal_Livret.CIP,
      UCD                   IN  Avidal_Livret.UCD,
      LABO                  IN  Avidal_Livret.LABO,
      CODHOPITAL            IN  Avidal_Livret.CODHOPITAL,
      PRIX_TTC_F            IN  VARCHAR2,
      PRIX_TTC_E            IN  VARCHAR2,
      DISPO                 IN  Avidal_Livret.DISPO,
      COMMENTAIRE           IN  Avidal_Livret.COMMENTAIRE,
      RefSpepresentationHop OUT Avidal_Livret.SpepresentationHopCurTyp,
      Ret			          OUT NUMBER);
  -- ----------------------------------------------------------
  -- Procedure d'insertion - Table : T_SUBHOP
  -- ----------------------------------------------------------
 PROCEDURE P_Ins_SUBHOP(
      IDORGANISME   IN Avidal_Livret.IDORGANISME,
      ID_T_SUBHOP   OUT Avidal_Livret.ID_T_SUBHOP,
      LIBELLE       IN Avidal_Livret.LIBELLE,
      Cod_Trt       OUT VARCHAR2);
  -- ----------------------------------------------------------
  -- Procedure d'suppression - Table : T_SUBHOP
  -- ----------------------------------------------------------
  PROCEDURE P_Del_SUBHOP(
      IDORGANISME  IN Avidal_Livret.IDORGANISME,
      ID_T_SUBHOP  IN Avidal_Livret.ID_T_SUBHOP,
      Cod_Trt      OUT VARCHAR2);
  -- ----------------------------------------------------------
  -- Procedure de Modification - Tables : T_SUBHOP
  -- ----------------------------------------------------------
  PROCEDURE P_Upd_SUBHOP(
      IDORGANISME  IN Avidal_Livret.IDORGANISME,
      ID_T_SUBHOP  IN Avidal_Livret.ID_T_SUBHOP,
      LIBELLE      IN Avidal_Livret.LIBELLE,
      Cod_Trt      OUT VARCHAR2);
  -- ----------------------------------------------------------
  -- Procedure de Sélection - Tables : T_SUBHOP
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- ----------------------------------------------------------
  PROCEDURE P_Sel_SUBHOP(
      IDORGANISME  IN Avidal_Livret.IDORGANISME,
      ID_T_SUBHOP  IN Avidal_Livret.ID_T_SUBHOP,
      LIBELLE      IN Avidal_Livret.LIBELLE,
      RefSUBHOP OUT Avidal_Livret.SUBHOPCurTyp,
      Ret			              OUT NUMBER);
  -- ----------------------------------------------------------------
  -- Procedure de Sélection - Tables : T_SUBHOP
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- Modification #1 : Effectue une recherche dans la table des mots clés
  --   sur le début des Mots clés extraits de la string de recherche.
  --   Permet d'atteindre un élément de type quelconque de thesaurus.
  --   Dans le cas d'une spécialité : recherche dans le Livret de
  --   l'organisme (Id_hop) concerné et/ou dans RMC_THE selon la demande (Recherche).
  -- ----------------------------------------------------------------
--///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--Nouvelles Entrées
--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  PROCEDURE RMC_GetFromKeyWordLivret_txt( ORI_IDE       IN     Rmc_Cle_Pubres.ORI_IDE  DEFAULT NULL,
                                      TYPE_IDE      IN     Rmc_Cle_Pubres.TYPE_IDE DEFAULT 2,
                                      CLE_LIB       IN     Rmc_Cle_Pubres.CLE_LIB  DEFAULT '%',
                                      Recherche     IN     VARCHAR2,
                                      Id_hop        IN     Avidal_Livret.IDORGANISME,
                                      RefLnkTHE     OUT    Avidal_Livret.RMC_THECurtyp,
                                      Ret           OUT    NUMBER);
  FUNCTION RMC_GetFromKeyWordLivret_txt( ORI_IDE       IN     Rmc_Cle_Pubres.ORI_IDE  DEFAULT NULL,
                                     TYPE_IDE      IN     Rmc_Cle_Pubres.TYPE_IDE DEFAULT 2,
                                     CLE_LIB       IN     Rmc_Cle_Pubres.CLE_LIB  DEFAULT '%',
                                     Recherche     IN     VARCHAR2,
                                     Id_hop        IN     Avidal_Livret.IDORGANISME,
                                     RefLnkTHE     OUT    Avidal_Livret.RMC_THECurtyp)
                                   RETURN  NUMBER;
  -- ----------------------------------------------------------------
  -- Procedure de Sélection
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- Modification #2 : Retourne les spécialités répertoriées dans
  --                   les Livrets (VIDAL et HOPITAL) de l'Organisme
  --                   passé en paramètre (Id_hop).
  -- ----------------------------------------------------------------
  PROCEDURE GetSpeLivret_id ( Id_hop      IN    Avidal_Livret.IDORGANISME,
                           RefLnkTHE   OUT   Specialite_Pubres.SPECIALITECurTyp2,
                           Ret         OUT   NUMBER);
  FUNCTION GetSpeLivret_id ( Id_hop      IN    Avidal_Livret.IDORGANISME,
                          RefLnkTHE   OUT   Specialite_Pubres.SPECIALITECurTyp2)
                        RETURN  NUMBER;
       -- -------------------------------------------------------------------
       -- Procedure   : RMC_GetSpeLivret
       -- -------------------------------------------------------------------
  PROCEDURE RMC_GetSpeLivret_id ( The_Ide    IN    Rmc_The_Pubres.THE_IDE,
                               Type_Ide   IN    Rmc_The_Pubres.TYPE_IDE,
                               Hop        IN    NUMBER,
                               RefThe     OUT   Avidal_Livret.RMC_THEHopCurTyp,
                               Ret        OUT   NUMBER);
       -- -------------------------------------------------------------------
       -- Fonction   : RMC_GetSpeLivret
       -- Objet      : Recherche des spécifications à partir (au choix)
       --              . D'un code CIP        : recherche hiérachique père
       --              . D'une substance      : Recherche profil père
       --              . D'une indication     : Recherche profil père
       --              . D'une contre indic.  : Recherche profil père
       --              . D'une classe thera.  : Recherche profil père
       --              . D'une classe IAM     : Recherche profil père
       --              . D'un labo            : Recherche profil père
       --            : Modification #1
       --              . D'un labo            : Recherche profil fils
       --              . D'une classe IAM     : Recherche profil fils
       -- -------------------------------------------------------------------
  FUNCTION RMC_GetSpeLivret_id ( The_Ide    IN    Rmc_The_Pubres.THE_IDE,
                              Type_Ide   IN    Rmc_The_Pubres.TYPE_IDE,
                              Hop        IN    NUMBER,
                              RefThe     OUT   Avidal_Livret.RMC_THEHopCurTyp)
                           RETURN NUMBER;

  -- -------------------------------------------------------------------------------------------------
  -- Procedure de suppression - Table : LIVRETVIDAL/LIVRETHOP/LIVRETVIDALTEMP/LIVRETHOPTEMP
  -- -------------------------------------------------------------------------------------------------
  PROCEDURE P_Delete_Tables_Livret(
      Idorganisme        IN  NUMBER,
      Cod_Trt            OUT VARCHAR2);

--===================================================================================================================
   TTyp_Cst  Rmc_The_Pubres.TabType_Cst;
   ch1       VARCHAR2(255) := 'éêèëàäâïîöôüûùÿ';
   ch2       VARCHAR2(255) := 'eeeeaaaiioouuuy';

END Avidal_Livret;
/

CREATE OR REPLACE PACKAGE BODY "AVIDAL_LIVRET"          AS
-- =======================================================================================
-- Script      : AVIDAL_LIVRET    Type : Package Body
-- Objet       :
-- Owner       : VIDAL
-- Création    : 05/03/2001
-- Auteur      : SG K2/PixelPark
-- Généré par  :
-- Modifié par : MR - 16/03/2001 : Modification #1 : Création de RMC_GetFromKeywordLivret
--             : MR - 23/03/2001 - Modification #2 : Création de GetSpeLivret
-- =======================================================================================
  -- --------------------------------------------------------
  -- Variables du package
  -- --------------------------------------------------------
  MotEt         VARCHAR2(1) := '&';
  MotOu         VARCHAR2(1) := '|';
  MotSauf       VARCHAR2(1) := '#';
  MotParOpen    VARCHAR2(1) := '(';
  MotParClose   VARCHAR2(1) := ')';
  Home_Hie      VARCHAR2(60) := 'HIER_0';    -- Home hierarchique
  Home_Prf      VARCHAR2(60) := 'PROF_0';    -- Home profile
  Type_To       Rmc_The_Pubres.TYPE_IDE;
  -- ----------------------------------------------------------
  -- Procedure d'insertion - Table : LIVRETVIDAL/LIVRETHOP
  -- ----------------------------------------------------------
 PROCEDURE P_Ins_Livret(
      Param              IN  NUMBER,
      ID_SPEPRESENTATION IN  Avidal_Livret.ID_SPEPRESENTATION,
      IDORGANISME        IN  Avidal_Livret.IDORGANISME,
      PRIX_TTC_F         IN  Avidal_Livret.PRIX_TTC_F,
      PRIX_TTC_E         IN  Avidal_Livret.PRIX_TTC_E,
      DISPO              IN  Avidal_Livret.DISPO,
      COMMENTAIRE        IN  Avidal_Livret.COMMENTAIRE,
	  CODHOPITAL		 IN  Avidal_Livret.CODHOPITAL,
      Cod_Trt            OUT VARCHAR2) IS
 BEGIN
  IF P_Ins_Livret.Param = 1 THEN
    INSERT INTO LIVRETVIDAL(
           ID_SPEPRESENTATION,
           IDORGANISME,
           PRIX_TTC_F,
           PRIX_TTC_E,
           DISPO,
           COMMENTAIRE,
		   CODHOPITAL)
    VALUES (
           P_Ins_Livret.ID_SPEPRESENTATION,
           P_Ins_Livret.IDORGANISME,
           P_Ins_Livret.PRIX_TTC_F,
           P_Ins_Livret.PRIX_TTC_E,
           P_Ins_Livret.DISPO,
           P_Ins_Livret.COMMENTAIRE,
		   P_Ins_Livret.CODHOPITAL);
    P_Ins_Livret.Cod_Trt := 'ORA-00000 : Normal, Successful completion';
    COMMIT;
  ELSIF P_Ins_Livret.Param = 2 THEN
    INSERT INTO LIVRETHOP(
           ID_SPEPRESENTATIONHOP,
           IDORGANISME,
           PRIX_TTC_F,
           PRIX_TTC_E,
           DISPO,
           COMMENTAIRE,
		   CODHOPITAL)
    VALUES (
           P_Ins_Livret.ID_SPEPRESENTATION,
           P_Ins_Livret.IDORGANISME,
           P_Ins_Livret.PRIX_TTC_F,
           P_Ins_Livret.PRIX_TTC_E,
           P_Ins_Livret.DISPO,
           P_Ins_Livret.COMMENTAIRE,
		   P_Ins_Livret.CODHOPITAL);
    P_Ins_Livret.Cod_Trt := 'ORA-00000 : Normal, Successful completion';
    COMMIT;
  END IF;
  EXCEPTION
   WHEN OTHERS THEN
    P_Ins_Livret.Cod_Trt := SUBSTR(SQLERRM,1,255);
    ROLLBACK;
 END P_Ins_Livret;
  -- ----------------------------------------------------------
  -- Procedure d'suppression - Table : LIVRETVIDAL/LIVRETHOP
  -- ----------------------------------------------------------
  PROCEDURE P_Del_Livret(
      Param              IN  NUMBER,
      ID_SPEPRESENTATION IN  Avidal_Livret.ID_SPEPRESENTATION,
      IDORGANISME        IN  Avidal_Livret.IDORGANISME,
      Cod_Trt            OUT VARCHAR2) IS
  BEGIN
  IF P_Del_Livret.Param = 1 THEN
    DELETE FROM LIVRETVIDAL
      WHERE ID_SPEPRESENTATION = P_Del_Livret.ID_SPEPRESENTATION
      AND   IDORGANISME = P_Del_Livret.IDORGANISME;
    P_Del_Livret.Cod_Trt := 'ORA-00000 : Normal, Successful completion';
    COMMIT;
  ELSIF P_Del_Livret.Param = 2 THEN
    DELETE FROM LIVRETHOP
      WHERE ID_SPEPRESENTATIONHOP = P_Del_Livret.ID_SPEPRESENTATION
      AND   IDORGANISME = P_Del_Livret.IDORGANISME;
    P_Del_Livret.Cod_Trt := 'ORA-00000 : Normal, Successful completion';
    COMMIT;
  END IF;
  EXCEPTION
   WHEN OTHERS THEN
    P_Del_Livret.Cod_Trt := SUBSTR(SQLERRM,1,255);
    ROLLBACK;
  END P_Del_Livret;
  -- ----------------------------------------------------------
  -- Procedure de Modification - Tables : LIVRETVIDAL/LIVRETHOP
  -- ----------------------------------------------------------
  PROCEDURE P_Upd_Livret(
      Param              IN  NUMBER,
      ID_SPEPRESENTATION IN  Avidal_Livret.ID_SPEPRESENTATION,
      IDORGANISME        IN  Avidal_Livret.IDORGANISME,
      PRIX_TTC_F         IN  Avidal_Livret.PRIX_TTC_F,
      PRIX_TTC_E         IN  Avidal_Livret.PRIX_TTC_E,
      DISPO              IN  Avidal_Livret.DISPO,
      COMMENTAIRE        IN  Avidal_Livret.COMMENTAIRE,
	  CODHOPITAL		 IN  Avidal_Livret.CODHOPITAL,
      Cod_Trt            OUT VARCHAR2)IS
  BEGIN
  IF P_Upd_Livret.Param = 1 THEN
    UPDATE LIVRETVIDAL
    SET PRIX_TTC_F  = P_Upd_Livret.PRIX_TTC_F,
        PRIX_TTC_E  = P_Upd_Livret.PRIX_TTC_E,
        DISPO       = P_Upd_Livret.DISPO,
        COMMENTAIRE = P_Upd_Livret.COMMENTAIRE,
		CODHOPITAL  = P_Upd_Livret.CODHOPITAL
    WHERE ID_SPEPRESENTATION = P_Upd_Livret.ID_SPEPRESENTATION
      AND IDORGANISME = P_Upd_Livret.IDORGANISME;
    P_Upd_Livret.Cod_Trt := 'ORA-00000 : Normal, Successful completion';
    COMMIT;
  ELSIF P_Upd_Livret.Param = 2 THEN
    UPDATE LIVRETHOP
    SET PRIX_TTC_F  = P_Upd_Livret.PRIX_TTC_F,
        PRIX_TTC_E  = P_Upd_Livret.PRIX_TTC_E,
        DISPO       = P_Upd_Livret.DISPO,
        COMMENTAIRE = P_Upd_Livret.COMMENTAIRE,
		CODHOPITAL  = P_Upd_Livret.CODHOPITAL
    WHERE ID_SPEPRESENTATIONHOP = P_Upd_Livret.ID_SPEPRESENTATION
      AND IDORGANISME = P_Upd_Livret.IDORGANISME;
    P_Upd_Livret.Cod_Trt := 'ORA-00000 : Normal, Successful completion';
    COMMIT;
  END IF;
  EXCEPTION
   WHEN OTHERS THEN
    P_Upd_Livret.Cod_Trt := SUBSTR(SQLERRM,1,255);
    ROLLBACK;
  END P_Upd_Livret;
  -- -------------------------------------------------------------------------
  -- Procedure de Modification ou d'Insertion - Tables : LIVRETVIDAL/LIVRETHOP
  -- Si l'enregistrement n'existe pas insert si non update
  -- -------------------------------------------------------------------------
  PROCEDURE P_InsUpd_Livret(
      Param              IN  NUMBER,
      ID_SPEPRESENTATION IN  Avidal_Livret.ID_SPEPRESENTATION,
      IDORGANISME        IN  Avidal_Livret.IDORGANISME,
      PRIX_TTC_F         IN  VARCHAR2,
      PRIX_TTC_E         IN  VARCHAR2,
      DISPO              IN  Avidal_Livret.DISPO,
      COMMENTAIRE        IN  Avidal_Livret.COMMENTAIRE,
	  CODHOPITAL		 IN  Avidal_Livret.CODHOPITAL,
      Cod_Trt            OUT VARCHAR2)IS
    cpt NUMBER;
  BEGIN
  cpt := -1;
  --défini si insert ou update
  IF P_InsUpd_Livret.Param = 1 THEN
    SELECT COUNT(1) INTO cpt FROM LIVRETVIDAL
      WHERE ID_SPEPRESENTATION = P_InsUpd_Livret.ID_SPEPRESENTATION
      AND IDORGANISME          = P_InsUpd_Livret.IDORGANISME;
  ELSIF P_InsUpd_Livret.Param = 2 THEN
    SELECT COUNT(1) INTO cpt FROM LIVRETHOP
      WHERE ID_SPEPRESENTATIONHOP = P_InsUpd_Livret.ID_SPEPRESENTATION
      AND IDORGANISME             = P_InsUpd_Livret.IDORGANISME;
  END IF;
  IF cpt > 0 THEN
      IF P_InsUpd_Livret.Param = 1 THEN
        UPDATE LIVRETVIDAL
        SET PRIX_TTC_F  = TO_NUMBER(P_InsUpd_Livret.PRIX_TTC_F),
            PRIX_TTC_E  = TO_NUMBER(P_InsUpd_Livret.PRIX_TTC_E),
            DISPO       = P_InsUpd_Livret.DISPO,
            COMMENTAIRE = P_InsUpd_Livret.COMMENTAIRE,
			CODHOPITAL  = P_InsUpd_Livret.CODHOPITAL
        WHERE ID_SPEPRESENTATION = P_InsUpd_Livret.ID_SPEPRESENTATION
          AND IDORGANISME = P_InsUpd_Livret.IDORGANISME;
        P_InsUpd_Livret.Cod_Trt := 'ORA-00000 : Normal, Successful completion';
        COMMIT;
      ELSIF P_InsUpd_Livret.Param = 2 THEN
        UPDATE LIVRETHOP
        SET PRIX_TTC_F  = TO_NUMBER(P_InsUpd_Livret.PRIX_TTC_F),
            PRIX_TTC_E  = TO_NUMBER(P_InsUpd_Livret.PRIX_TTC_E),
            DISPO       = P_InsUpd_Livret.DISPO,
            COMMENTAIRE = P_InsUpd_Livret.COMMENTAIRE,
			CODHOPITAL  = P_InsUpd_Livret.CODHOPITAL
        WHERE ID_SPEPRESENTATIONHOP = P_InsUpd_Livret.ID_SPEPRESENTATION
          AND IDORGANISME = P_InsUpd_Livret.IDORGANISME;
        P_InsUpd_Livret.Cod_Trt := 'ORA-00000 : Normal, Successful completion';
        COMMIT;
      END IF;
  ELSIF cpt = 0 THEN
      IF P_InsUpd_Livret.Param = 1 THEN
        INSERT INTO LIVRETVIDAL(
               ID_SPEPRESENTATION,
               IDORGANISME,
               PRIX_TTC_F,
               PRIX_TTC_E,
               DISPO,
               COMMENTAIRE,
			   CODHOPITAL)
        VALUES (
               P_InsUpd_Livret.ID_SPEPRESENTATION,
               P_InsUpd_Livret.IDORGANISME,
               TO_NUMBER(P_InsUpd_Livret.PRIX_TTC_F),
               TO_NUMBER(P_InsUpd_Livret.PRIX_TTC_E),
               P_InsUpd_Livret.DISPO,
               P_InsUpd_Livret.COMMENTAIRE,
			   P_InsUpd_Livret.CODHOPITAL);
        P_InsUpd_Livret.Cod_Trt := 'ORA-00000 : Normal, Successful completion';
        COMMIT;
      ELSIF P_InsUpd_Livret.Param = 2 THEN
        INSERT INTO LIVRETHOP(
               ID_SPEPRESENTATIONHOP,
               IDORGANISME,
               PRIX_TTC_F,
               PRIX_TTC_E,
               DISPO,
               COMMENTAIRE,
			   CODHOPITAL)
        VALUES (
               P_InsUpd_Livret.ID_SPEPRESENTATION,
               P_InsUpd_Livret.IDORGANISME,
               TO_NUMBER(P_InsUpd_Livret.PRIX_TTC_F),
               TO_NUMBER(P_InsUpd_Livret.PRIX_TTC_E),
               P_InsUpd_Livret.DISPO,
               P_InsUpd_Livret.COMMENTAIRE,
			   P_InsUpd_Livret.CODHOPITAL);
        P_InsUpd_Livret.Cod_Trt := 'ORA-00000 : Normal, Successful completion';
        COMMIT;
      END IF;
  END IF;
  EXCEPTION
   WHEN OTHERS THEN
    P_InsUpd_Livret.Cod_Trt := SUBSTR(SQLERRM,1,255);
    ROLLBACK;
  END P_InsUpd_Livret;
  -- ----------------------------------------------------------
  -- Procedure de Sélection - Tables : LIVRETVIDAL/LIVRETHOP
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- ----------------------------------------------------------
  PROCEDURE P_Sel_Livret(
      Param              IN  NUMBER,
      ID_SPEPRESENTATION IN  Avidal_Livret.ID_SPEPRESENTATION,
      IDORGANISME        IN  Avidal_Livret.IDORGANISME,
      PRIX_TTC_F         IN  VARCHAR2,
      PRIX_TTC_E         IN  VARCHAR2,
      DISPO              IN  Avidal_Livret.DISPO,
      COMMENTAIRE        IN  Avidal_Livret.COMMENTAIRE,
	  CODHOPITAL		 IN  Avidal_Livret.CODHOPITAL,
      RefLIVRET          OUT Avidal_Livret.LIVRETVIDALCurTyp,
      Ret                OUT NUMBER)IS
	BEGIN
  IF P_Sel_Livret.Param = 1 THEN
		OPEN RefLIVRET FOR
		SELECT ID_SPEPRESENTATION,IDORGANISME,TO_CHAR(PRIX_TTC_F) PRIX_TTC_F, TO_CHAR(PRIX_TTC_E) PRIX_TTC_E, DISPO,COMMENTAIRE,CODHOPITAL
		  FROM LIVRETVIDAL
		 WHERE ID_SPEPRESENTATION = NVL(P_Sel_Livret.ID_SPEPRESENTATION,ID_SPEPRESENTATION)
		   AND IDORGANISME = P_Sel_Livret.IDORGANISME
		   AND NVL(PRIX_TTC_F,0.0)  = NVL(P_Sel_Livret.PRIX_TTC_F,NVL(PRIX_TTC_F,0.0))
		   AND NVL(PRIX_TTC_E,0.0)  = NVL(P_Sel_Livret.PRIX_TTC_E,NVL(PRIX_TTC_E,0.0))
		   AND UPPER(NVL(DISPO,'AAAAAAAA'))       LIKE UPPER(NVL(P_Sel_Livret.DISPO,NVL(DISPO,'AAAAAAAA')))
		   AND UPPER(NVL(COMMENTAIRE,'AAAAAAAA')) LIKE UPPER(NVL(P_Sel_Livret.COMMENTAIRE,NVL(COMMENTAIRE,'AAAAAAAA')))
		   AND UPPER(NVL(CODHOPITAL,'AAAAAAAA')) LIKE UPPER(NVL(P_Sel_Livret.CODHOPITAL,NVL(CODHOPITAL,'AAAAAAAA')));
   	P_Sel_Livret.Ret := 1;
	ELSIF P_Sel_Livret.Param = 2 THEN
		OPEN RefLIVRET FOR
		SELECT ID_SPEPRESENTATIONHOP,IDORGANISME,TO_CHAR(PRIX_TTC_F) PRIX_TTC_F, TO_CHAR(PRIX_TTC_E) PRIX_TTC_E,DISPO,COMMENTAIRE,CODHOPITAL
		  FROM LIVRETHOP
		 WHERE ID_SPEPRESENTATIONHOP = NVL(P_Sel_Livret.ID_SPEPRESENTATION,ID_SPEPRESENTATIONHOP)
		   AND IDORGANISME = P_Sel_Livret.IDORGANISME
		   AND NVL(PRIX_TTC_F,0.0)  = NVL(P_Sel_Livret.PRIX_TTC_F,NVL(PRIX_TTC_F,0.0))
		   AND NVL(PRIX_TTC_E,0.0)  = NVL(P_Sel_Livret.PRIX_TTC_E,NVL(PRIX_TTC_E,0.0))
		   AND UPPER(NVL(DISPO,'AAAAAAAA'))       LIKE UPPER(NVL(P_Sel_Livret.DISPO,NVL(DISPO,'AAAAAAAA')))
		   AND UPPER(NVL(COMMENTAIRE,'AAAAAAAA')) LIKE UPPER(NVL(P_Sel_Livret.COMMENTAIRE,NVL(COMMENTAIRE,'AAAAAAAA')))
		   AND UPPER(NVL(CODHOPITAL,'AAAAAAAA')) LIKE UPPER(NVL(P_Sel_Livret.CODHOPITAL,NVL(CODHOPITAL,'AAAAAAAA')));
   	P_Sel_Livret.Ret := 1;
	END IF;
  EXCEPTION
		WHEN OTHERS THEN
			 P_Sel_Livret.Ret := SQLCODE;
  END P_Sel_Livret;
  -- ----------------------------------------------------------
  -- Procedure d'insertion - Table : COMPOVIDAL/COMPOHOP
  -- ----------------------------------------------------------
 PROCEDURE P_Ins_Compo(
      Param                 IN  NUMBER,
      IDORGANISME           IN  Avidal_Livret.IDORGANISME,
      ID_SPEPRESENTATIONHOP IN  Avidal_Livret.ID_SPEPRESENTATIONHOP,
      ID_T_SUB              IN  Avidal_Livret.ID_T_SUB,
      Cod_Trt               OUT VARCHAR2) IS
 BEGIN
  IF P_Ins_Compo.Param = 1 THEN
    INSERT INTO COMPOVIDAL(
           IDORGANISME,
           ID_SPEPRESENTATIONHOP,
           ID_T_SUB)
    VALUES (
           P_Ins_Compo.IDORGANISME,
           P_Ins_Compo.ID_SPEPRESENTATIONHOP,
           P_Ins_Compo.ID_T_SUB);
    P_Ins_Compo.Cod_Trt := 'ORA-00000 : Normal, Successful completion';
    COMMIT;
  ELSIF P_Ins_Compo.Param = 2 THEN
    INSERT INTO COMPOHOP(
           IDORGANISME,
           ID_SPEPRESENTATIONHOP,
           ID_T_SUBHOP)
    VALUES (
           P_Ins_Compo.IDORGANISME,
           P_Ins_Compo.ID_SPEPRESENTATIONHOP,
           P_Ins_Compo.ID_T_SUB);
    P_Ins_Compo.Cod_Trt := 'ORA-00000 : Normal, Successful completion';
    COMMIT;
  END IF;
  EXCEPTION
   WHEN OTHERS THEN
    P_Ins_Compo.Cod_Trt := SUBSTR(SQLERRM,1,255);
    ROLLBACK;
 END P_Ins_Compo;
  -- ----------------------------------------------------------
  -- Procedure d'suppression - Table : COMPOVIDAL/COMPOHOP
  -- ----------------------------------------------------------
 PROCEDURE P_Del_Compo(
      Param              IN  NUMBER,
      IDORGANISME           IN  Avidal_Livret.IDORGANISME,
      ID_SPEPRESENTATIONHOP IN  Avidal_Livret.ID_SPEPRESENTATIONHOP,
      ID_T_SUB              IN  Avidal_Livret.ID_T_SUB,
      Cod_Trt            OUT VARCHAR2) IS
 BEGIN
   --
   -- pour supprimer toutes les associations d'un ID_SPEPRESENTATIONHOP et d'un IDORGANISME,
   -- il faut passer ID_T_SUB = 0 en parametre.
   --
  IF P_Del_Compo.Param = 1 THEN
    DELETE FROM COMPOVIDAL
      WHERE IDORGANISME = P_Del_Compo.IDORGANISME
        AND ID_SPEPRESENTATIONHOP = P_Del_Compo.ID_SPEPRESENTATIONHOP
        AND (  P_Del_Compo.ID_T_SUB = 0 OR ID_T_SUB = P_Del_Compo.ID_T_SUB);
    P_Del_Compo.Cod_Trt := 'ORA-00000 : Normal, Successful completion';
    COMMIT;
  ELSIF P_Del_Compo.Param = 2 THEN
    DELETE FROM COMPOHOP
      WHERE IDORGANISME = P_Del_Compo.IDORGANISME
        AND ID_SPEPRESENTATIONHOP = P_Del_Compo.ID_SPEPRESENTATIONHOP
        AND ( P_Del_Compo.ID_T_SUB = 0 OR ID_T_SUBHOP = P_Del_Compo.ID_T_SUB);
    P_Del_Compo.Cod_Trt := 'ORA-00000 : Normal, Successful completion';
    COMMIT;
  END IF;
  EXCEPTION
   WHEN OTHERS THEN
    P_Del_Compo.Cod_Trt := SUBSTR(SQLERRM,1,255);
    ROLLBACK;
 END P_Del_Compo;
  -- ----------------------------------------------------------
  -- Procedure de Sélection - Tables : COMPOVIDAL/COMPOHOP
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- ----------------------------------------------------------
 PROCEDURE P_Sel_Compo(
      Param                 IN  NUMBER,
      IDORGANISME           IN  Avidal_Livret.IDORGANISME,
      ID_SPEPRESENTATIONHOP IN  Avidal_Livret.ID_SPEPRESENTATIONHOP,
      ID_T_SUB              IN  Avidal_Livret.ID_T_SUB,
      RefCOMPO              OUT Avidal_Livret.COMPOCurTyp,
      Ret			              OUT NUMBER) IS
 BEGIN
  IF P_Sel_Compo.Param = 1 THEN
		OPEN RefCOMPO FOR
		SELECT C.IDORGANISME, C.ID_SPEPRESENTATIONHOP, C.ID_T_SUB, T.LIBELLE
      FROM COMPOVIDAL C, T_SUB T
		 WHERE C.IDORGANISME = P_Sel_Compo.IDORGANISME
		   AND C.ID_SPEPRESENTATIONHOP = DECODE(P_Sel_Compo.ID_SPEPRESENTATIONHOP,0,C.ID_SPEPRESENTATIONHOP,P_Sel_Compo.ID_SPEPRESENTATIONHOP)
		   AND C.ID_T_SUB  = DECODE(P_Sel_Compo.ID_T_SUB,0,C.ID_T_SUB,P_Sel_Compo.ID_T_SUB)
		   AND C.ID_T_SUB = T.ID_T_SUB;
   	P_Sel_Compo.Ret := 1;
	ELSIF P_Sel_Compo.Param = 2 THEN
		OPEN RefCOMPO FOR
		SELECT C.IDORGANISME, C.ID_SPEPRESENTATIONHOP, C.ID_T_SUBHOP, T.LIBELLE
      FROM COMPOHOP C, T_SUBHOP T
		 WHERE C.IDORGANISME = P_Sel_Compo.IDORGANISME
		   AND C.ID_SPEPRESENTATIONHOP = DECODE(P_Sel_Compo.ID_SPEPRESENTATIONHOP,0,C.ID_SPEPRESENTATIONHOP,P_Sel_Compo.ID_SPEPRESENTATIONHOP)
		   AND C.ID_T_SUBHOP  = DECODE(P_Sel_Compo.ID_T_SUB,0,C.ID_T_SUBHOP,P_Sel_Compo.ID_T_SUB)
		   AND C.IDORGANISME = T.IDORGANISME
		   AND C.ID_T_SUBHOP = T.ID_T_SUBHOP;
   	P_Sel_Compo.Ret := 1;
	END IF;
  EXCEPTION
		WHEN OTHERS THEN
			 P_Sel_Compo.Ret := SQLCODE;
  END P_Sel_Compo;
  -- ----------------------------------------------------------
  -- Procedure d'insertion - Table : SpepresentationHop
  -- ----------------------------------------------------------
 PROCEDURE P_Ins_SpepresentationHop(
      IDORGANISME           IN  Avidal_Livret.IDORGANISME,
      ID_SPEPRESENTATIONHOP OUT Avidal_Livret.ID_SPEPRESENTATIONHOP,
      NOM                   IN  Avidal_Livret.NOM,
      PRESENTATION          IN  Avidal_Livret.PRESENTATION,
      FORME                 IN  Avidal_Livret.FORME,
      DOSAGE                IN  Avidal_Livret.DOSAGE,
      CIP                   IN  Avidal_Livret.CIP,
      UCD                   IN  Avidal_Livret.UCD,
      LABO                  IN  Avidal_Livret.LABO,
	  CODHOPITAL			IN  Avidal_Livret.CODHOPITAL,
      PRIX_TTC_F            IN  VARCHAR2,
      PRIX_TTC_E            IN  VARCHAR2,
      DISPO                 IN  Avidal_Livret.DISPO,
      COMMENTAIRE           IN  Avidal_Livret.COMMENTAIRE,
      Cod_Trt               OUT VARCHAR2) IS
   v_id_spepresentationhop NUMBER;
 BEGIN
    SELECT SEQ_ID_SPEPRESENTATIONHOP.NEXTVAL
    INTO v_id_spepresentationhop
    FROM dual;
    INSERT INTO SPEPRESENTATIONHOP(
        IDORGANISME,
        ID_SPEPRESENTATIONHOP,
        NOM,
        PRESENTATION,
        FORME,
        DOSAGE,
        CIP,
        UCD,
        LABO)
    VALUES (
        P_Ins_SpepresentationHop.IDORGANISME,
        v_id_spepresentationhop,
        P_Ins_SpepresentationHop.NOM,
        P_Ins_SpepresentationHop.PRESENTATION,
        P_Ins_SpepresentationHop.FORME,
        P_Ins_SpepresentationHop.DOSAGE,
        P_Ins_SpepresentationHop.CIP,
        P_Ins_SpepresentationHop.UCD,
        P_Ins_SpepresentationHop.LABO);
    INSERT INTO LIVRETHOP(
           ID_SPEPRESENTATIONHOP,
           IDORGANISME,
           PRIX_TTC_F,
           PRIX_TTC_E,
           DISPO,
           COMMENTAIRE,
		   CODHOPITAL)
    VALUES (
           v_id_spepresentationhop,
           P_Ins_SpepresentationHop.IDORGANISME,
           TO_NUMBER(P_Ins_SpepresentationHop.PRIX_TTC_F),
           TO_NUMBER(P_Ins_SpepresentationHop.PRIX_TTC_E),
           P_Ins_SpepresentationHop.DISPO,
           P_Ins_SpepresentationHop.COMMENTAIRE,
		   P_Ins_SpepresentationHop.CODHOPITAL);
    P_Ins_SpepresentationHop.ID_SPEPRESENTATIONHOP := v_id_spepresentationhop;
    P_Ins_SpepresentationHop.Cod_Trt := 'ORA-00000 : Normal, Successful completion';
    COMMIT;
 EXCEPTION
   WHEN OTHERS THEN
    P_Ins_SpepresentationHop.Cod_Trt := SUBSTR(SQLERRM,1,255);
    ROLLBACK;
 END P_Ins_SpepresentationHop;
  -- ----------------------------------------------------------
  -- Procedure d'suppression - Table : SpepresentationHop
  -- ----------------------------------------------------------
 PROCEDURE P_Del_SpepresentationHop(
      IDORGANISME           IN  Avidal_Livret.IDORGANISME,
      ID_SPEPRESENTATIONHOP IN  Avidal_Livret.ID_SPEPRESENTATIONHOP,
      Cod_Trt            OUT VARCHAR2) IS
 BEGIN
    DELETE FROM COMPOVIDAL
      WHERE IDORGANISME           = P_Del_SpepresentationHop.IDORGANISME
        AND ID_SPEPRESENTATIONHOP = P_Del_SpepresentationHop.ID_SPEPRESENTATIONHOP;
    DELETE FROM COMPOHOP
      WHERE IDORGANISME           = P_Del_SpepresentationHop.IDORGANISME
        AND ID_SPEPRESENTATIONHOP = P_Del_SpepresentationHop.ID_SPEPRESENTATIONHOP;
    DELETE FROM LIVRETHOP
      WHERE IDORGANISME           = P_Del_SpepresentationHop.IDORGANISME
        AND ID_SPEPRESENTATIONHOP = P_Del_SpepresentationHop.ID_SPEPRESENTATIONHOP;
    DELETE FROM SPEPRESENTATIONHOP
      WHERE IDORGANISME           = P_Del_SpepresentationHop.IDORGANISME
        AND ID_SPEPRESENTATIONHOP = P_Del_SpepresentationHop.ID_SPEPRESENTATIONHOP;
    P_Del_SpepresentationHop.Cod_Trt := 'ORA-00000 : Normal, Successful completion';
    COMMIT;
 EXCEPTION
   WHEN OTHERS THEN
    P_Del_SpepresentationHop.Cod_Trt := SUBSTR(SQLERRM,1,255);
    ROLLBACK;
 END P_Del_SpepresentationHop;
  -- ----------------------------------------------------------
  -- Procedure de Modification - Tables : SpepresentationHop
  -- ----------------------------------------------------------
 PROCEDURE P_Upd_SpepresentationHop(
      IDORGANISME           IN  Avidal_Livret.IDORGANISME,
      ID_SPEPRESENTATIONHOP IN  Avidal_Livret.ID_SPEPRESENTATIONHOP,
      NOM                   IN  Avidal_Livret.NOM,
      PRESENTATION          IN  Avidal_Livret.PRESENTATION,
      FORME                 IN  Avidal_Livret.FORME,
      DOSAGE                IN  Avidal_Livret.DOSAGE,
      CIP                   IN  Avidal_Livret.CIP,
      UCD                   IN  Avidal_Livret.UCD,
      LABO                  IN  Avidal_Livret.LABO,
      CODHOPITAL            IN  Avidal_Livret.CODHOPITAL,
      PRIX_TTC_F            IN  VARCHAR2,
      PRIX_TTC_E            IN  VARCHAR2,
      DISPO                 IN  Avidal_Livret.DISPO,
      COMMENTAIRE           IN  Avidal_Livret.COMMENTAIRE,
      Cod_Trt            OUT VARCHAR2)IS
 BEGIN
    UPDATE SPEPRESENTATIONHOP
    SET NOM                   = P_Upd_SpepresentationHop.NOM,
        PRESENTATION          = P_Upd_SpepresentationHop.PRESENTATION,
        FORME                 = P_Upd_SpepresentationHop.FORME,
        DOSAGE                = P_Upd_SpepresentationHop.DOSAGE,
        CIP                   = P_Upd_SpepresentationHop.CIP,
        UCD                   = P_Upd_SpepresentationHop.UCD,
        LABO                  = P_Upd_SpepresentationHop.LABO
    WHERE IDORGANISME           = P_Upd_SpepresentationHop.IDORGANISME
      AND ID_SPEPRESENTATIONHOP = P_Upd_SpepresentationHop.ID_SPEPRESENTATIONHOP;
    UPDATE LIVRETHOP
    SET PRIX_TTC_F  = TO_NUMBER(P_Upd_SpepresentationHop.PRIX_TTC_F),
        PRIX_TTC_E  = TO_NUMBER(P_Upd_SpepresentationHop.PRIX_TTC_E),
        DISPO       = P_Upd_SpepresentationHop.DISPO,
        COMMENTAIRE = P_Upd_SpepresentationHop.COMMENTAIRE,
		CODHOPITAL  = P_Upd_SpepresentationHop.CODHOPITAL
    WHERE ID_SPEPRESENTATIONHOP  = P_Upd_SpepresentationHop.ID_SPEPRESENTATIONHOP
      AND IDORGANISME            = P_Upd_SpepresentationHop.IDORGANISME;
    P_Upd_SpepresentationHop.Cod_Trt := 'ORA-00000 : Normal, Successful completion';
    COMMIT;
 EXCEPTION
   WHEN OTHERS THEN
    P_Upd_SpepresentationHop.Cod_Trt := SUBSTR(SQLERRM,1,255);
    ROLLBACK;
 END P_Upd_SpepresentationHop;
  -- ----------------------------------------------------------
  -- Procedure de Sélection - Tables : SpepresentationHop
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- ----------------------------------------------------------
 PROCEDURE P_Sel_SpepresentationHop(
      IDORGANISME           IN  Avidal_Livret.IDORGANISME,
      ID_SPEPRESENTATIONHOP IN  Avidal_Livret.ID_SPEPRESENTATIONHOP,
      NOM                   IN  Avidal_Livret.NOM,
      PRESENTATION          IN  Avidal_Livret.PRESENTATION,
      FORME                 IN  Avidal_Livret.FORME,
      DOSAGE                IN  Avidal_Livret.DOSAGE,
      CIP                   IN  Avidal_Livret.CIP,
      UCD                   IN  Avidal_Livret.UCD,
      LABO                  IN  Avidal_Livret.LABO,
      CODHOPITAL            IN  Avidal_Livret.CODHOPITAL,
      PRIX_TTC_F            IN  VARCHAR2,
      PRIX_TTC_E            IN  VARCHAR2,
      DISPO                 IN  Avidal_Livret.DISPO,
      COMMENTAIRE           IN  Avidal_Livret.COMMENTAIRE,
      RefSpepresentationHop OUT Avidal_Livret.SpepresentationHopCurTyp,
      Ret			              OUT NUMBER)  IS
 BEGIN
      --
      -- Pour chercher tous les spepresentationhop il faut passer en paramètre ID_SPEPRESENTATIONHOP=0
      --
		OPEN RefSpepresentationHop FOR
		SELECT S.IDORGANISME,
		       S.ID_SPEPRESENTATIONHOP,
		       S.NOM,PRESENTATION,
		       S.FORME,
		       S.DOSAGE,
		       S.CIP,
		       S.UCD,
		       S.LABO,
		       L.CODHOPITAL,
		       TO_CHAR(L.PRIX_TTC_F) PRIX_TTC_F,
		       TO_CHAR(L.PRIX_TTC_E) PRIX_TTC_E,
		       L.DISPO,
		       L.COMMENTAIRE
		 FROM SPEPRESENTATIONHOP S, LIVRETHOP L
		 WHERE S.IDORGANISME           = P_Sel_SpepresentationHop.IDORGANISME
		   AND S.ID_SPEPRESENTATIONHOP = DECODE(P_Sel_SpepresentationHop.ID_SPEPRESENTATIONHOP, 0, S.ID_SPEPRESENTATIONHOP, P_Sel_SpepresentationHop.ID_SPEPRESENTATIONHOP)
		   AND UPPER(S.NOM)            LIKE UPPER(NVL(P_Sel_SpepresentationHop.NOM,S.NOM))
		   AND UPPER(NVL(S.PRESENTATION, 'AAAAAAAA'))   LIKE UPPER(NVL(P_Sel_SpepresentationHop.PRESENTATION, NVL(S.PRESENTATION, 'AAAAAAAA')))
		   AND UPPER(NVL(S.FORME, 'AAAAAAAA'))          LIKE UPPER(NVL(P_Sel_SpepresentationHop.FORME, NVL(S.FORME, 'AAAAAAAA')))
		   AND UPPER(NVL(S.DOSAGE, 'AAAAAAAA'))         LIKE UPPER(NVL(P_Sel_SpepresentationHop.DOSAGE, NVL(S.DOSAGE, 'AAAAAAAA')))
		   AND UPPER(NVL(S.CIP, 'AAAAAAAA'))            LIKE UPPER(NVL(P_Sel_SpepresentationHop.CIP, NVL(S.CIP, 'AAAAAAAA')))
		   AND UPPER(NVL(S.UCD, 'AAAAAAAA'))            LIKE UPPER(NVL(P_Sel_SpepresentationHop.UCD, NVL(S.UCD, 'AAAAAAAA')))
		   AND UPPER(NVL(S.LABO, 'AAAAAAAA'))           LIKE UPPER(NVL(P_Sel_SpepresentationHop.LABO, NVL(S.LABO, 'AAAAAAAA')))
		   AND UPPER(NVL(L.CODHOPITAL, 'AAAAAAAA'))     LIKE UPPER(NVL(P_Sel_SpepresentationHop.CODHOPITAL,NVL(L.CODHOPITAL, 'AAAAAAAA')))
		   AND S.IDORGANISME = L.IDORGANISME
		   AND S.ID_SPEPRESENTATIONHOP = L.ID_SPEPRESENTATIONHOP
		   AND NVL(L.PRIX_TTC_F, 0) = NVL(P_Sel_SpepresentationHop.PRIX_TTC_F, NVL(L.PRIX_TTC_F, 0))
		   AND NVL(L.PRIX_TTC_E, 0) = NVL(P_Sel_SpepresentationHop.PRIX_TTC_E, NVL(L.PRIX_TTC_E, 0))
		   AND UPPER(NVL(L.DISPO, 'AAAAAAAA'))           LIKE UPPER(NVL(P_Sel_SpepresentationHop.DISPO, NVL(L.DISPO, 'AAAAAAAA')))
		   AND UPPER(NVL(L.COMMENTAIRE, 'AAAAAAAA'))     LIKE UPPER(NVL(P_Sel_SpepresentationHop.COMMENTAIRE, NVL(L.COMMENTAIRE, 'AAAAAAAA')));
   	P_Sel_SpepresentationHop.Ret := 1;
 EXCEPTION
		WHEN OTHERS THEN
			 P_Sel_SpepresentationHop.Ret := SQLCODE;
 END P_Sel_SpepresentationHop;
  -- ----------------------------------------------------------
  -- Procedure d'insertion - Table : T_SUBHOP
  -- ----------------------------------------------------------
 PROCEDURE P_Ins_SUBHOP(
      IDORGANISME   IN Avidal_Livret.IDORGANISME,
      ID_T_SUBHOP   OUT Avidal_Livret.ID_T_SUBHOP,
      LIBELLE       IN Avidal_Livret.LIBELLE,
      Cod_Trt       OUT VARCHAR2) IS
      v_id_subhop NUMBER;
 BEGIN
    SELECT SEQ_ID_T_SUBHOP.NEXTVAL INTO v_id_subhop FROM dual;
    INSERT INTO T_SUBHOP(
      IDORGANISME,
      ID_T_SUBHOP,
      LIBELLE)
    VALUES (
        P_Ins_SUBHOP.IDORGANISME,
        v_id_subhop,
        P_Ins_SUBHOP.LIBELLE);
    P_Ins_SUBHOP.ID_T_SUBHOP := v_id_subhop;
    P_Ins_SUBHOP.Cod_Trt := 'ORA-00000 : Normal, Successful completion';
    COMMIT;
 EXCEPTION
   WHEN OTHERS THEN
    P_Ins_SUBHOP.Cod_Trt := SUBSTR(SQLERRM,1,255);
    ROLLBACK;
 END P_Ins_SUBHOP;
  -- ----------------------------------------------------------
  -- Procedure d'suppression - Table : T_SUBHOP
  -- ----------------------------------------------------------
 PROCEDURE P_Del_SUBHOP(
      IDORGANISME   IN Avidal_Livret.IDORGANISME,
      ID_T_SUBHOP   IN Avidal_Livret.ID_T_SUBHOP,
      Cod_Trt       OUT VARCHAR2)  IS
 BEGIN
    DELETE FROM COMPOHOP
      WHERE IDORGANISME = P_Del_SUBHOP.IDORGANISME
        AND ID_T_SUBHOP = P_Del_SUBHOP.ID_T_SUBHOP;
    DELETE FROM T_SUBHOP
      WHERE IDORGANISME = P_Del_SUBHOP.IDORGANISME
        AND ID_T_SUBHOP = P_Del_SUBHOP.ID_T_SUBHOP;
    P_Del_SUBHOP.Cod_Trt := 'ORA-00000 : Normal, Successful completion';
    COMMIT;
 EXCEPTION
   WHEN OTHERS THEN
    P_Del_SUBHOP.Cod_Trt := SUBSTR(SQLERRM,1,255);
    ROLLBACK;
 END P_Del_SUBHOP;
  -- ----------------------------------------------------------
  -- Procedure de Modification - Tables : T_SUBHOP
  -- ----------------------------------------------------------
 PROCEDURE P_Upd_SUBHOP(
      IDORGANISME   IN Avidal_Livret.IDORGANISME,
      ID_T_SUBHOP   IN Avidal_Livret.ID_T_SUBHOP,
      LIBELLE       IN Avidal_Livret.LIBELLE,
      Cod_Trt       OUT VARCHAR2) IS
 BEGIN
    UPDATE T_SUBHOP
    SET LIBELLE = P_Upd_SUBHOP.LIBELLE
    WHERE IDORGANISME = P_Upd_SUBHOP.IDORGANISME
      AND ID_T_SUBHOP = P_Upd_SUBHOP.ID_T_SUBHOP;
    P_Upd_SUBHOP.Cod_Trt := 'ORA-00000 : Normal, Successful completion';
    COMMIT;
 EXCEPTION
   WHEN OTHERS THEN
    P_Upd_SUBHOP.Cod_Trt := SUBSTR(SQLERRM,1,255);
    ROLLBACK;
 END P_Upd_SUBHOP;
  -- ----------------------------------------------------------
  -- Procedure de Sélection - Tables : T_SUBHOP
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- ----------------------------------------------------------
 PROCEDURE P_Sel_SUBHOP(
      IDORGANISME  IN Avidal_Livret.IDORGANISME,
      ID_T_SUBHOP  IN Avidal_Livret.ID_T_SUBHOP,
      LIBELLE      IN Avidal_Livret.LIBELLE,
      RefSUBHOP    OUT Avidal_Livret.SUBHOPCurTyp,
      Ret			     OUT NUMBER) IS
 BEGIN
    OPEN RefSUBHOP FOR
     SELECT IDORGANISME,ID_T_SUBHOP,LIBELLE
     FROM T_SUBHOP
     WHERE IDORGANISME                   =    P_Sel_SUBHOP.IDORGANISME
     AND ID_T_SUBHOP                     =    DECODE(P_Sel_SUBHOP.ID_T_SUBHOP, 0, ID_T_SUBHOP, P_Sel_SUBHOP.ID_T_SUBHOP)
     AND UPPER(NVL(LIBELLE,'AAAAAAAA'))  LIKE UPPER(NVL(P_Sel_SUBHOP.LIBELLE,NVL(LIBELLE,'AAAAAAAA')));
   	P_Sel_SUBHOP.Ret := 1;
 EXCEPTION
		WHEN OTHERS THEN
			 P_Sel_SUBHOP.Ret := SQLCODE;
 END P_Sel_SUBHOP;

--=========================================================================
-- Fonctions nécessaires au procédures du package et à d'autres procédures
--=========================================================================
  -- -------------------------------------------------------------------------
  -- Fonction     : RMC_Get_Type
  -- Objet        : Obtenir l'identifiant type à partir de la constante de
  --                représentation
  -- --------------------------------------------------------------------------
  FUNCTION  RMC_Get_Type(Typ_Lib     IN VARCHAR2) RETURN PLS_INTEGER IS
       I PLS_INTEGER;
  BEGIN
        -------------------------------------------------------------
        --Statistiques sur la procedure - rempli la table Marqueurs
        --le 25/05/2004
        -------------------------------------------------------------
        -- Update Marqueurs SET
        --          Compteur = Compteur + 1
        --          where upper(proc_name) Like UPPER('%RMC_Get_Type%');
        -- COMMIT;

       I := Avidal_Livret.TTyp_Cst.First;
           WHILE I <= Avidal_Livret.TTyp_Cst.Last AND Avidal_Livret.TTyp_Cst(I) <> RMC_Get_Type.Typ_Lib
           LOOP
           I := I + 1;
           END LOOP;
       IF I > Avidal_Livret.TTyp_Cst.Last THEN
               RETURN 0;
           ELSE
               RETURN I;
           END IF;
-------------------------------------------------------------
  END RMC_Get_Type;
  -- --------------------------------------------------------------------------
  -- Fonction     : RMC_GetHie_Pro
  -- Objet        : Recherche par hiérarchie ou profil ascendant ou descendant
  --                en tenant compte de l'origine des Thesaurus recherchés
  -- Param In     : Thesaurus de départ
  --                Indicateur hiérarchie - Profil
  --                Type de l'information de depart
  --                Type de l'information d'arrivée
  -- Param Out    : Jeu d'enregistrement
  --                Code retour
  -- Historique
  -- Creation     : 20/12/2000
  -- Auteur       : AgdF (from Data to Information)
  -- --------------------------------------------------------------------------
  FUNCTION RMC_GetHie_Pro ( The_Ide     IN    Rmc_The_Pubres.THE_IDE,
                            Ind_H_P     IN    VARCHAR2,
                            Type_From   IN    Rmc_The_Pubres.Type_Ide,
                            Type_To     IN    Rmc_The_Pubres.Type_Ide,
                            Hop         IN    NUMBER,
                            RefThe      OUT   Avidal_Livret.RMC_THEHopCurTyp)
                          RETURN NUMBER IS
  BEGIN
        -------------------------------------------------------------
        --Statistiques sur la procedure - rempli la table Marqueurs
        --le 25/05/2004
        -------------------------------------------------------------
        --  Update Marqueurs SET
        --          Compteur = Compteur + 1
        --          where upper(proc_name) Like UPPER('%RMC_GetHie_Pro%');
        -- COMMIT;

       -- ----------------------------------------------------
       --
           --              A c c e s   p a r   P r o f i l
       --
       -- ----------------------------------------------------
       IF RMC_GetHie_Pro.Ind_H_P = 'P' THEN
              -- -----------------------------------------------
                  --  Acces aux parents profil, Le type est négatif
              -- -----------------------------------------------
                  IF RMC_GetHie_Pro.Type_From < 0 THEN
                     OPEN RMC_GetHie_Pro.RefTHE FOR
                     SELECT c.THE_IDE, c.TYPE_IDE, c.THE_CAF, c.THE_LAF, c.ID, 0 IDORGANISME, 'N' FLAG
                       FROM RMC_THE a, RMC_THE_PRO b, RMC_THE c
                      WHERE a.THE_IDE      = RMC_GetHie_Pro.The_Ide
                                AND a.TYPE_IDE     = ABS(RMC_GetHie_Pro.Type_From)
                                AND b.THE_THE_IDE  = a.THE_IDE
                                AND c.THE_IDE      = b.THE_IDE
                                AND c.TYPE_IDE     = RMC_GetHie_Pro.Type_To
                                AND NOT EXISTS ( SELECT NULL
                                                 FROM  LIVRETVIDAL d , SPEPRESENTATION e
                                                 WHERE d.IDORGANISME = RMC_GetHie_Pro.hop
                                                  AND  d.ID_SPEPRESENTATION = e.ID_SPEPRESENTATION
                                                  AND  e.ID_SPECIALITE = c.ID )
                     UNION
                     SELECT c.THE_IDE, c.TYPE_IDE, c.THE_CAF, c.THE_LAF, c.ID, d.IDORGANISME  IDORGANISME, 'A' FLAG
                       FROM RMC_THE a, RMC_THE_PRO b, RMC_THE c , LIVRETVIDAL d , SPEPRESENTATION e
                      WHERE a.THE_IDE      = RMC_GetHie_Pro.The_Ide
                                AND a.TYPE_IDE     = ABS(RMC_GetHie_Pro.Type_From)
                                AND b.THE_THE_IDE  = a.THE_IDE
                                AND c.THE_IDE      = b.THE_IDE
                                AND c.TYPE_IDE     = RMC_GetHie_Pro.Type_To
                                AND d.IDORGANISME  = RMC_GetHie_Pro.hop
                                AND d.ID_SPEPRESENTATION = e.ID_SPEPRESENTATION
                                AND e.ID_SPECIALITE = c.ID
                    ORDER BY 4;
              -- -----------------------------------------------
                  ELSIF RMC_GetHie_Pro.Type_From > 0 THEN
              -- -----------------------------------------------
                  --  Acces aux fils profil, Le type est positif
              -- -----------------------------------------------
                     OPEN RMC_GetHie_Pro.RefTHE FOR
                     SELECT c.THE_IDE, c.TYPE_IDE, c.THE_CAF, c.THE_LAF, c.ID , 0 IDORGANISME, 'N' FLAG
                       FROM RMC_THE a, RMC_THE_PRO b, RMC_THE c
                      WHERE a.THE_IDE      = RMC_GetHie_Pro.The_Ide
                                AND a.TYPE_IDE     = ABS(RMC_GetHie_Pro.Type_From)
                                AND b.THE_IDE      = a.THE_IDE
                                AND c.THE_IDE      = b.THE_THE_IDE
                                AND c.TYPE_IDE     = RMC_GetHie_Pro.Type_To
                                AND NOT EXISTS ( SELECT NULL
                                                 FROM  LIVRETVIDAL d , SPEPRESENTATION e
                                                 WHERE d.IDORGANISME = RMC_GetHie_Pro.hop
                                                  AND  d.ID_SPEPRESENTATION = e.ID_SPEPRESENTATION
                                                  AND  e.ID_SPECIALITE = c.ID )
                     UNION
                     SELECT c.THE_IDE, c.TYPE_IDE, c.THE_CAF, c.THE_LAF, c.ID , d.IDORGANISME IDORGANISME, 'A' FLAG
                       FROM RMC_THE a, RMC_THE_PRO b, RMC_THE c , LIVRETVIDAL d , SPEPRESENTATION e
                      WHERE a.THE_IDE      = RMC_GetHie_Pro.The_Ide
                                AND a.TYPE_IDE     = ABS(RMC_GetHie_Pro.Type_From)
                                AND b.THE_IDE      = a.THE_IDE
                                AND c.THE_IDE      = b.THE_THE_IDE
                                AND c.TYPE_IDE     = RMC_GetHie_Pro.Type_To
                                AND d.IDORGANISME  = RMC_GetHie_Pro.hop
                                AND d.ID_SPEPRESENTATION = e.ID_SPEPRESENTATION
                                AND e.ID_SPECIALITE = c.ID
                     ORDER BY 4;
                  ELSE
              -- -----------------------------------------------
                  --  Selection Vide
              -- -----------------------------------------------
                     OPEN RMC_GetHie_Pro.RefTHE FOR
                     SELECT c.THE_IDE, c.TYPE_IDE, c.THE_CAF, c.THE_LAF, c.ID, 0 IDORGANISME, 'N' FLAG
                       FROM RMC_THE c
                          WHERE 1 = 2;
                  END IF;
              -- -----------------------------------------------
       -- ----------------------------------------------------
           --
           --        A c c e s   p a r    H i e r a r c h i e
           --
       -- ----------------------------------------------------
       ELSE
              -- -----------------------------------------------
                  --  Acces aux parents hiérarchiques, Le type est négatif
              -- -----------------------------------------------
                  IF RMC_GetHie_Pro.Type_From < 0 THEN
                     OPEN RMC_GetHie_Pro.RefTHE FOR
                     SELECT c.THE_IDE, c.TYPE_IDE, c.THE_CAF, c.THE_LAF, c.ID, 0 IDORGANISME, 'N' FLAG
                       FROM RMC_THE a, RMC_THE_HIE b, RMC_THE c
                      WHERE a.THE_IDE  = RMC_GetHie_Pro.The_Ide
                                AND a.TYPE_IDE = ABS(RMC_GetHie_Pro.Type_From)
                                AND b.THE_THE_IDE  = a.THE_IDE
                                AND c.THE_IDE      = b.THE_IDE
                                AND c.TYPE_IDE = RMC_GetHie_Pro.Type_To
                                AND NOT EXISTS ( SELECT NULL
                                                 FROM  LIVRETVIDAL d , SPEPRESENTATION e
                                                 WHERE d.IDORGANISME = RMC_GetHie_Pro.hop
                                                  AND  d.ID_SPEPRESENTATION = e.ID_SPEPRESENTATION
                                                  AND  e.ID_SPECIALITE = c.ID )
                     UNION
                     SELECT c.THE_IDE, c.TYPE_IDE, c.THE_CAF, c.THE_LAF, c.ID, d.IDORGANISME IDORGANISME, 'A' FLAG
                     FROM RMC_THE a, RMC_THE_HIE b, RMC_THE c , LIVRETVIDAL d , SPEPRESENTATION e
                     WHERE a.THE_IDE  = RMC_GetHie_Pro.The_Ide
                                AND a.TYPE_IDE = ABS(RMC_GetHie_Pro.Type_From)
                                AND b.THE_THE_IDE  = a.THE_IDE
                                AND c.THE_IDE      = b.THE_IDE
                                AND c.TYPE_IDE = RMC_GetHie_Pro.Type_To
                                AND d.IDORGANISME = RMC_GetHie_Pro.hop
                                AND d.ID_SPEPRESENTATION = e.ID_SPEPRESENTATION
                                AND e.ID_SPECIALITE = c.ID
                    ORDER BY 4;
              -- -----------------------------------------------
                  ELSIF RMC_GetHie_Pro.Type_From > 0 THEN
              -- -----------------------------------------------
                  --  Acces aux fils hierarchique, Le type est positif
              -- -----------------------------------------------
                     OPEN RMC_GetHie_Pro.RefTHE FOR
                     SELECT c.THE_IDE, c.TYPE_IDE, c.THE_CAF, c.THE_LAF, c.ID, 0 IDORAGNISME, 'N' FLAG
                       FROM RMC_THE a, RMC_THE_HIE b, RMC_THE c
                      WHERE a.THE_IDE      = RMC_GetHie_Pro.The_Ide
                                AND a.TYPE_IDE     = ABS(RMC_GetHie_Pro.Type_From)
                                AND b.THE_IDE      = a.THE_IDE
                                AND c.THE_IDE      = b.THE_THE_IDE
                                AND c.TYPE_IDE     = RMC_GetHie_Pro.Type_To
                                AND NOT EXISTS ( SELECT NULL
                                                 FROM  LIVRETVIDAL d , SPEPRESENTATION e
                                                 WHERE d.IDORGANISME = RMC_GetHie_Pro.hop
                                                  AND  d.ID_SPEPRESENTATION = e.ID_SPEPRESENTATION
                                                  AND  e.ID_SPECIALITE = c.ID )
                     UNION
                     SELECT c.THE_IDE, c.TYPE_IDE, c.THE_CAF, c.THE_LAF, c.ID, d.IDORGANISME IDORAGNISME, 'A' FLAG
                       FROM RMC_THE a, RMC_THE_HIE b, RMC_THE c , LIVRETVIDAL d , SPEPRESENTATION e
                      WHERE a.THE_IDE      = RMC_GetHie_Pro.The_Ide
                                AND a.TYPE_IDE     = ABS(RMC_GetHie_Pro.Type_From)
                                AND b.THE_IDE      = a.THE_IDE
                                AND c.THE_IDE      = b.THE_THE_IDE
                                AND c.TYPE_IDE     = RMC_GetHie_Pro.Type_To
                                AND d.IDORGANISME  = RMC_GetHie_Pro.hop
                                AND d.ID_SPEPRESENTATION = e.ID_SPEPRESENTATION
                                AND e.ID_SPECIALITE = c.ID
                    ORDER BY 4;
                  ELSE
              -- -----------------------------------------------
                  --  Selection Vide
              -- -----------------------------------------------
                     OPEN RMC_GetHie_Pro.RefTHE FOR
                     SELECT c.THE_IDE, c.TYPE_IDE, c.THE_CAF, c.THE_LAF, c.ID, 0 IDORAGNISME, 'N' FLAG
                       FROM RMC_THE c
                          WHERE 1 = 2;
                  END IF;
              -- -----------------------------------------------
           END IF;
       RETURN (1);
  EXCEPTION
       WHEN OTHERS THEN
           RETURN (SQLCODE);
  END RMC_GetHie_Pro;

   --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : RMC_GetFromKeyWordLivret_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- Modification #1 : Effectue une recherche dans la table des mots clés
  --   sur le début des Mots clés extraits de la string de recherche.
  --   Permet d'atteindre un élément de type quelconque de thesaurus.
  --   Dans le cas d'une spécialité : recherche dans le Livret de
  --   l'organisme (Id_hop) concerné et/ou dans RMC_THE selon la demande (Recherche).
  -- --------------------------------------------------------------

       PROCEDURE RMC_GetFromKeyWordLivret_txt ( ORI_IDE     IN    Rmc_Cle_Pubres.ORI_IDE  DEFAULT NULL,
                                            TYPE_IDE    IN    Rmc_Cle_Pubres.TYPE_IDE DEFAULT 2,
                                            CLE_LIB     IN    Rmc_Cle_Pubres.CLE_LIB  DEFAULT '%',
                                            Recherche   IN    VARCHAR2,
                                            Id_hop      IN    Avidal_Livret.IDORGANISME,
                                            RefLnkTHE   OUT   Avidal_Livret.RMC_THECurtyp,
                                            Ret         OUT   NUMBER)
       IS
       BEGIN
           Ret := Avidal_Livret.RMC_GetFromKeyWordLivret_txt ( RMC_GetFromKeyWordLivret_txt.Ori_Ide,
                                                           RMC_GetFromKeyWordLivret_txt.Type_Ide,
                                                           RMC_GetFromKeyWordLivret_txt.Cle_Lib,
                                                           RMC_GetFromKeyWordLivret_txt.Recherche,
                                                           RMC_GetFromKeyWordLivret_txt.Id_hop,
                                                           RMC_GetFromKeyWordLivret_txt.RefLnkThe);
           END RMC_GetFromKeyWordLivret_txt;
       FUNCTION RMC_GetFromKeyWordLivret_txt( ORI_IDE      IN    Rmc_Cle_Pubres.ORI_IDE  DEFAULT NULL,
                                          TYPE_IDE     IN    Rmc_Cle_Pubres.TYPE_IDE DEFAULT 2,
                                          CLE_LIB      IN    Rmc_Cle_Pubres.CLE_LIB  DEFAULT '%',
                                          Recherche    IN    VARCHAR2,
                                          Id_hop       IN    Avidal_Livret.IDORGANISME,
                                          RefLnkTHE    OUT   Avidal_Livret.RMC_THECurtyp)
                                        RETURN  NUMBER
       IS
         TYPE  R_Mot  IS RECORD
              ( Cle_Mot   VARCHAR2(255),
                IFirst    PLS_INTEGER,
                ILast     PLS_INTEGER
              );
         TYPE         Tab_Mot IS TABLE OF R_Mot         INDEX BY BINARY_INTEGER;
         TYPE         Tab_Req IS TABLE OF VARCHAR2(500) INDEX BY BINARY_INTEGER;
         T_Mot        Tab_Mot;
         T_Req        Tab_Req;
         T_Res        Tab_Req;
         Mot_Cle      VARCHAR2(255);
         Chaine_Epure VARCHAR2(255);
         Boo_Mot      BOOLEAN;
         Boo_Jump     BOOLEAN;
         Requete1     VARCHAR2(10000);
         Requete2     VARCHAR2(10000);
         Requete3     VARCHAR2(10000);
         Requete      VARCHAR2(25000);
         I            PLS_INTEGER;
         Ind_Mot      PLS_INTEGER;
         Cpt          PLS_INTEGER;
       BEGIN


         -- ---------------------------------------
         -- Cette partie de traitement elimine les
         -- caracteres & | et # se trouvant à l'exterieur
         -- des mots clés
         -- ---------------------------------------
         Chaine_Epure := RTRIM(LTRIM(RMC_GetFromKeyWordLivret_txt.Cle_lib,MotEt),MotEt);
         Chaine_Epure := RTRIM(LTRIM(Chaine_Epure,MotOu),MotOu);
         Chaine_Epure := RTRIM(LTRIM(Chaine_Epure,MotSauf),MotSauf);
         Boo_Mot      := FALSE;
         Ind_Mot      := 0;
         -- ---------------------------------------
         -- Compteur de parenthese
         -- Cette partie de traitement equilibre le nombre de
         -- parenthese droite et gauche
         -- ---------------------------------------
         Cpt          := 0;
         FOR I IN 1..LENGTH(Chaine_Epure)
         LOOP
           IF SUBSTR(Chaine_Epure,I,1) = '(' THEN
             Cpt := Cpt + 1;
           END IF;
           IF SUBSTR(Chaine_Epure,I,1) = ')' THEN
             Cpt := Cpt - 1;
           END IF;
         END LOOP;
         IF Cpt > 0 THEN
           Chaine_Epure := RPAD(Chaine_Epure,LENGTH(Chaine_Epure) + Cpt, ')');
         ELSIF Cpt < 0 THEN
           Chaine_Epure := LPAD(Chaine_Epure,LENGTH(Chaine_Epure) + ABS(Cpt), '(');
         END IF;
         -- ---------------------------------------
         -- Lecture lettre par lettre
         --  Constitution du tableau des mots
         -- ---------------------------------------
         FOR I IN 1..LENGTH(Chaine_Epure)
         LOOP
           Boo_Jump := FALSE;
           IF SUBSTR(Chaine_Epure,I,1) IN (MotEt, MotOu, MotSauf, MotParOpen, MotParClose) THEN
             Boo_Jump := TRUE;
             IF Boo_Mot THEN
               T_Mot(Ind_Mot).Ilast  := I-1;
               Boo_Mot := FALSE;
             END IF;
           END IF;
           IF NOT Boo_Mot AND SUBSTR(Chaine_Epure,I,1) = ' ' THEN
             Boo_Jump := TRUE;
           END IF;
           IF NOT Boo_Jump THEN
             IF NOT Boo_Mot THEN
               Ind_Mot                := Ind_Mot + 1;
               T_Mot(Ind_Mot).Cle_Mot := SUBSTR(Chaine_Epure,I,1);
               T_Mot(Ind_Mot).IFirst  := I;
               Boo_Mot                := TRUE;
             ELSE
               T_Mot(Ind_Mot).Cle_Mot := T_Mot(Ind_Mot).Cle_Mot||SUBSTR(Chaine_Epure,I,1);
             END IF;
           END IF;
         END LOOP;
         IF Boo_Mot THEN
           T_Mot(Ind_Mot).Ilast  := LENGTH(Chaine_Epure);
         END IF;
         -- ---------------------------------------------------------
         -- Constitution des requetes.
         -- Tableau de requete pour chaque mot clé trouvé
         -- ---------------------------------------------------------

         FOR I IN T_Mot.First..T_Mot.Last
         LOOP
           -- Suppression des BLancs
--           Mot_Cle := Upper(Ltrim(Rtrim(T_Mot(I).Cle_Mot)));
             Mot_Cle := LTRIM(RTRIM(T_Mot(I).Cle_Mot));
           -- Requete dans le tableau
		   T_Req(I) :=    'Select Distinct a.The_ide, a.Type_ide, a.the_Caf, a.the_laf, a.id From Rmc_The a, Rmc_The_Cle b, Rmc_Cle c '
                  || ' Where UPPER(TRANSLATE(c.CLE_LIB, ''' || Avidal_RMC.ch1 || ''', ''' || Avidal_RMC.ch2 || '''))'
					        || ' Like upper(translate(Nvl('''||Mot_Cle||''',''%'')||''%'''
                  || ',''' || Avidal_RMC.ch1 || ''', ''' || Avidal_RMC.ch2 || '''))'
                  || ' And c.TYPE_IDE = Nvl('||RMC_GetFromKeyWordLivret_txt.TYPE_IDE||',c.TYPE_IDE) '
                  || ' And b.cle_ide = c.cle_ide '
					        || ' And b.the_ide = a.The_ide '
        				  || ' And a.type_ide = c.type_ide ';

       T_Res(I) := 'Select Distinct L.ID_SPEPRESENTATIONHOP THE_IDE, 2 TYPE_IDE, '''' THE_CAF, S.NOM THE_LAF, '
                      ||'L.ID_SPEPRESENTATIONHOP ID, '||RMC_GetFromKeyWordLivret_txt.Id_hop||' IDORGANISME, ''C'' FLAG From '
                      || 'SPEPRESENTATIONHOP S, LIVRETHOP L '
                      ||'Where UPPER(translate(S.NOM, ''' || Avidal_Livret.ch1 || ''', '''
                      || Avidal_Livret.ch2 || ''')) Like upper(translate(Nvl('''||Mot_Cle||''',''%'')||''%'''
                      || ',''' || Avidal_Livret.ch1 || ''', ''' || Avidal_Livret.ch2 || '''))'
                      || ' And L.ID_SPEPRESENTATIONHOP = S.ID_SPEPRESENTATIONHOP'
                      || ' And L.IDORGANISME           = S.IDORGANISME'
                      || ' And L.IDORGANISME           = '||RMC_GetFromKeyWordLivret_txt.Id_hop ;

   		   -- T_Req(I) :=    'Select Distinct c.Cle_ide From Rmc_Cle c '
           --                || 'Where c.CLE_LIB Like upper(translate(Nvl('''||Mot_Cle||''',''%'')||''%'''
           --                || ',''' || AVIDAL_LIVRET.ch1 || ''', ''' || AVIDAL_LIVRET.ch2 || '''))'
           --                || ' And c.TYPE_IDE = Nvl('||RMC_GetFromKeyWordLivret_txt.TYPE_IDE||',c.TYPE_IDE) ';
         --                ||  ' And c.ORI_IDE = Nvl('||RMC_GetFromKeyWordLivret_txt.ORI_IDE||',c.ORI_IDE) '
         END LOOP;
         -- ---------------------------------------------
         -- Constitution requete  MR 19/03/2001
         -- ---------------------------------------------
         IF ( RMC_GetFromKeyWordLivret_txt.TYPE_IDE = 2 ) THEN
           -- cas du C
           --Requete1 := 'Select /*+ ORDERED */ Distinct L.ID_SPEPRESENTATIONHOP THE_IDE, 2 TYPE_IDE, '''' THE_CAF, S.NOM THE_LAF, '
           --            ||'L.ID_SPEPRESENTATIONHOP ID, '||RMC_GetFromKeyWordLivret_txt.Id_hop||' IDORGANISME, ''C'' FLAG From ';
        --  Requete1 := 'Select Distinct L.ID_SPEPRESENTATIONHOP THE_IDE, 2 TYPE_IDE, '''' THE_CAF, S.NOM THE_LAF, '
                 --    ||'L.ID_SPEPRESENTATIONHOP ID, '||RMC_GetFromKeyWordLivret_txt.Id_hop||' IDORGANISME, ''C'' FLAG From ';
           Requete1 := ' ';
           -- cas du N et du A
           --Requete2 := 'Select /*+ ORDERED */ --Distinct t.The_Ide THE_IDE, 2 TYPE_IDE, t.The_Caf THE_CAF, t.The_Laf THE_LAF, '
           --            ||'t.id ID, 0 IDORGANISME, ''N'' FLAG From (';
           Requete2 := 'Select Distinct t.The_Ide THE_IDE, 2 TYPE_IDE, t.The_Caf THE_CAF, t.The_Laf THE_LAF, '
                       ||'t.id ID, 0 IDORGANISME, ''N'' FLAG From (';
           -- cas du A
           --Requete3 := 'Select /*+ ORDERED */ Distinct t.The_Ide THE_IDE, 2 THE_IDE, t.The_Caf THE_CAF, t.The_Laf THE_LAF, '
           --            ||'t.id ID, ' ||RMC_GetFromKeyWordLivret_txt.Id_hop||' IDORGANISME, ''A'' FLAG From (';
           Requete3 := 'Select Distinct t.The_Ide THE_IDE, 2 TYPE_IDE, t.The_Caf THE_CAF, t.The_Laf THE_LAF, '
                       ||'t.id ID, ' ||RMC_GetFromKeyWordLivret_txt.Id_hop||' IDORGANISME, ''A'' FLAG From (';

           FOR I IN T_Mot.First..T_Mot.Last
           LOOP
             -- ---------------------
             -- Cas premier Mot
             -- ---------------------
             IF I = T_Mot.First AND T_Mot(I).Ifirst <> 1 THEN
               Requete1 := Requete1 || ' ' || SUBSTR(Chaine_Epure,1,T_Mot(I).Ifirst-1);
               Requete2 := Requete2 || ' ' || SUBSTR(Chaine_Epure,1,T_Mot(I).Ifirst-1);
               Requete3 := Requete3 || ' ' || SUBSTR(Chaine_Epure,1,T_Mot(I).Ifirst-1);
             END IF;
             -- ---------------------------------------
             -- Inserton requete dans chaine generale
             -- --------------------------------------
             Requete2 := Requete2 || ' ' ||T_Req(I);
             Requete3 := Requete3 || ' ' ||T_Req(I);
             Requete1 := Requete1 || ' ' ||T_Res(I);
             -- ---------------------
             -- Inter mots
             -- ---------------------
             IF I <> T_Mot.Last  THEN
               Mot_Cle := SUBSTR(Chaine_Epure,T_Mot(I).Ilast+1, T_Mot(I+1).Ifirst-T_Mot(I).Ilast-1);
               Requete1 := Requete1 || REPLACE(REPLACE(REPLACE(Mot_Cle,MotEt,' Intersect '), MotOu,' Union '), Motsauf,' Minus ');
               Requete2 := Requete2 || REPLACE(REPLACE(REPLACE(Mot_Cle,MotEt,' Intersect '), MotOu,' Union '), Motsauf,' Minus ');
               Requete3 := Requete3 || REPLACE(REPLACE(REPLACE(Mot_Cle,MotEt,' Intersect '), MotOu,' Union '), Motsauf,' Minus ');
             END IF;
             -- ----------------------------------------
             -- Cas dernier mot
             -- ----------------------------------------
             IF I = T_Mot.Last AND T_Mot(I).Ilast <> LENGTH(Chaine_Epure) THEN
               Requete1 := Requete1 || SUBSTR(Chaine_Epure,T_Mot(I).Ilast+1);
               Requete2 := Requete2 || SUBSTR(Chaine_Epure,T_Mot(I).Ilast+1);
               Requete3 := Requete3 || SUBSTR(Chaine_Epure,T_Mot(I).Ilast+1);
             END IF;
           END LOOP;
           -- --------------------------------------------------
           --  Construction de la fin de la requete
           -- --------------------------------------------------
           -- cas du C
         /*   Requete1 := Requete1 ||'SPEPRESENTATIONHOP S, LIVRETHOP L '
                                ||'Where UPPER(translate(S.NOM, ''' || Avidal_Livret.ch1 || ''', '''
                                || Avidal_Livret.ch2 || ''')) Like upper(translate(Nvl('''||Mot_Cle||''',''%'')||''%'''
                                || ',''' || Avidal_Livret.ch1 || ''', ''' || Avidal_Livret.ch2 || '''))'
                                || ' And L.ID_SPEPRESENTATIONHOP = S.ID_SPEPRESENTATIONHOP'
                                || ' And L.IDORGANISME           = S.IDORGANISME'
                                || ' And L.IDORGANISME           = '||RMC_GetFromKeyWordLivret_txt.Id_hop;
*/
          -- cas du N
		  Requete2 := Requete2 ||') t '
                                ||'Where NOT EXISTS ( Select Null From LIVRETVIDAL L , SPEPRESENTATION S '
                                ||'Where L.IDORGANISME = '||RMC_GetFromKeyWordLivret_txt.Id_hop
                                ||' And L.ID_SPEPRESENTATION = S.ID_SPEPRESENTATION AND S.ID_SPECIALITE = T.ID )';
           --Requete2 := Requete2 ||') T, LIVRETVIDAL L , SPECIALITE S, SPEPRESENTATION P '
           --                     ||'Where T.ID = S.ID_SPECIALITE AND S.ID_SPECIALITE = P.ID_SPECIALITE '
           --                     ||'AND P.ID_SPEPRESENTATION = L.ID_SPEPRESENTATION(+) And L.IDORGANISME(+) = '||RMC_GetFromKeyWordLivret_txt.Id_hop;
           --Requete2 := Requete2 ||') x, RMC_THE_CLE c, RMC_THE T '
           --                     ||'Where c.CLE_IDE = x.CLE_IDE And t.THE_IDE = c.THE_IDE And T.TYPE_IDE = 2 '
           --                     ||'And NOT EXISTS ( Select Null From LIVRETVIDAL L , SPEPRESENTATION S '
           --                     ||'Where L.IDORGANISME = '||RMC_GetFromKeyWordLivret_txt.Id_hop
           --                     ||' And L.ID_SPEPRESENTATION = S.ID_SPEPRESENTATION AND S.ID_SPECIALITE = T.ID )';
           -- cas du A
         Requete3 := Requete3 ||') T, LIVRETVIDAL L , SPECIALITE S, SPEPRESENTATION P '
                                ||'Where T.ID = S.ID_SPECIALITE AND S.ID_SPECIALITE = P.ID_SPECIALITE '
                                ||'AND P.ID_SPEPRESENTATION = L.ID_SPEPRESENTATION And L.IDORGANISME = '||RMC_GetFromKeyWordLivret_txt.Id_hop;
           --Requete3 := Requete3 ||') x, RMC_THE_CLE c, RMC_THE T, LIVRETVIDAL L , SPECIALITE S, SPEPRESENTATION P '
           --                     ||'Where c.CLE_IDE = x.CLE_IDE And t.THE_IDE = c.THE_IDE And T.TYPE_IDE = 2 '
           --                     ||'And T.ID = S.ID_SPECIALITE AND S.ID_SPECIALITE = P.ID_SPECIALITE '
           --                     ||'AND P.ID_SPEPRESENTATION = L.ID_SPEPRESENTATION And L.IDORGANISME = '||RMC_GetFromKeyWordLivret_txt.Id_hop;

		   IF ( Recherche = 'O' ) THEN
             --Requete := Requete1||' Union '||Requete2||' Union '||Requete3;
             Requete := Requete1||' Union All ('||Requete2|| ' Union ' ||Requete3|| ') order by 4';

           ELSE
             Requete := Requete1||' Union All '||Requete3||' order by 4';
         --    Requete := Requete3||' order by 4';
           END IF;
         ELSE
           -- autre que spécialité
           Requete := 'Select Distinct t.The_Ide THE_IDE, t.Type_ide TYPE_IDE, t.the_Caf THE_CAF, '
                    ||'t.The_Laf THE_LAF, t.id ID, 0 IDORGANISME, '''' FLAG From (';
           FOR I IN T_Mot.First..T_Mot.Last
           LOOP
             -- ---------------------
             -- Cas premier Mot
             -- ---------------------
             IF I = T_Mot.First AND T_Mot(I).Ifirst <> 1 THEN
               Requete := Requete || ' ' || SUBSTR(Chaine_Epure,1,T_Mot(I).Ifirst-1);
             END IF;
             -- ---------------------------------------
             -- Inserton requete dans chaine generale
             -- --------------------------------------
             Requete := Requete || ' ' ||T_Req(I);
             -- ---------------------
             -- Inter mots
             -- ---------------------
             IF I <> T_Mot.Last  THEN
               Mot_Cle := SUBSTR(Chaine_Epure,T_Mot(I).Ilast+1, T_Mot(I+1).Ifirst-T_Mot(I).Ilast-1);
               Requete := Requete || REPLACE(REPLACE(REPLACE(Mot_Cle,MotEt,' Intersect '), MotOu,' Union '), Motsauf,' Minus ');
             END IF;
             -- ----------------------------------------
             -- Cas dernier mot
             -- ----------------------------------------
             IF I = T_Mot.Last AND T_Mot(I).Ilast <> LENGTH(Chaine_Epure) THEN
               Requete := Requete || SUBSTR(Chaine_Epure,T_Mot(I).Ilast+1);
             END IF;
           END LOOP;
           -- --------------------------------------------------
           --  Construction de la fin de la requete
           -- --------------------------------------------------
           Requete := Requete ||') T ';
           --Requete := Requete ||') x, RMC_THE_CLE c, RMC_THE T '
           --                   ||'Where c.CLE_IDE = x.CLE_IDE And t.THE_IDE = c.THE_IDE ';

		   IF RMC_GetFromKeyWordLivret_txt.TYPE_IDE IS NOT NULL THEN
             Requete := Requete || ' Where t.TYPE_IDE = '||RMC_GetFromKeyWordLivret_txt.Type_Ide||' ';
           END IF;
		   --If RMC_GetFromKeyWordLivret_txt.TYPE_IDE is not null Then
           --  Requete := Requete || ' And t.TYPE_IDE = '||RMC_GetFromKeyWordLivret_txt.Type_Ide||' ';
           --End if;
		   IF RMC_GetFromKeyWordLivret_txt.TYPE_IDE = 8 THEN
		   	  requete := requete || ' order by 3';
		   END IF;
           -- --------------------------------------------------
           -- Cas particulier du groupe d'indication
           -- --------------------------------------------------
           IF RMC_GetFromKeyWordLivret_txt.TYPE_IDE  = 5  THEN
               Requete :=  Requete
                      || ' union '
                      || ' select  Distinct a.The_Ide THE_IDE, a.Type_ide TYPE_IDE, a.the_Caf THE_CAF, '
                      || ' a.The_Laf THE_LAF, a.id ID, 0 IDORGANISME, '''' FLAG '
                      || ' from RMC_THE a, RMC_THE_PRO b, RMC_THE c, RMC_THE_CLE d ,(select CLE_IDE from RMC_CLE  '
                                                                                     || ' Where  TYPE_IDE       = 4 '
                                                                                     || ' And  UPPER(TRANSLATE(CLE_LIB,''' || Avidal_RMC.ch1 || ''', ''' || Avidal_RMC.ch2 || '''))'
																					 || ' like upper(translate(''' || Mot_cle || '%'', '''
                                                                                     || Avidal_Livret.ch1 || ''', ''' || Avidal_Livret.ch2 || '''))) e'
                      || ' Where  a.TYPE_IDE       = 5 '
                      || ' And  b.THE_IDE        = a.THE_IDE '
                      || ' And  c.THE_IDE        = b.THE_THE_IDE '
                      || ' And  c.TYPE_IDE       = 4 '
                      || ' And  c.THE_IDE        = d.THE_IDE '
                      || ' And  d.CLE_IDE        = e.CLE_IDE '
                      || ' Order by 4' ;
           END IF;
           -- ----------------------------------------------
           -- Clause Order ... en instance
           -- ----------------------------------------------
         END IF;
--       If P_Sel_Dyn.Att_Ide is null Then
--         Requete := Requete || 'And Rownum <= '||The_Res.max_Enr ||' Order By 2';
--         INSERT INTO REQ VALUES (REQUETE);
--       Else
--         Requete := Requete || 'And Rownum <= '||The_Res.max_Enr ||' Order By 6';
--         INSERT INTO REQ VALUES (REQUETE);
--       End if;
         -- ----------------------------------------------
         -- Ouverture curseur
         -- ----------------------------------------------
         OPEN RMC_GetFromKeyWordLivret_txt.RefLnkthe FOR Requete;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%RMC_GetFromKeyWordLivret_txt%');
--         COMMIT;
-------------------------------------------------------------

         RETURN 1;
         EXCEPTION
           WHEN OTHERS THEN
             RETURN SQLCODE;
       END RMC_GetFromKeyWordLivret_txt;
  -- ----------------------------------------------------------------
  -- Procedure de Sélection
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- Modification #2 : Retourne les spécialités répertoriées dans
  --                   les Livrets (VIDAL et HOPITAL) de l'Organisme
  --                   passé en paramètre (Id_hop).
  -- ----------------------------------------------------------------
       PROCEDURE GetSpeLivret_id ( Id_hop      IN    Avidal_Livret.IDORGANISME,
                                RefLnkTHE   OUT   Specialite_Pubres.SPECIALITECurTyp2,
                                Ret         OUT   NUMBER)
       IS
       BEGIN
             Ret := Avidal_Livret.GetSpeLivret_id ( Id_hop, RefLnkTHE);
       END GetSpeLivret_id;
       FUNCTION GetSpeLivret_id ( Id_hop      IN    Avidal_Livret.IDORGANISME,
                               RefLnkTHE   OUT   Specialite_Pubres.SPECIALITECurTyp2)
                             RETURN  NUMBER
       IS
       BEGIN
         OPEN GetSpeLivret_id.RefLnkTHE FOR
           SELECT  b.ID_SPECIALITE, b.BVALID, b.BENCOURS, b.NOMUSER,
                   b.DENOMSPE, b.FORME, b.DOSAGE, b.complement,
                   b.COMMAMMPOSO, b.RESERVE, b.INFERIEURAGE,
                   b.UNITINF, b.SUPERIEURAGE, b.UNIFSUP,
                   b.INFERIEURPOIDS, b.SUPERIEURPOIDS, b.DENOMAMM,
                   b.NUMDOSAMM, b.SPECATEGORIE, b.SOURCE, b.DATESOURCE,
                   b.REMARQUES, b.DCREAT, b.DMODIF, b.DREVIS,
                   a.ID_SPEPRESENTATION, c.IDORGANISME, 'V'
           FROM    SPECIALITE b , SPEPRESENTATION a, LIVRETVIDAL c
           WHERE   c.IDORGANISME        = GetSpeLivret_id.Id_hop
             AND   c.ID_SPEPRESENTATION = a.ID_SPEPRESENTATION
             AND   a.ID_SPECIALITE      = b.ID_SPECIALITE
          UNION
           SELECT  0 Id_Specialite, '' BVALID, '' BENCOURS, ''NOMUSER,
                   b.NOM, b.FORME, b.DOSAGE, '' complement,
                   '' COMMAMMPOSO, '' RESERVE, 0 INFERIEURAGE,
                   '' UNITINF, 0 SUPERIEURAGE, '' UNIFSUP,
                   0 INFERIEURPOIDS, 0 SUPERIEURPOIDS, '' DENOMAMM,
                   '' NUMDOSAMM, '' SPECATEGORIE, '' SOURCE,
                   TO_DATE('31/12/2099','DD/MM/YYYY') DATESOURCE,
                   '' REMARQUES, TO_DATE('31/12/2099','DD/MM/YYYY') DCREAT,
                   TO_DATE('31/12/2099','DD/MM/YYYY') DMODIF,
                   TO_DATE('31/12/2099','DD/MM/YYYY') DREVIS,
                   b.ID_SPEPRESENTATIONHOP, a.IDORGANISME, 'H'
           FROM    SPEPRESENTATIONHOP b, LIVRETHOP a
           WHERE   a.ID_SPEPRESENTATIONHOP = b.ID_SPEPRESENTATIONHOP
             AND   a.IDORGANISME           = b.IDORGANISME
             AND   a.IDORGANISME           = GetSpeLivret_id.Id_hop;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSpeLivret_id%');
--         COMMIT;
-------------------------------------------------------------

         RETURN 1;
         EXCEPTION
           WHEN OTHERS THEN
             RETURN SQLCODE;
       END GetSpeLivret_id;
  -- -------------------------------------------------------------------
  -- Fonction   : RMC_GetSpeLivret_id
  -- Objet      : Recherche des spécifications à partir (au choix)
  --              . D'un code CIP        : recherche hiérachique pere
  --              . D'une substance      : Recherche profil pere
  --              . D'une indication     : Recherche profil fils
  --              . D'une contre indic.  : Recherche profil fils
  --              . D'une classe thera.  : Recherche profil fils
  --              . D'une classe IAM     : Recherche profil père
  --              . D'un labo            : Recherche profil père
  --             : Modification #1
  --              . D'un labo            : Recherche profil fils
  --              . D'une classe IAM     : Recherche profil fils
  -- -------------------------------------------------------------------
  -- -------------------------------------------------------------------
  PROCEDURE RMC_GetSpeLivret_id (The_Ide      IN     Rmc_The_Pubres.THE_IDE,
                            Type_Ide     IN     Rmc_The_Pubres.TYPE_IDE,
                            Hop          IN     NUMBER,
                            RefThe       OUT    Avidal_Livret.RMC_THEHopCurTyp,
                            Ret          OUT    NUMBER) IS
   BEGIN
       RMC_GetSpeLivret_id.Ret := Avidal_Livret.Rmc_GetSpeLivret_id(RMC_GetSpeLivret_id.The_Ide, RMC_GetSpeLivret_id.Type_Ide, RMC_GetSpeLivret_id.Hop, RMC_GetSpeLivret_id.RefThe);
   END RMC_GetSpeLivret_id ;

   FUNCTION RMC_GetSpeLivret_id (The_Ide      IN     Rmc_The_Pubres.THE_IDE,
                           Type_Ide     IN     Rmc_The_Pubres.TYPE_IDE,
                           Hop          IN     NUMBER,
                           RefThe       OUT    Avidal_Livret.RMC_THEHopCurTyp)
                           RETURN NUMBER IS
    BEGIN

      -------------------------------------------------------------
      --Statistiques sur la procedure - rempli la table Marqueurs
      --le 25/05/2004
      -------------------------------------------------------------
      --         Update Marqueurs SET
      --                   Compteur = Compteur + 1
      --                  where upper(proc_name) Like UPPER('%RMC_GetSpeLivret_id%');
      --         COMMIT;
      -- ---------------------------------------------
           -- Recuperation code spécialité
       -- ---------------------------------------------
       Type_To := RMC_Get_Type('SPE');
       -- ---------------------------------------------
           -- Test des types attendues
       -- ---------------------------------------------
       IF     Avidal_Livret.TTyp_Cst(ABS(RMC_GetSpeLivret_id.Type_Ide))  = 'CIP' THEN
          -- -------------------------------------------------
                  -- Recherche hiérarchique père pour les CIP
                  -- -------------------------------------------------
          RETURN(RMC_GetHie_Pro(RMC_GetSpeLivret_id.The_Ide,'H',ABS(RMC_GetSpeLivret_id.Type_Ide)*-1,Type_To, RMC_GetSpeLivret_id.Hop,
                                        RMC_GetSpeLivret_id.RefThe));
           ELSIF  Avidal_Livret.TTyp_Cst(ABS(RMC_GetSpeLivret_id.Type_Ide)) IN ('INDIC','CINDIC','THERA','LABO','IAM') THEN
          -- --------------------------------------------------------------
          -- Recherche profil Fils pour les les indications,
          -- les contre indications, les classes thera,
          -- Modifié le 13/03/2001 : MR - plus les labos et les Classes IAM
          -- --------------------------------------------------------------
          RETURN(RMC_GetHie_Pro(RMC_GetSpeLivret_id.The_Ide,'P',ABS(RMC_GetSpeLivret_id.Type_Ide),Type_To, RMC_GetSpeLivret_id.Hop,
                                        RMC_GetSpeLivret_id.RefThe));
           ELSIF  Avidal_Livret.TTyp_Cst(ABS(RMC_GetSpeLivret_id.Type_Ide)) = 'SUB' THEN
          -- -----------------------------------------------------
          -- Recherche profil père pour les substances
          -- Modifié le 13/03/2001 : MR - seulement les substances
          --                           ( retrait des LABO et IAM )
          -- -----------------------------------------------------
          RETURN(RMC_GetHie_Pro(RMC_GetSpeLivret_id.The_Ide,'P',ABS(RMC_GetSpeLivret_id.Type_Ide)*-1,Type_To, RMC_GetSpeLivret_id.Hop,
                                        RMC_GetSpeLivret_id.RefThe));
           ELSE
          -- -------------------------------------------------
                  -- Retour vide sur type non attendue
          -- -------------------------------------------------
          RETURN(RMC_GetHie_Pro(RMC_GetSpeLivret_id.The_Ide,'P',0,Type_To, RMC_GetSpeLivret_id.Hop, RMC_GetSpeLivret_id.RefThe));
           END IF;
    EXCEPTION
       WHEN NO_DATA_FOUND THEN
           -- -------------------------------------------------
                   -- Retour vide sur type non Initialisée
           -- -------------------------------------------------
           BEGIN
              RETURN(RMC_GetHie_Pro(RMC_GetSpeLivret_id.The_Ide,'P',0,Type_To, RMC_GetSpeLivret_id.Hop, RMC_GetSpeLivret_id.RefThe));
           EXCEPTION
                     WHEN OTHERS THEN
                      RETURN SQLCODE;
                   END;
           WHEN OTHERS THEN
               RETURN SQLCODE;
    END RMC_GetSpeLivret_id;

  -- -------------------------------------------------------------------------------------------------
  -- Procedure de suppression - Table : LIVRETVIDAL/LIVRETHOP/LIVRETVIDALTEMP/LIVRETHOPTEMP
  -- -------------------------------------------------------------------------------------------------
 PROCEDURE P_Delete_Tables_Livret(
      IDORGANISME   IN NUMBER,
      Cod_Trt       OUT VARCHAR2)  IS
 BEGIN
  If IDORGANISME is not null THEN
      DELETE FROM LIVRETVIDAL
        WHERE IDORGANISME = P_Delete_Tables_Livret.IDORGANISME;
      DELETE FROM LIVRETVIDALTEMP
        WHERE IDORGANISME = P_Delete_Tables_Livret.IDORGANISME;
      DELETE FROM LIVRETHOP
        WHERE IDORGANISME = P_Delete_Tables_Livret.IDORGANISME;
      DELETE FROM LIVRETHOPTEMP
        WHERE IDORGANISME = P_Delete_Tables_Livret.IDORGANISME;
      DELETE FROM COMPOHOP
        WHERE IDORGANISME = P_Delete_Tables_Livret.IDORGANISME;
      DELETE FROM COMPOHOPTEMP
        WHERE IDORGANISME = P_Delete_Tables_Livret.IDORGANISME;
      DELETE FROM T_SUBHOP
        WHERE IDORGANISME = P_Delete_Tables_Livret.IDORGANISME;
      DELETE FROM T_SUBHOPTEMP
        WHERE IDORGANISME = P_Delete_Tables_Livret.IDORGANISME;
      DELETE FROM SPEPRESENTATIONHOP
        WHERE IDORGANISME = P_Delete_Tables_Livret.IDORGANISME;
      DELETE FROM SPEPRESENTATIONHOPTEMP
        WHERE IDORGANISME = P_Delete_Tables_Livret.IDORGANISME;
      DELETE FROM COMPOVIDAL
        WHERE IDORGANISME = P_Delete_Tables_Livret.IDORGANISME;
      DELETE FROM COMPOVIDALTEMP
        WHERE IDORGANISME = P_Delete_Tables_Livret.IDORGANISME;

  ELSE
      DELETE FROM LIVRETVIDAL;
      DELETE FROM LIVRETVIDALTEMP;
      DELETE FROM LIVRETHOP;
      DELETE FROM LIVRETHOPTEMP;
      DELETE FROM T_SUBHOP;
      DELETE FROM T_SUBHOPTEMP;
      DELETE FROM COMPOHOP;
      DELETE FROM COMPOHOPTEMP;
      DELETE FROM SPEPRESENTATIONHOP;
      DELETE FROM SPEPRESENTATIONHOPTEMP;
      DELETE FROM COMPOVIDAL;
      DELETE FROM COMPOVIDALTEMP;


  END IF;

    P_Delete_Tables_Livret.Cod_Trt := 'ORA-00000 : Normal, Successful completion';

 COMMIT;

 EXCEPTION
   WHEN OTHERS THEN
    P_Delete_Tables_Livret.Cod_Trt := SUBSTR(SQLERRM,1,255);
    ROLLBACK;
 END P_Delete_Tables_Livret;
--==================================================================
--    FIN DE PACKAGE
--==================================================================
BEGIN
      -- ----------------------------------------------------------
          -- Initailisation du Package
      -- ----------------------------------------------------------
          Avidal_Livret.TTyp_Cst.DELETE;
          Avidal_Livret.TTyp_Cst(1)  := 'CIP';     -- Valeur 1  CIP
          Avidal_Livret.TTyp_Cst(2)  := 'SPE';     -- Valeur 2  Spécialité
          Avidal_Livret.TTyp_Cst(3)  := 'SUB';     -- Valeur 3  Substance
          Avidal_Livret.TTyp_Cst(4)  := 'INDIC';   -- Valeur 4  Indications
          Avidal_Livret.TTyp_Cst(5)  := 'GINDIC';  -- Valeur 5  Groupe d'indication, situation de prescription
          Avidal_Livret.TTyp_Cst(6)  := 'CINDIC';  -- Valeur 6  Contre indication
          Avidal_Livret.TTyp_Cst(7)  := 'THERA';   -- Valeur 7  Classe therapeutique
          Avidal_Livret.TTyp_Cst(8)  := 'CIM';     -- Valeur 8  CIM10
          Avidal_Livret.TTyp_Cst(9) := 'LABO';     -- Valeur 9 laboratoire
	        Avidal_Livret.TTyp_Cst(10)  := 'IAM';    -- Valeur 10  Classe d'interaction
          Avidal_Livret.TTyp_Cst(11) := 'DIAG';    -- Valeur 11 Dignostic
END Avidal_Livret;
/
CREATE OR REPLACE Package Avidal_PopLivret as
   -- =====================================================
   -- Script      : AVIDAL_POPLIVRET    Type : Package
   -- Objet       :
   -- Owner       : VIDAL
   -- Création    : 25/06/2001
   -- Auteur      : MHA K2/PixelPark
   -- Généré par  :
   -- Modifié par :
   -- =====================================================

   --
   -- PopLivret : cette procédure permet de vantiler les données dans la table tampon vers les tables du Livret.
   --             avant la mise à jout du Livret celui-ci est vidé
   --
   Procedure PopLivret;
End;
/

CREATE OR REPLACE Package Body Avidal_PopLivret as

   Procedure PopLivret Is
      v_spepre Number;
      v_err_code Varchar2(10);
      v_err_msg  Varchar2(2000);
   Begin

      -------------------------------------------------------------
      --Statistiques sur la procedure - rempli la table Marqueurs
      --le 25/05/2004
      -------------------------------------------------------------
      --         Update Marqueurs SET
      --                  Compteur = Compteur + 1
      --                  where upper(proc_name) Like UPPER('%PopLivret%');
      --         COMMIT;
      -------------------------------------------------------------


      Delete From livrethop Where Exists (Select Null From tampon Where idorganisme = livrethop.idorganisme);
      Delete From LivretVidal  Where Exists (Select Null From tampon Where idorganisme = livretvidal.idorganisme);
      Delete From compohop  Where Exists (Select Null From tampon Where idorganisme = compohop.idorganisme);
      Delete From compovidal  Where Exists (Select Null From tampon Where idorganisme = compovidal.idorganisme);
--      Delete From t_subhop  Where Exists (Select Null From tampon Where idorganisme = t_subhop.idorganisme);
      Delete From spepresentationhop  Where Exists (Select Null From tampon Where idorganisme = spepresentationhop.idorganisme);

      Delete From LivretLog;

      For r_medic In (  Select *
                        From tampon t
                        Where Exists (Select Null From tampon Where idorganisme = t.idorganisme)
                        And   Not Exists (Select Null From spepresentation Where cip = t.cip)
                     )
      Loop

         Begin

            Select seq_id_spepresentationhop.NextVal Into v_spepre
            From Dual;

            Insert Into spepresentationhop (idorganisme, id_spepresentationhop, nom, presentation, forme, dosage, cip, ucd, labo)
            Values (r_medic.idorganisme, v_spepre, r_medic.nom, r_medic.presentation, r_medic.forme, r_medic.dosage, r_medic.cip, r_medic.ucd, r_medic.labo);

            Insert Into livrethop (idorganisme, id_spepresentationhop, prix_ttc_f, prix_ttc_e, dispo, commentaire, codhopital)
            Values (r_medic.idorganisme, v_spepre, r_medic.prix_ttc_f, r_medic.prix_ttc_e, r_medic.dispo, r_medic.commentaire, r_medic.codhopital);

         Exception
            When Others Then
               v_err_code := sqlcode;
               v_err_msg  := substr(sqlerrm, 1, 2000);
               Insert into LivretLog (CIP, Nom, CodeErreur, TexteErreur) Values (r_medic.cip, r_medic.nom, v_err_code, v_err_msg);
         End;
      End Loop;

      For r_livr In (   Select t.idorganisme, s.id_spepresentation, t.nom, t.ucd, t.prix_ttc_f, t.prix_ttc_e, t.dispo, t.commentaire, t.cip, t.codhopital
                        From   spepresentation s, tampon t
                        Where  s.cip = t.cip
                    )
      Loop
         Begin

            Insert Into livretvidal (idorganisme, id_spepresentation, prix_ttc_f, prix_ttc_e, dispo, commentaire, denom_hop, ucd_hop, codhopital)
            Values (r_livr.idorganisme, r_livr.id_spepresentation, r_livr.prix_ttc_f, r_livr.prix_ttc_e, r_livr.dispo, r_livr.commentaire, r_livr.nom, r_livr.ucd, r_livr.codhopital);

         Exception
            When Others Then
               v_err_code := sqlcode;
               v_err_msg  := substr(sqlerrm, 1, 2000);
               Insert into LivretLog (CIP, Nom, CodeErreur, TexteErreur) Values (r_livr.cip, r_livr.nom, v_err_code, v_err_msg);
         End;
     End Loop;

    -- Delete From tampon;

     Exception
         When Others Then
            v_err_code := sqlcode;
            v_err_msg  := substr(sqlerrm, 1, 2000);
            Insert into LivretLog (CIP, Nom, CodeErreur, TexteErreur) Values ('', '', v_err_code, v_err_msg);
      commit;
   End;

End;
/
CREATE OR REPLACE Package AVIDAL_POSOLOGIE Is
-- ====================================================================
-- Script     : AVIDAL_POSOLOGIE    Type : Package
-- Objet      : Ressources Select tables
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:37
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	   Procedure GetSpePosol_id ( Id_Specialite	 In  SPECIALITE_Pubres.Id_Specialite	 Default Null,
	   						   Id_Speindic		 In  SPEPOSOINDIC_Pubres.Id_Speindic	 Default Null,
							   Phase			 In  SPEPOSO_PubRes.Phase				 Default Null,
	   				   	 	   RefSPEPOSO 		 Out SPEPOSO_Pubres.SPEPOSOCurTyp,
							   Ret				 Out Number);

	   Procedure GetSpePosolPhase_id ( Id_Specialite	 In  SPECIALITE_Pubres.Id_Specialite	 Default Null,
	   						  	    Id_Speindic		 In  SPEPOSOINDIC_Pubres.Id_Speindic	 Default Null,
	   				   	 	  	    RefSPEPOSO 		 Out SPEPOSO_Pubres.SPEPOSOCurTyp,
							  	    Ret				 Out Number);

  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   -- =====================================================================
   -- Function		  : GetSpePosol(IdSpe, IdIndic, IdPhase)
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   Function GetSpePosol_id ( Id_Specialite		 In  SPECIALITE_Pubres.Id_Specialite	 Default Null,
	   						  Id_Speindic		 In  SPEPOSOINDIC_Pubres.Id_Speindic	 Default Null,
							  Phase				 In  SPEPOSO_PubRes.Phase				 Default Null,
	   				   	 	  RefSPEPOSO 		 Out SPEPOSO_Pubres.SPEPOSOCurTyp)
	   			Return Number;
	    Pragma Restrict_References(GetSpePosol_id,WNDS,WNPS,RNPS);

   -- =====================================================================
   -- Function		  : GetSpePosolPhase
   -- Purpose		  :
   -- Parameters In	  :
   -- Parameters Out  :
   -- History	  	  : Created by N.Q. 20 Sept 2000
   -- =====================================================================
	   Function GetSpePosolPhase_id ( Id_Specialite	 In  SPECIALITE_Pubres.Id_Specialite	 Default Null,
	   						  	   Id_Speindic		 In  SPEPOSOINDIC_Pubres.Id_Speindic	 Default Null,
	   				   	 	  	   RefSPEPOSO 		 Out SPEPOSO_Pubres.SPEPOSOCurTyp)
	   			Return Number;
	    Pragma Restrict_References(GetSpePosolPhase_id, WNDS,WNPS,RNPS);

-- ====================================================================
-- Fin de package
-- ====================================================================
End AVIDAL_POSOLOGIE;
/

CREATE OR REPLACE Package Body AVIDAL_POSOLOGIE Is
-- ====================================================================
-- Script     : AVIDAL_POSOLOGIE    Type : Package Body
-- Objet      : Ressources Select tables
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:39
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSpePosol_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   Procedure GetSpePosol_id ( Id_Specialite		 In  SPECIALITE_Pubres.Id_Specialite	 Default Null,
	   						  Id_Speindic		 In  SPEPOSOINDIC_Pubres.Id_Speindic	 Default Null,
							  Phase				 In  SPEPOSO_PubRes.Phase				 Default Null,
	   				   	 	  RefSPEPOSO 		 Out SPEPOSO_Pubres.SPEPOSOCurTyp,
							  Ret				 Out Number)
				Is
	   Begin
	   		Ret := GetSpePosol_id ( Id_Specialite, Id_Speindic, Phase, RefSPEPOSO);
	   End GetSpePosol_id;

	   Function GetSpePosol_id ( Id_Specialite		 In  SPECIALITE_Pubres.Id_Specialite	 Default Null,
	   						  Id_Speindic		 In  SPEPOSOINDIC_Pubres.Id_Speindic	 Default Null,
							  Phase				 In  SPEPOSO_PubRes.Phase				 Default Null,
	   				   	 	  RefSPEPOSO 		 Out SPEPOSO_Pubres.SPEPOSOCurTyp)
	   			Return Number Is

	   Begin

	   If GetSpePosol_id.Id_SpeIndic = -1 Then

	   	Open GetSpePosol_id.RefSPEPOSO For
		Select ID_SPECIALITE, ID_SPEPRISE, ID_SPEPOSO, RELECTUREPAR,
			   POSOUSUINF, POSOUSUSUP, POSOUSUTYPE, POSOMIN, POSOMINTYPE,
			   POSOMAX, POSOMAXTYPE, POSOTOTMAX, POSOTOTMAXTYPE,
			   FREQUSUINF, FREQUSUSUP, FREQUSUTYPE, FREQINFPOSOMAX,
			   FREQSUPPOSOMAX, FREQPOSOMAXTYPE, FREQINFPOSOMIN,
			   FREQSUPPOSOMIN, FREQPOSOMINTYPE, FREQPOSOTOTMAXTYPE,
			   FREQINFRENOUV, FREQSUPRENOUV, FREQRENOUVTYPE, FREQDIV,
			   DURADUSUINF, DURADUSUSUP, DURADUSUTYPE, DURMAX, DURMAXTYPE,
			   DURTOTAL, DURTOTALTYPE, DURARRETINF, DURARRETSUP, DURARRETTYPE,
			   POIDSINF, POIDSSUP, AGEINF, UNITEAGEINF, AGESUP, UNITEAGESUP,
			   PHASE, ORDREDEPHASE, LIENPHASE, ETATPREEXISTANT,
			   SITUDSTEMPSPOSOINF, SITUDSTEMPSPOSOSUP, RENOUVELLEMENT, SEXE,
			   COPRESCRIPTION, REPAS, CONSEIL, MODEEMPLOI, DCREAT, DMODIF, DREVIS
 		  From SPEPOSO
 		Where (Id_Specialite = GetSpePosol_id.Id_Specialite Or GetSpePosol_id.Id_Specialite Is null)
		  And  Phase		 = Decode(GetSpePosol_id.Phase, null, Phase, GetSpePosol_id.Phase) ;

	  Else

	   	Open GetSpePosol_id.RefSPEPOSO For
		Select b.ID_SPECIALITE, b.ID_SPEPRISE, b.ID_SPEPOSO, b.RELECTUREPAR,
			   b.POSOUSUINF, b.POSOUSUSUP, b.POSOUSUTYPE, b.POSOMIN, b.POSOMINTYPE,
			   b.POSOMAX, b.POSOMAXTYPE, b.POSOTOTMAX, b.POSOTOTMAXTYPE,
			   b.FREQUSUINF, b.FREQUSUSUP, b.FREQUSUTYPE, b.FREQINFPOSOMAX,
			   b.FREQSUPPOSOMAX, b.FREQPOSOMAXTYPE, b.FREQINFPOSOMIN,
			   b.FREQSUPPOSOMIN, b.FREQPOSOMINTYPE, b.FREQPOSOTOTMAXTYPE,
			   b.FREQINFRENOUV, b.FREQSUPRENOUV, b.FREQRENOUVTYPE, b.FREQDIV,
			   b.DURADUSUINF, b.DURADUSUSUP, b.DURADUSUTYPE, b.DURMAX, b.DURMAXTYPE,
			   b.DURTOTAL, b.DURTOTALTYPE, b.DURARRETINF, b.DURARRETSUP, b.DURARRETTYPE,
			   b.POIDSINF, b.POIDSSUP, b.AGEINF, b.UNITEAGEINF, b.AGESUP, b.UNITEAGESUP,
			   b.PHASE, b.ORDREDEPHASE, b.LIENPHASE, b.ETATPREEXISTANT,
			   b.SITUDSTEMPSPOSOINF, b.SITUDSTEMPSPOSOSUP, b.RENOUVELLEMENT, b.SEXE,
			   b.COPRESCRIPTION, b.REPAS, b.CONSEIL, b.MODEEMPLOI, b.DCREAT, b.DMODIF, b.DREVIS
 		  From SPEPOSO b, SPEPOSOINDIC a
 		Where  a.ID_SPEINDIC   = GetSpePosol_id.Id_SPeindic
		  And  b.ID_SPEPOSO    = a.ID_SPEPOSO
		  And (b.Id_Specialite = GetSpePosol_id.Id_Specialite Or GetSpePosol_id.Id_Specialite Is null)
		  And  b.Phase		   = Decode(GetSpePosol_id.Phase, null, b.Phase, GetSpePosol_id.Phase) ;

	  End If;


-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSpePosol_id%');
--         COMMIT;
-------------------------------------------------------------

	  Return 1;

		EXCEPTION
		When Others Then
			 Return SQLCODE;

	   End GetSpePosol_id;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  :
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   Procedure GetSpePosolPhase_id ( Id_Specialite	 In  SPECIALITE_Pubres.Id_Specialite	 Default Null,
	   						  	   Id_Speindic		 In  SPEPOSOINDIC_Pubres.Id_Speindic	 Default Null,
	   				   	 	  	   RefSPEPOSO 		 Out SPEPOSO_Pubres.SPEPOSOCurTyp,
								   Ret				 Out Number)
	   			Is

	   Begin
	   		Ret := GetSpePosolPhase_id ( Id_Specialite, Id_Speindic, RefSPEPOSO);
	   End GetSpePosolPhase_id;

	   Function GetSpePosolPhase_id ( Id_Specialite	 In  SPECIALITE_Pubres.Id_Specialite	 Default Null,
	   						  	   Id_Speindic		 In  SPEPOSOINDIC_Pubres.Id_Speindic	 Default Null,
	   				   	 	  	   RefSPEPOSO 		 Out SPEPOSO_Pubres.SPEPOSOCurTyp)
	   			Return Number Is

	   Begin

	   If GetSpePosolPhase_id.Id_SpeIndic = -1 Then

	   	Open GetSpePosolPhase_id.RefSPEPOSO For
		Select ID_SPECIALITE, ID_SPEPRISE, ID_SPEPOSO, RELECTUREPAR,
			   POSOUSUINF, POSOUSUSUP, POSOUSUTYPE, POSOMIN, POSOMINTYPE,
			   POSOMAX, POSOMAXTYPE, POSOTOTMAX, POSOTOTMAXTYPE,
			   FREQUSUINF, FREQUSUSUP, FREQUSUTYPE, FREQINFPOSOMAX,
			   FREQSUPPOSOMAX, FREQPOSOMAXTYPE, FREQINFPOSOMIN,
			   FREQSUPPOSOMIN, FREQPOSOMINTYPE, FREQPOSOTOTMAXTYPE,
			   FREQINFRENOUV, FREQSUPRENOUV, FREQRENOUVTYPE, FREQDIV,
			   DURADUSUINF, DURADUSUSUP, DURADUSUTYPE, DURMAX, DURMAXTYPE,
			   DURTOTAL, DURTOTALTYPE, DURARRETINF, DURARRETSUP, DURARRETTYPE,
			   POIDSINF, POIDSSUP, AGEINF, UNITEAGEINF, AGESUP, UNITEAGESUP,
			   PHASE, ORDREDEPHASE, LIENPHASE, ETATPREEXISTANT,
			   SITUDSTEMPSPOSOINF, SITUDSTEMPSPOSOSUP, RENOUVELLEMENT, SEXE,
			   COPRESCRIPTION, REPAS, CONSEIL, MODEEMPLOI, DCREAT, DMODIF, DREVIS
 		  From SPEPOSO
 		Where (Id_Specialite = GetSpePosolPhase_id.Id_Specialite Or GetSpePosolPhase_id.Id_Specialite Is null);

	  Else

	   	Open GetSpePosolPhase_id.RefSPEPOSO For
		Select b.ID_SPECIALITE, b.ID_SPEPRISE, b.ID_SPEPOSO, b.RELECTUREPAR,
			   b.POSOUSUINF, b.POSOUSUSUP, b.POSOUSUTYPE, b.POSOMIN, b.POSOMINTYPE,
			   b.POSOMAX, b.POSOMAXTYPE, b.POSOTOTMAX, b.POSOTOTMAXTYPE,
			   b.FREQUSUINF, b.FREQUSUSUP, b.FREQUSUTYPE, b.FREQINFPOSOMAX,
			   b.FREQSUPPOSOMAX, b.FREQPOSOMAXTYPE, b.FREQINFPOSOMIN,
			   b.FREQSUPPOSOMIN, b.FREQPOSOMINTYPE, b.FREQPOSOTOTMAXTYPE,
			   b.FREQINFRENOUV, b.FREQSUPRENOUV, b.FREQRENOUVTYPE, b.FREQDIV,
			   b.DURADUSUINF, b.DURADUSUSUP, b.DURADUSUTYPE, b.DURMAX, b.DURMAXTYPE,
			   b.DURTOTAL, b.DURTOTALTYPE, b.DURARRETINF, b.DURARRETSUP, b.DURARRETTYPE,
			   b.POIDSINF, b.POIDSSUP, b.AGEINF, b.UNITEAGEINF, b.AGESUP, b.UNITEAGESUP,
			   b.PHASE, b.ORDREDEPHASE, b.LIENPHASE, b.ETATPREEXISTANT,
			   b.SITUDSTEMPSPOSOINF, b.SITUDSTEMPSPOSOSUP, b.RENOUVELLEMENT, b.SEXE,
			   b.COPRESCRIPTION, b.REPAS, b.CONSEIL, b.MODEEMPLOI, b.DCREAT, b.DMODIF, b.DREVIS
 		  From SPEPOSO b, SPEPOSOINDIC a
 		Where  a.ID_SPEINDIC   = GetSpePosolPhase_id.Id_SPeindic
		  And  b.ID_SPEPOSO    = a.ID_SPEPOSO
		  And (b.Id_Specialite = GetSpePosolPhase_id.Id_Specialite Or GetSpePosolPhase_id.Id_Specialite Is null);

	  End If;


-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSpePosolPhase_id%');
--         COMMIT;
-------------------------------------------------------------

	  Return 1;

		EXCEPTION
		When Others Then
			 Return SQLCODE;

	   End GetSpePosolPhase_id;

-- ====================================================================
-- Fin de package
-- ====================================================================
End AVIDAL_POSOLOGIE;
/
CREATE OR REPLACE PACKAGE      "AVIDAL_PUBRES"  IS
-- ====================================================================
-- Script     : AVIDAL_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:33
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

   -- =====================================================================
   -- Définition des variables et des Constantes
   -- =====================================================================
   ch1     VARCHAR2(255) := 'éêèëàäâïîöôüûùÿÉÈÊËÀÄÂÏÎÖÔÜÛÙ?';
   ch2     VARCHAR2(255) := 'eeeeaaaiioouuuyEEEEAAAIIOOUUUY';
   domainmax INTEGER := 6;

   FUNCTION DecodeDomain ( Domain	IN  Integer)
	   			RETURN VARCHAR2;

   TYPE GenericRc IS REF CURSOR;   --Curseur Lâche

-- ====================================================================
-- Fin de package
-- ====================================================================
END Avidal_Pubres;
/

CREATE OR REPLACE PACKAGE BODY Avidal_Pubres IS
-- ====================================================================
-- Script     : AVIDAL_Pubres    Type : Package Body
-- Objet      : Ressources Select tables
-- Owner      : VIDAL
-- Création   : 31/01/2002
-- Auteur     : AL
-- ====================================================================

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : DecodeDomain
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------

	   FUNCTION DecodeDomain ( DOMAIN	IN  Integer)
	   			RETURN VARCHAR2 IS

	   r VARCHAR2(50);
	   i Pls_integer;
	   dom Pls_integer;

	   BEGIN

	   	  dom := DOMAIN;
	   	  i:= AVIDAL_PUBRES.domainmax;
		  LOOP
		  	  EXIT WHEN i < 0 OR DOMAIN <=0;
		  	  IF dom >= POWER(2,i) THEN
			  	 dom := dom - POWER(2,i);
				 r := r || I || ',';
			  END IF;
		  	  i := i -1;
		  END LOOP;
		  SELECT RTRIM(r,',') INTO r
		  FROM dual;

		  RETURN r;

		EXCEPTION
		WHEN OTHERS THEN
			 RETURN SQLERRM;

	   END DecodeDomain;

END AVIDAL_PUBRES;
/
CREATE OR REPLACE PACKAGE AVIDAL_RMC AS
-- ========================================================================
-- Script     : AVIDAL_RMC   Type : Package
-- Objet      : Ressources Select tables
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:37
-- Auteur     : AGDF (2000) from Data to Information
--            : Modification #1 : MR - 14 Mar 2001 : Modif. RMC_GetSpe
--            : Modification #2 : MR - 14 Mar 2001 : Modif. RMC_GetIamClass
--            : Modification #3 : MR - 20 Mar 2001 : Ajout. RMC_GetCIM10Info
-- ========================================================================
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

           Procedure RMC_GetProfilParent_id ( THE_IDE   In    RMC_THE_Pubres.THE_IDE,
                                           RefTHE    Out   RMC_THE_Pubres.RMC_THECurTyp,
                                           Ret       Out   Number);
           Procedure RMC_GetProfilChild_id ( THE_IDE   In    RMC_THE_Pubres.THE_IDE,
                                          RefTHE    Out   RMC_THE_Pubres.RMC_THECurTyp,
                                          Ret       Out   Number);
           Procedure RMC_GetHierarchyParent_id ( THE_IDE   In    RMC_THE_Pubres.THE_IDE,
                                              RefTHE    Out   RMC_THE_Pubres.RMC_THECurTyp,
                                              Ret       Out   Number);
           Procedure RMC_GetHierarchyChild_id ( THE_IDE   In    RMC_THE_Pubres.THE_IDE,
                                             RefTHE    Out   RMC_THE_Pubres.RMC_THECurTyp,
                                             Ret       Out   Number);
           Procedure RMC_IsProfilChild_id ( THE_IDE       In    RMC_THE_Pubres.THE_IDE,
                                         THE_IDE_PER   In    RMC_THE_Pubres.THE_IDE,
                                         Ret           Out   Boolean);
           Procedure RMC_IsProfilParent_id ( THE_IDE       In   RMC_THE_Pubres.THE_IDE,
                                          THE_IDE_FIS   In   RMC_THE_Pubres.THE_IDE,
                                          Ret           Out  Boolean);
           Procedure RMC_IsHierarchyChild_id ( THE_IDE       In    RMC_THE_Pubres.THE_IDE,
                                            THE_IDE_PER   In    RMC_THE_Pubres.THE_IDE,
                                            Ret           Out   Boolean);
           Procedure RMC_IsHierarchyParent_id ( THE_IDE       In       RMC_THE_Pubres.THE_IDE,
                                             THE_IDE_FIS   In    RMC_THE_Pubres.THE_IDE,
                                             Ret           Out   Boolean);

           Procedure RMC_GetFromKeyWord_txt ( ORI_IDE     In    RMC_CLE_PubRes.ORI_IDE  Default Null,
                                          TYPE_IDE    In    RMC_CLE_PubRes.TYPE_IDE Default '%',
                                          CLE_LIB     In    RMC_CLE_PubRes.CLE_LIB  Default '%',
                                          RefLnkTHE   Out   RMC_CLE_PubRes.TheCurtyp,
                                          Ret         Out   Number);
		   Procedure RMC_GetFromKeyWord2_txt ( ORI_IDE     In    RMC_CLE_PubRes.ORI_IDE  Default Null,
                                          TYPE_IDE    In    RMC_CLE_PubRes.TYPE_IDE Default '%',
                                          CLE_LIB     In    RMC_CLE_PubRes.CLE_LIB  Default '%',
                                          RefLnkTHE   Out   RMC_CLE_PubRes.TheCurtyp,
                                          Ret         Out   Number);

           Procedure RMC_GetCIM10Info_txt ( ChaineIn    In    Varchar2,
                                        ChaineOut   Out   Varchar2,
                                        Ret         Out   Number);
   -- =====================================================================
   -- Function            : RMC_GetProfilParent
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q.
   --                               Non définie par P.M fonction vide !!!!!
   -- =====================================================================
   -- =====================================================================
   -- Function            : RMC_GetProfilParent
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           Function RMC_GetProfilParent_id ( THE_IDE   In    RMC_THE_Pubres.THE_IDE,
                                          RefTHE    Out   RMC_THE_Pubres.RMC_THECurTyp)
                                        Return Number;
            Pragma Restrict_References(RMC_GetProfilParent_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : RMC_GetProfilChild
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           Function RMC_GetProfilChild_id ( THE_IDE   In    RMC_THE_Pubres.THE_IDE,
                                         RefTHE    Out   RMC_THE_Pubres.RMC_THECurTyp)
                                       Return Number;
            Pragma Restrict_References(RMC_GetProfilChild_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : RMC_GetHierarchyParent
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           Function RMC_GetHierarchyParent_id ( THE_IDE   In    RMC_THE_Pubres.THE_IDE,
                                             RefTHE    Out   RMC_THE_Pubres.RMC_THECurTyp)
                                           Return Number;
            Pragma Restrict_References(RMC_GetHierarchyParent_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : RMC_GetHierarchyChild
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           Function RMC_GetHierarchyChild_id ( THE_IDE   In    RMC_THE_Pubres.THE_IDE,
                                            RefTHE    Out   RMC_THE_Pubres.RMC_THECurTyp)
                                          Return Number;
            Pragma Restrict_References(RMC_GetHierarchyChild_id,WNDS,WNPS,RNPS);
-- =====================================================================
   -- Function            : RMC_
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           Function RMC_GetFromKeyWord_txt ( ORI_IDE     In    RMC_CLE_PubRes.ORI_IDE  Default Null,
                                         TYPE_IDE    In    RMC_CLE_PubRes.TYPE_IDE Default '%',
                                         CLE_LIB     In    RMC_CLE_PubRes.CLE_LIB  Default '%',
                                         RefLnkTHE   Out   RMC_CLE_PubRes.TheCurtyp)
                                       Return  Number;
            Pragma Restrict_References(RMC_GetFromKeyWord_txt,WNDS,WNPS);
-- =====================================================================
		   Function RMC_GetFromKeyWord2_txt ( ORI_IDE     In    RMC_CLE_PubRes.ORI_IDE  Default Null,
                                         TYPE_IDE    In    RMC_CLE_PubRes.TYPE_IDE Default '%',
                                         CLE_LIB     In    RMC_CLE_PubRes.CLE_LIB  Default '%',
                                         RefLnkTHE   Out   RMC_CLE_PubRes.TheCurtyp)
                                       Return  Number;
            Pragma Restrict_References(RMC_GetFromKeyWord2_txt,WNDS,WNPS);
       -- -------------------------------------------------------------------
       -- Procedure   : RMC_GetSpe
       -- -------------------------------------------------------------------
          Procedure RMC_GetSpe_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                                 Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                                 RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp,
                                 Ret        Out   number);
       -- -------------------------------------------------------------------
       -- Fonction   : RMC_GetSpe
       -- Objet      : Recherche des spécifications à partir (au choix)
       --              . D'un code CIP        : recherche hiérachique père
       --              . D'une substance      : Recherche profil père
       --              . D'une indication     : Recherche profil père
       --              . D'une contre indic.  : Recherche profil père
       --              . D'une classe thera.  : Recherche profil père
       --              . D'une classe IAM     : Recherche profil père
       --              . D'un labo            : Recherche profil père
       --            : Modification #1
       --              . D'un labo            : Recherche profil fils
       --              . D'une classe IAM     : Recherche profil fils
       -- -------------------------------------------------------------------
       Function RMC_GetSpe_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                             Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                             RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp)
                           Return Number;
       -- -------------------------------------------------------------------
       -- Procedure   : RMC_GetCIP
       -- -------------------------------------------------------------------
       Procedure RMC_GetCIP_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                              Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                              RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp,
                              Ret        Out   number);
       -- -------------------------------------------------------------------
       -- Fonction   : RMC_GetCIP
       -- Objet      : Recherche des substances à partir
       --              . D'un code specification  : recherche hiérachique fils
       -- -------------------------------------------------------------------
       Function RMC_GetCIP_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                             Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                             RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp)
                           Return Number;
       -- -------------------------------------------------------------------
       -- Procedure   : RMC_GetSubst
       -- -------------------------------------------------------------------
       Procedure RMC_GetSubst_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                                Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                                RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp,
                                Ret        Out   number);
       -- -------------------------------------------------------------------
       -- Fonction   : RMC_GetSubst
       -- Objet      : Recherche des substances à partir
       --              . D'une substance  : recherche hiérachique pere et fils
       --              . D'une specialité : Recherche profil fils
       -- -------------------------------------------------------------------
       Function RMC_GetSubst_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                               Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                               RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp)
                             Return Number;
       -- -------------------------------------------------------------------
       -- Procedure   : RMC_GetIndic
       -- -------------------------------------------------------------------
       Procedure RMC_GetIndic_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                                Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                                RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp,
                                Ret        Out   number);
       -- -------------------------------------------------------------------
       -- Fonction   : RMC_Getindic
       -- Objet      : Recherche des indications à partir
       --              . D'une specialité : Recherche profil fils
       --              . D'un groupe d'indication GINDIC : Recherche profil fils
       -- -------------------------------------------------------------------
       Function RMC_GetIndic_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                               Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                               RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp)
                             Return Number;
       -- -------------------------------------------------------------------
       -- Procedure   : RMC_GetGIndic
       -- -------------------------------------------------------------------
       Procedure RMC_GetGIndic_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                                 Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                                 RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp,
                                 Ret        Out   number);
       -- -------------------------------------------------------------------
       -- Fonction   : RMC_GetGindic
       -- Objet      : Recherche des Groupes indications à partir
       --              . D'une indication : Recherche profil pere
       --              . D'un groupe d'indication : Recherche profile pere ou fils
       --              . D'un code CIM : Recherche profil ??????
       -- -------------------------------------------------------------------
       Function RMC_GetGIndic_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                                Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                                RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp)
                              Return Number;
       -- -------------------------------------------------------------------
       -- Procedure   : RMC_GetCIndic
       -- -------------------------------------------------------------------
       Procedure RMC_GetCIndic_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                                 Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                                 RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp,
                                 Ret        Out   number);
       -- -------------------------------------------------------------------
       -- Fonction   : RMC_GetCindic
       -- Objet      : Recherche des contre indications à partir
       --              . D'une spécialité : Recherche profil fils
       --              . D'un code CIM : Recherche profil ??????
       -- -------------------------------------------------------------------
       Function RMC_GetCIndic_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                                Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                                RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp)
                              Return Number;
       -- -------------------------------------------------------------------
       -- Procedure   : RMC_GetThera
       -- -------------------------------------------------------------------
       Procedure RMC_GetThera_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                                Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                                RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp,
                                Ret        Out   number);
       -- -------------------------------------------------------------------
       -- Fonction   : RMC_GetThera
       -- Objet      : Recherche des classes therapeutiques à partir
       --              . D'une spécialité : Recherche profil fils
       --              . D'une classe therapeutique recherche profil per et fils
       -- -------------------------------------------------------------------
       Function RMC_GetThera_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                               Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                               RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp)
                             Return Number;
       -- -------------------------------------------------------------------
       -- Procedure   : RMC_GetIamClass
       -- -------------------------------------------------------------------
       Procedure RMC_GetIamClass_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                                   Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                                   RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp,
                                   Ret        Out   number);
       -- -------------------------------------------------------------------
       -- Fonction   : RMC_GetIamClass
       -- Objet      : Recherche des classes d'interaction à partir
       --              . D'une spécialité : Recherche profil fils
       --              . D'une classe d'interaction
       --            : Modification #1
       --              . D'une spécialité : Recherche profil père
       -- -------------------------------------------------------------------
       Function RMC_GetIamClass_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                                  Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                                  RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp)
                                Return Number;
       -- -------------------------------------------------------------------
       -- Procedure   : RMC_GetLabo
       -- -------------------------------------------------------------------
       Procedure RMC_GetLabo_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                               Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                               RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp,
                               Ret        Out   number);
       -- -------------------------------------------------------------------
       -- Fonction   : RMC_GetLabo
       -- Objet      : Recherche des labos à partir
       --              . D'une spécialité : Recherche profil fils
       -- -------------------------------------------------------------------
       Function RMC_GetLabo_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                              Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                              RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp)
                            Return Number;
       -- -------------------------------------------------------------------
       -- Procedure   : RMC_GetCIM10
       -- -------------------------------------------------------------------
       Procedure RMC_GetCIM10_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                                Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                                Niveau     In    Varchar2                     Default Null,
                                RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp,
                                Ret        Out   number);
       -- -------------------------------------------------------------------
       -- Fonction   : RMC_GetCIM10
       -- Objet      : Recherche des codes CIM à partir
       --              . D'un groupe d'indication : Recherche Profil ????
       --              . D'une contre indication : Recherche Profil ????
       -- -------------------------------------------------------------------
       Function RMC_GetCIM10_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                               Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                               Niveau     In    Varchar2                      Default Null,
                               RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp)
                             Return Number;
       -- -------------------------------------------------------------------
       -- Procedure   : RMC_GetCIM10FromCode
       -- -------------------------------------------------------------------
       Procedure RMC_GetCIM10FromCode_txt ( CODECIM10   In    Varchar2,
                                        RefThe      Out   RMC_THE_Pubres.RMC_THECurTyp,
                                        Ret         Out   number);
       -- -------------------------------------------------------------------
       -- Fonction   : RMC_GetCIM10FromCode
       -- Objet      : Recherche des lignes de THE dont le CAF répond au
       --              critère de recherche CODECIM10.
       --              Interrogation directe sur la table THE sans utilisation
       --              de mots clés
       -- -------------------------------------------------------------------
       Function RMC_GetCIM10FromCode_txt ( CODECIM10   In    Varchar2,
                                       RefThe      Out   RMC_THE_Pubres.RMC_THECurTyp)
                                     Return Number;
       -- --------------------------------------------------------------------
       -- Fonction   : RMC_GetCIM10Info
       -- Objet      : Fonction qui prend une chaîne de caractères en entrée
       --              et qui retourne la même chaîne sans les caractères non
       --              alphanumériques + la concaténation de '.htm'
       -- --------------------------------------------------------------------
       Function RMC_GetCIM10Info_txt ( ChaineIn    In    Varchar2,
                                   ChaineOut   Out   Varchar2 )
                                 Return Number;



	   TTyp_Cst  Rmc_The_Pubres.TabType_Cst;
   ch1     Varchar2(255) := 'éêèëàäâïîöôüûùÿÉÈÊËÀÄÂÏÎÖÔÜÛÙ';
   ch2     Varchar2(255) := 'eeeeaaaiioouuuyEEEEAAAIIOOUUUY';
-- ====================================================================
-- Fin de package
-- ====================================================================
END AVIDAL_RMC;
/

CREATE OR REPLACE PACKAGE BODY "AVIDAL_RMC"     AS
-- ============================================================================
-- Script      : AVIDAL_RMC    Type : Package Body
-- Objet       : Ressources Select tables
-- Owner       : VIDAL
-- Création    : 14/09/99 18:31:3
-- Auteur      : AGDF (2000) from Data to Information
-- Généré par  : Kercaps - AGDF_GEN_PAC Version : 2.02
-- Modifié par : Modification #1 - MR - 14/03/2001 :
--                               Modification de RMC_GETSPE afin que les
--                               relations de profil Labo -> Spé ou IAM -> Spé
--                               correspondent à un sens positif (Fils).
--                               Et de RMC_GetIamClass => Recherche P père
--                               pour les spécialités
--             : Modification #2 - MR - 14/03/2001 : Modif. RMC_GetIamClass
--             : Modification #3 - MR - 20/03/2001 : Ajout. RMC_GetCIM10Info
--             : Modification #4 - MR - 26/03/2001 : Ajout. RMC_GetHie_Pro_GINDIC
--                                                   Modif. RMC_GetCIM10
-- ============================================================================
  -- --------------------------------------------------------
  -- Variables du package
  -- --------------------------------------------------------
  MotEt         Varchar2(1) := '&';
  MotOu         Varchar2(1) := '|';
  MotSauf       Varchar2(1) := '#';
  MotParOpen    Varchar2(1) := '(';
  MotParClose   Varchar2(1) := ')';
  Home_Hie      Varchar2(60) := 'HIER_0';    -- Home hierarchique
  Home_Prf      Varchar2(60) := 'PROF_0';    -- Home profile
  Type_To       RMC_THE_Pubres.TYPE_IDE;
  -- -------------------------------------------------------------------------
  -- Fonction     : RMC_Get_Type
  -- Objet        : Obtenir l'identifiant type à partir de la constante de
  --                représentation
  -- --------------------------------------------------------------------------
  Function  RMC_Get_Type(Typ_Lib     in varchar2) Return Pls_Integer Is
       I pls_Integer;
  Begin
       I := Avidal_RMC.TTyp_Cst.First;
           While I <= Avidal_RMC.TTyp_Cst.Last And Avidal_RMC.TTyp_Cst(I) <> RMC_Get_Type.Typ_Lib
           Loop
           I := I + 1;
           End Loop;
       If I > Avidal_RMC.TTyp_Cst.Last Then
               Return 0;
           Else
               Return I;
           End if;
  End RMC_Get_Type;
  -- --------------------------------------------------------------------------
  -- Fonction     : RMC_GetHie_Pro
  -- Objet        : Recherche par hiérarchie ou profil ascendant ou descendant
  --                en tenant compte de l'origine des Thesaurus recherchés
  -- Param In     : Thesaurus de départ
  --                Indicateur hiérarchie - Profil
  --                Type de l'information de depart
  --                Type de l'information d'arrivée
  -- Param Out    : Jeu d'enregistrement
  --                Code retour
  -- Historique
  -- Creation     : 20/12/2000
  -- Auteur       : AgdF (from Data to Information)
  -- --------------------------------------------------------------------------
  Function RMC_GetHie_Pro ( The_Ide     In    RMC_THE_Pubres.THE_IDE,
                            Ind_H_P     In    Varchar2,
                            Type_From   In    RMC_THE_Pubres.Type_Ide,
                            Type_To     In    RMC_THE_Pubres.Type_Ide,
                            RefThe      Out   RMC_THE_Pubres.RRMC_THECurTyp)
                          Return Number Is
  Begin
        -------------------------------------------------------------
        --Statistiques sur la procedure - rempli la table Marqueurs
        --le 25/05/2004
        -------------------------------------------------------------
        -- Update Marqueurs SET
        --          Compteur = Compteur + 1
        --          where upper(proc_name) Like UPPER('%RMC_GetHie_Pro%');
        -- COMMIT;
       -- ----------------------------------------------------
       --
           --              A c c e s   p a r   P r o f i l
       --
       -- ----------------------------------------------------
       If RMC_GetHie_Pro.Ind_H_P = 'P' Then
              -- -----------------------------------------------
                  --  Acces aux parents profil, Le type est négatif
              -- -----------------------------------------------
          If RMC_GetHie_Pro.Type_From < 0 Then
                     Open RMC_GetHie_Pro.RefTHE For
                     Select c.THE_IDE, c.TYPE_IDE, c.THE_CAF, c.THE_LAF, c.ID
                       From RMC_THE a, RMC_THE_PRO b, RMC_THE c
                      Where a.THE_IDE      = RMC_GetHie_Pro.The_Ide
                                And a.TYPE_IDE     = Abs(RMC_GetHie_Pro.Type_From)
                                And b.THE_THE_IDE  = a.THE_IDE
                                And c.THE_IDE      = b.THE_IDE
                                And c.TYPE_IDE     = RMC_GetHie_Pro.Type_To;
              -- -----------------------------------------------
                  Elsif RMC_GetHie_Pro.Type_From > 0 Then
              -- -----------------------------------------------
                  --  Acces aux fils profil, Le type est positif
              -- -----------------------------------------------
                     Open RMC_GetHie_Pro.RefTHE For
                     Select c.THE_IDE, c.TYPE_IDE, c.THE_CAF, c.THE_LAF, c.ID
                       From RMC_THE a, RMC_THE_PRO b, RMC_THE c
                      Where a.THE_IDE      = RMC_GetHie_Pro.The_Ide
                                And a.TYPE_IDE     = Abs(RMC_GetHie_Pro.Type_From)
                                And b.THE_IDE      = a.THE_IDE
                                And c.THE_IDE      = b.THE_THE_IDE
                                And c.TYPE_IDE     = RMC_GetHie_Pro.Type_To;
                  Else
              -- -----------------------------------------------
                  --  Selection Vide
              -- -----------------------------------------------
                     Open RMC_GetHie_Pro.RefTHE For
                     Select c.THE_IDE, c.TYPE_IDE, c.THE_CAF, c.THE_LAF, c.ID
                       From RMC_THE c
                          Where 1 = 2;
          End if;
              -- -----------------------------------------------
       -- ----------------------------------------------------
           --
           --        A c c e s   p a r    H i e r a r c h i e
           --
       -- ----------------------------------------------------
       Else
              -- -----------------------------------------------
                  --  Acces aux parents hiérarchiques, Le type est négatif
              -- -----------------------------------------------
          If RMC_GetHie_Pro.Type_From < 0 Then
                     Open RMC_GetHie_Pro.RefTHE For
                     Select c.THE_IDE, c.TYPE_IDE, c.THE_CAF, c.THE_LAF, c.ID
                       From RMC_THE a, RMC_THE_HIE b, RMC_THE c
                      Where a.THE_IDE  = RMC_GetHie_Pro.The_Ide
                                And a.TYPE_IDE = Abs(RMC_GetHie_Pro.Type_From)
                                And b.THE_THE_IDE  = a.THE_IDE
                                And c.THE_IDE      = b.THE_IDE
                                And c.TYPE_IDE = RMC_GetHie_Pro.Type_To;
              -- -----------------------------------------------
                  Elsif RMC_GetHie_Pro.Type_From > 0 Then
              -- -----------------------------------------------
                  --  Acces aux fils hierarchique, Le type est positif
              -- -----------------------------------------------
                     Open RMC_GetHie_Pro.RefTHE For
                     Select c.THE_IDE, c.TYPE_IDE, c.THE_CAF, c.THE_LAF, c.ID
                       From RMC_THE a, RMC_THE_HIE b, RMC_THE c
                      Where a.THE_IDE      = RMC_GetHie_Pro.The_Ide
                                And a.TYPE_IDE     = Abs(RMC_GetHie_Pro.Type_From)
                                And b.THE_IDE      = a.THE_IDE
                                And c.THE_IDE      = b.THE_THE_IDE
                                And c.TYPE_IDE     = RMC_GetHie_Pro.Type_To;
                  Else
              -- -----------------------------------------------
                  --  Selection Vide
              -- -----------------------------------------------
                     Open RMC_GetHie_Pro.RefTHE For
                     Select c.THE_IDE, c.TYPE_IDE, c.THE_CAF, c.THE_LAF, c.ID
                       From RMC_THE c
                          Where 1 = 2;
          End if;
              -- -----------------------------------------------
           End if;
       Return (1);
  Exception
       When Others Then
           Return (sqlCode);
  End RMC_GetHie_Pro;
  -- --------------------------------------------------------------------------
  -- Fonction     : RMC_GetHie_Pro_GINDIC
  -- Objet        : Recherche des fils profil en partant d'un Groupe d'Indications
  --                vers un CIM10
  -- Param In     : Thesaurus de départ
  --              : Niveau de recherche
  -- Param Out    : Jeu d'enregistrement
  --              : Code retour
  -- Historique
  -- Creation     : 26/03/2001
  -- Auteur       : Manuel Rouault - K2/Pixelpark.
  -- --------------------------------------------------------------------------
  Function RMC_GetHie_Pro_GINDIC ( The_Ide     In    RMC_THE_Pubres.THE_IDE,
                                   Niveau      In    Varchar2,
                                   RefThe      Out   RMC_THE_Pubres.RRMC_THECurTyp)
                                 Return Number
  Is
  Begin
    -------------------------------------------------------------
    --Statistiques sur la procedure - rempli la table Marqueurs
    --le 25/05/2004
    -------------------------------------------------------------
    --Update Marqueurs SET
    --         Compteur = Compteur + 1
    --         where upper(proc_name) Like UPPER('%RMC_GetHie_Pro_GINDIC%');
    --COMMIT;
    If ( RMC_GetHie_Pro_GINDIC.Niveau  = 'O' ) Then
      Open RMC_GetHie_Pro_GINDIC.RefTHE For
        Select c.THE_IDE, c.TYPE_IDE, c.THE_CAF, c.THE_LAF, c.ID
        From   RMC_THE a, RMC_THE_PRO b, RMC_THE c
        Where  a.THE_IDE      = RMC_GetHie_Pro_GINDIC.The_Ide
          And  a.TYPE_IDE     = 5
          And  b.THE_IDE      = a.THE_IDE
          And  c.THE_IDE      = b.THE_THE_IDE
          And  c.TYPE_IDE     = 8
          And  b.Niveau in (0,1);
    Else
      Open RMC_GetHie_Pro_GINDIC.RefTHE For
        Select c.THE_IDE, c.TYPE_IDE, c.THE_CAF, c.THE_LAF, c.ID
        From   RMC_THE a, RMC_THE_PRO b, RMC_THE c
        Where  a.THE_IDE      = RMC_GetHie_Pro_GINDIC.The_Ide
          And  a.TYPE_IDE     = 5
          And  b.THE_IDE      = a.THE_IDE
          And  c.THE_IDE      = b.THE_THE_IDE
          And  c.TYPE_IDE     = 8
          And  b.Niveau       = 1;
    End If;
    Return (1);
    Exception
      When Others Then
        Return (sqlCode);
  End RMC_GetHie_Pro_GINDIC;

  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : RMC_GetProfilParent
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           Procedure RMC_GetProfilParent_id ( THE_IDE              In  RMC_THE_Pubres.THE_IDE,
                                                                           RefTHE               Out RMC_THE_Pubres.RMC_THECurTyp,
                                                                           Ret                  Out     Number)
           Is
           Begin
                        Ret := RMC_GetProfilParent_id ( THE_IDE, RefTHE);
           End RMC_GetProfilParent_id;
           Function RMC_GetProfilParent_id ( THE_IDE               In  RMC_THE_Pubres.THE_IDE,
                                                                          RefTHE                Out RMC_THE_Pubres.RMC_THECurTyp)
                                Return Number Is
           Begin
                Open RMC_GetProfilParent_id.RefTHE For
                Select b.THE_IDE, b.TYPE_IDE, b.THE_CAF, b.THE_LAF, b.ID,
                           b.THE_VIS, b.DAT_MAJ, b.USR_MAJ, b.OBS_MAJ
                  From RMC_THE b, RMC_THE_PRO a
                Where  a.THE_IDE = RMC_GetProfilParent_id.THE_IDE
                  And  b.THE_IDE                   = a.THE_THE_IDE;

                -------------------------------------------------------------
                --Statistiques sur la procedure - rempli la table Marqueurs
                --le 25/05/2004
                -------------------------------------------------------------
                --         Update Marqueurs SET
                --                  Compteur = Compteur + 1
                --                  where upper(proc_name) Like UPPER('%RMC_GetProfilParent_id%');
                --         COMMIT;
                -------------------------------------------------------------

                Return 1;
                EXCEPTION
                When Others Then
                         Return SQLCODE;
           End RMC_GetProfilParent_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : RMC_GetProfilChild_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           Procedure RMC_GetProfilChild_id ( THE_IDE               In  RMC_THE_Pubres.THE_IDE,
                                                                           RefTHE               Out RMC_THE_Pubres.RMC_THECurTyp,
                                                                           Ret                  Out     Number)
           Is
           Begin
                        Ret := RMC_GetProfilChild_id ( THE_IDE, RefTHE);
           End RMC_GetProfilChild_id;
           Function RMC_GetProfilChild_id ( THE_IDE                In  RMC_THE_Pubres.THE_IDE,
                                                                          RefTHE                Out RMC_THE_Pubres.RMC_THECurTyp)
                                Return Number Is
           Begin
                Open RMC_GetProfilChild_id.RefTHE For
                Select b.THE_IDE, b.TYPE_IDE, b.THE_CAF, b.THE_LAF, b.ID,
                           b.THE_VIS, b.DAT_MAJ, b.USR_MAJ, b.OBS_MAJ
                  From RMC_THE b, RMC_THE_PRO a
                Where  a.THE_THE_IDE = RMC_GetProfilChild_id.THE_IDE
                  And  b.THE_IDE                   = a.THE_IDE;
                -------------------------------------------------------------
                --Statistiques sur la procedure - rempli la table Marqueurs
                --le 25/05/2004
                -------------------------------------------------------------
                --         Update Marqueurs SET
                --                  Compteur = Compteur + 1
                --                  where upper(proc_name) Like UPPER('%RMC_GetProfilChild_id%');
                --         COMMIT;
                -------------------------------------------------------------
                Return 1;
                EXCEPTION
                When Others Then
                         Return SQLCODE;
           End RMC_GetProfilChild_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : RMC_GetHierarchyParent_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           Procedure RMC_GetHierarchyParent_id ( THE_IDE           In  RMC_THE_Pubres.THE_IDE,
                                                                           RefTHE               Out RMC_THE_Pubres.RMC_THECurTyp,
                                                                           Ret                  Out     Number)
           Is
           Begin
                        Ret := RMC_GetHierarchyParent_id ( THE_IDE, RefTHE);
           End RMC_GetHierarchyParent_id;
           Function RMC_GetHierarchyParent_id ( THE_IDE            In  RMC_THE_Pubres.THE_IDE,
                                                                          RefTHE                Out RMC_THE_Pubres.RMC_THECurTyp)
                                Return Number Is
           Begin
                Open RMC_GetHierarchyParent_id.RefTHE For
                Select b.THE_IDE, b.TYPE_IDE, b.THE_CAF, b.THE_LAF, b.ID,
                           b.THE_VIS, b.DAT_MAJ, b.USR_MAJ, b.OBS_MAJ
                  From RMC_THE b, RMC_THE_HIE a
                Where  a.THE_IDE = RMC_GetHierarchyParent_id.THE_IDE
                  And  b.THE_IDE                   = a.THE_THE_IDE;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%RMC_GetHierarchyParent_id%');
--         COMMIT;
-------------------------------------------------------------

                Return 1;
                EXCEPTION
                When Others Then
                         Return SQLCODE;
           End RMC_GetHierarchyParent_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : RMC_GetHierarchyChild_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           Procedure RMC_GetHierarchyChild_id ( THE_IDE            In  RMC_THE_Pubres.THE_IDE,
                                                                           RefTHE               Out RMC_THE_Pubres.RMC_THECurTyp,
                                                                           Ret                  Out     Number)
           Is
           Begin
                        Ret := RMC_GetHierarchyChild_id ( THE_IDE, RefTHE);
           End RMC_GetHierarchyChild_id;
           Function RMC_GetHierarchyChild_id ( THE_IDE             In  RMC_THE_Pubres.THE_IDE,
                                                                          RefTHE                Out RMC_THE_Pubres.RMC_THECurTyp)
                                Return Number Is
           Begin
                Open RMC_GetHierarchyChild_id.RefTHE For
                Select b.THE_IDE, b.TYPE_IDE, b.THE_CAF, b.THE_LAF, b.ID,
                           b.THE_VIS, b.DAT_MAJ, b.USR_MAJ, b.OBS_MAJ
                  From RMC_THE b, RMC_THE_HIE a
                Where  a.THE_THE_IDE = RMC_GetHierarchyChild_id.THE_IDE
                  And  b.THE_IDE                   = a.THE_IDE;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%RMC_GetHierarchyChild_id%');
--         COMMIT;
-------------------------------------------------------------

                Return 1;
                EXCEPTION
                When Others Then
                         Return SQLCODE;
           End RMC_GetHierarchyChild_id;
  -- ---------------------------------------------------------------
  -- Procédure  : RMC_IsProfilChild_id
  -- --------------------------------------------------------------
           Procedure RMC_IsProfilChild_id ( THE_IDE                In  RMC_THE_Pubres.THE_IDE,
                                                                         THE_IDE_PER    In  RMC_THE_Pubres.THE_IDE,
                                                                         Ret                    Out     Boolean)
           Is
           --
           Cursor C_Cur
           Is
           Select RMC_THE_PRO.THE_IDE
             From RMC_THE_PRO
            Where RMC_THE_PRO.THE_THE_IDE = RMC_IsProfilChild_id.THE_IDE_PER
                  And RMC_THE_PRO.THE_IDE = RMC_IsProfilChild_id.THE_IDE;
           --
           R_Cur  C_Cur%Rowtype;
           --
           Begin
                        -------------------------------------------------------------
                        --Statistiques sur la procedure - rempli la table Marqueurs
                        --le 25/05/2004
                        -------------------------------------------------------------
                        --         Update Marqueurs SET
                        --                 Compteur = Compteur + 1
                        --                  where upper(proc_name) Like UPPER('%RMC_IsProfilChild_id%');
                        --         COMMIT;
                        -------------------------------------------------------------
                        Open  C_Cur;
                        Fetch C_Cur Into R_Cur;
                        If C_Cur%NotFound Then
                           Ret := FALSE;
                        Else
                           Ret := TRUE;
                        End If;
                        Close C_Cur;
           End RMC_IsProfilChild_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : RMC_IsProfilParent_id
  -- --------------------------------------------------------------
           Procedure RMC_IsProfilParent_id ( THE_IDE               In  RMC_THE_Pubres.THE_IDE,
                                                                         THE_IDE_FIS    In  RMC_THE_Pubres.THE_IDE,
                                                                         Ret                    Out     Boolean)
           Is
           --
           Cursor C_Cur
           Is
           Select RMC_THE_PRO.THE_IDE
             From RMC_THE_PRO
            Where RMC_THE_PRO.THE_THE_IDE = RMC_IsProfilParent_id.THE_IDE
                  And RMC_THE_PRO.THE_IDE = RMC_IsProfilParent_id.THE_IDE_FIS;
           --
           R_Cur  C_Cur%Rowtype;
           --
           Begin
                        -------------------------------------------------------------
                        --Statistiques sur la procedure - rempli la table Marqueurs
                        --le 25/05/2004
                        -------------------------------------------------------------
                        --         Update Marqueurs SET
                        --                  Compteur = Compteur + 1
                        --                  where upper(proc_name) Like UPPER('%RMC_IsProfilParent_id%');
                        --         COMMIT;
                        -------------------------------------------------------------
                        Open  C_Cur;
                        Fetch C_Cur Into R_Cur;
                        If C_Cur%NotFound Then
                           Ret := FALSE;
                        Else
                           Ret := TRUE;
                        End If;
                        Close C_Cur;
           End RMC_IsProfilParent_id;
  -- ---------------------------------------------------------------
  -- Procédure  : RMC_IsHierarchyChild_id
  -- --------------------------------------------------------------
           Procedure RMC_IsHierarchyChild_id ( THE_IDE             In  RMC_THE_Pubres.THE_IDE,
                                                                         THE_IDE_PER    In  RMC_THE_Pubres.THE_IDE,
                                                                         Ret                    Out     Boolean)
           Is
           --
           Cursor C_Cur
           Is
           Select RMC_THE_HIE.THE_IDE
             From RMC_THE_HIE
            Where RMC_THE_HIE.THE_THE_IDE = RMC_IsHierarchyChild_id.THE_IDE_PER
                  And RMC_THE_HIE.THE_IDE = RMC_IsHierarchyChild_id.THE_IDE;
           --
           R_Cur  C_Cur%Rowtype;
           --
           Begin
                        -------------------------------------------------------------
                        --Statistiques sur la procedure - rempli la table Marqueurs
                        --le 25/05/2004
                        -------------------------------------------------------------
                        --         Update Marqueurs SET
                        --                  Compteur = Compteur + 1
                        --                  where upper(proc_name) Like UPPER('%RMC_IsHierarchyChild_id%');
                        --         COMMIT;
                        -------------------------------------------------------------

                        Open  C_Cur;
                        Fetch C_Cur Into R_Cur;
                        If C_Cur%NotFound Then
                           Ret := FALSE;
                        Else
                           Ret := TRUE;
                        End If;
                        Close C_Cur;
           End RMC_IsHierarchyChild_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : RMC_IsHierarchyParent_id
  -- --------------------------------------------------------------
           Procedure RMC_IsHierarchyParent_id ( THE_IDE            In  RMC_THE_Pubres.THE_IDE,
                                                                         THE_IDE_FIS    In  RMC_THE_Pubres.THE_IDE,
                                                                         Ret                    Out     Boolean)
           Is
           --
           Cursor C_Cur
           Is
           Select RMC_THE_HIE.THE_IDE
             From RMC_THE_HIE
            Where RMC_THE_HIE.THE_THE_IDE = RMC_IsHierarchyParent_id.THE_IDE
                  And RMC_THE_HIE.THE_IDE = RMC_IsHierarchyParent_id.THE_IDE_FIS;
           --
           R_Cur  C_Cur%Rowtype;
           --
           Begin

                        -------------------------------------------------------------
                        --Statistiques sur la procedure - rempli la table Marqueurs
                        --le 25/05/2004
                        -------------------------------------------------------------
                        --         Update Marqueurs SET
                        --                  Compteur = Compteur + 1
                        --                  where upper(proc_name) Like UPPER('%RMC_IsHierarchyParent_id%');
                        --         COMMIT;
                        -------------------------------------------------------------

                        Open  C_Cur;
                        Fetch C_Cur Into R_Cur;
                        If C_Cur%NotFound Then
                           Ret := FALSE;
                        Else
                           Ret := TRUE;
                        End If;
                        Close C_Cur;
           End RMC_IsHierarchyParent_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : RMC_GetFromKeyWord_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
       Procedure RMC_GetFromKeyWord_txt( ORI_IDE       In     RMC_CLE_PubRes.ORI_IDE  Default Null,
                                                         TYPE_IDE          In     RMC_CLE_PubRes.TYPE_IDE Default '%',
                                                         CLE_LIB           In     RMC_CLE_PubRes.CLE_LIB  Default '%',
                                                                         RefLnkTHE     out RMC_CLE_PubRes.TheCurtyp,
                                                         Ret           Out    Number) Is
       Begin
           Ret := AVidal_RMC.RMC_GetFromKeyWord_txt(
                                RMC_GetFromKeyWord_txt.Ori_Ide, RMC_GetFromKeyWord_txt.Type_Ide,
                                                RMC_GetFromKeyWord_txt.Cle_Lib, RMC_GetFromKeyWord_txt.RefLnkThe);
           End RMC_GetFromKeyWord_txt;
       Function RMC_GetFromKeyWord_txt( ORI_IDE        In     RMC_CLE_PubRes.ORI_IDE  Default Null,
                                                        TYPE_IDE           In     RMC_CLE_PubRes.TYPE_IDE Default '%',
                                                        CLE_LIB        In         RMC_CLE_PubRes.CLE_LIB  Default '%',
                                                                        RefLnkTHE      Out RMC_CLE_PubRes.TheCurtyp)
                                                        Return  Number is
       Type  R_Mot  Is Record
           (  Cle_Mot   Varchar2(255),
              IFirst    Pls_Integer,
                  ILast     Pls_Integer
           );
       Type         Tab_Mot Is Table Of R_Mot         Index By Binary_Integer;
           Type         Tab_Req Is Table Of Varchar2(500) Index By Binary_Integer;
           T_Mot        Tab_Mot;
           T_Req        Tab_Req;
       Mot_Cle      Varchar2(255);
           Chaine_Epure Varchar2(255);
           Boo_Mot      Boolean;
           Boo_Jump     Boolean;
       Requete      varchar2(4000);
           I            Pls_Integer;
           Ind_Mot      Pls_Integer;
       Cpt          Pls_Integer;
       Begin

        -------------------------------------------------------------
        --Statistiques sur la procedure - rempli la table Marqueurs
        --le 25/05/2004
        -------------------------------------------------------------
        --         Update Marqueurs SET
        --                  Compteur = Compteur + 1
        --                  where upper(proc_name) Like UPPER('%RMC_GetFromKeyWord_txt%');
        --         COMMIT;
        -------------------------------------------------------------

             -- ---------------------------------------
             -- Cette partie de traitement elimine les
             -- caracteres & | et # se trouvant à l'exterieur
             -- des mots clés
             -- ---------------------------------------
         Chaine_Epure := rtrim(ltrim(RMC_GetFromKeyWord_txt.Cle_lib,MotEt),MotEt);
         Chaine_Epure := rtrim(ltrim(Chaine_Epure,MotOu),MotOu);
         Chaine_Epure := rtrim(ltrim(Chaine_Epure,MotSauf),MotSauf);
         Boo_Mot := False;
             Ind_Mot := 0;
             -- ---------------------------------------
             -- Compteur de parenthese
             -- Cette partie de traitement equilibre le nombre de
             -- parenthese droite et gauche
             -- ---------------------------------------
         Cpt := 0;
             For I In 1..Length(Chaine_Epure)
             Loop
            If Substr(Chaine_Epure,I,1) = '(' Then
                        Cpt := Cpt + 1;
                    End if;
            If Substr(Chaine_Epure,I,1) = ')' Then
                       Cpt := Cpt - 1;
                    End if;
         End Loop;
         If Cpt > 0 Then
                 Chaine_Epure := Rpad(Chaine_Epure,Length(Chaine_Epure) + Cpt, ')');
         Elsif Cpt < 0 Then
                 Chaine_Epure := Lpad(Chaine_Epure,Length(Chaine_Epure) + Abs(Cpt), '(');
         End if;
             -- ---------------------------------------
             -- Lecture lettre par lettre
             --  Constitution du tableau des mots
             -- ---------------------------------------
             For I In 1..Length(Chaine_Epure)
             Loop
            Boo_Jump := False;
            If Substr(Chaine_Epure,I,1) In (MotEt, MotOu, MotSauf, MotParOpen, MotParClose)
                    Then
                       Boo_Jump := True;
                       If Boo_Mot
               		   	  Then
                              T_Mot(Ind_Mot).Ilast  := I-1;
                  			  Boo_Mot := False;
               		   End if;
            End if;
            If Not Boo_Mot And Substr(Chaine_Epure,I,1) = ' ' Then
                       Boo_Jump := True;
            End if;
            If Not Boo_Jump
                    Then
               		If Not Boo_Mot
                       Then
                  	   	   Ind_Mot := Ind_Mot + 1;
                           T_Mot(Ind_Mot).Cle_Mot := Substr(Chaine_Epure,I,1);
                           T_Mot(Ind_Mot).IFirst  := I;
                  		   Boo_Mot := True;
               	    Else
                           T_Mot(Ind_Mot).Cle_Mot := T_Mot(Ind_Mot).Cle_Mot||Substr(Chaine_Epure,I,1);
                    End if;
             End if;
             End Loop;
         If Boo_Mot Then
                 T_Mot(Ind_Mot).Ilast  := Length(Chaine_Epure);
         End if;
         -- ---------------------------------------------------------
             -- Constitution des requetes.
             -- Tableau de requete pour chaque mot clé trouvé
         -- ---------------------------------------------------------
         For I in T_Mot.First..T_Mot.Last
             Loop
            -- Suppression des BLancs
            Mot_Cle := Upper(Ltrim(Rtrim(T_Mot(I).Cle_Mot)));
            -- Requete dans le tableau
           T_Req(I) :=    'Select Distinct c.Cle_ide From Rmc_Cle c '
                       || ' Where UPPER(TRANSLATE(c.CLE_LIB,'''|| Avidal_RMC.ch1||''','''|| Avidal_RMC.ch2||''')) Like upper(translate(Nvl('''||Mot_Cle||''',''%'')||''%'''
					 -- || ' Where c.CLE_LIB Like upper(translate(Nvl('''||Mot_Cle||''',''%'')||''%'''
                       || ',''' || AVIDAL_RMC.ch1 || ''', ''' || AVIDAL_RMC.ch2 || '''))'
                       || ' And c.TYPE_IDE = Nvl('||RMC_GetFromKeyWord_txt.TYPE_IDE||',c.TYPE_IDE) ';
         --            || ' And c.ORI_IDE = Nvl('||RMC_GetFromKeyWord_txt.ORI_IDE||',c.ORI_IDE) '
			 End Loop;
             -- ---------------------------------------------
             -- Constitution requete
             -- ---------------------------------------------
         Requete := 'Select /*+ ORDERED */ Distinct '
                              || 't.The_Ide, t.Type_ide, t.the_Caf, t.The_Laf, t.id '
                                          || ' From (';
         For I in T_Mot.First..T_Mot.Last
         Loop
            -- ---------------------
                -- Cas premier Mot
            -- ---------------------
            If I = T_Mot.First And T_Mot(I).Ifirst <> 1 Then
                        Requete := Requete || ' ' || Substr(Chaine_Epure,1,T_Mot(I).Ifirst-1);
            End if;
            -- ---------------------------------------
                -- Inserton requete dans chaine generale
            -- --------------------------------------
                    Requete := Requete || ' ' ||T_Req(I);
            -- ---------------------
                -- Inter mots
            -- ---------------------
            If I <> T_Mot.Last  Then
                        Mot_Cle := Substr(Chaine_Epure,T_Mot(I).Ilast+1,
                                                          T_Mot(I+1).Ifirst-T_Mot(I).Ilast-1);
                        Requete := Requete || Replace(Replace(Replace(Mot_Cle,MotEt,' Intersect '),
                                                                       MotOu,' Union '),
                                                                      Motsauf,' Minus ');
            End if;
            -- ----------------------------------------
                -- Cas dernier mot
            -- ----------------------------------------
            If I = T_Mot.Last And T_Mot(I).Ilast <> Length(Chaine_Epure) Then
                Requete := Requete || Substr(Chaine_Epure,T_Mot(I).Ilast+1);
            End if;
             End Loop;
                 -- --------------------------------------------------
                 --  Construction de la fin de la requete
                 -- --------------------------------------------------
             Requete := Requete ||') x, RMC_THE_CLE c, RMC_THE T '
                                ||'Where c.CLE_IDE = x.CLE_IDE And t.THE_IDE = c.THE_IDE ';
         If RMC_GetFromKeyWord_txt.TYPE_IDE is not null Then
                    Requete := Requete || ' And t.TYPE_IDE = '||RMC_GetFromKeyWord_txt.Type_Ide||' ';
         End if;
           -- --------------------------------------------------
           -- Cas particulier du groupe d'indication
           -- --------------------------------------------------
         If RMC_GetFromKeyWord_txt.TYPE_IDE  = 5  Then
           Requete :=  Requete
                      || ' union '
                      || ' select  Distinct a.The_Ide THE_IDE, a.Type_ide TYPE_IDE, a.the_Caf THE_CAF, '
                      || ' a.The_Laf THE_LAF, a.id ID '
					  --, 0 IDORGANISME, '''' FLAG ' Mod par ML le 02/01/2003
                      || ' from RMC_THE a, RMC_THE_PRO b, RMC_THE c, RMC_THE_CLE d ,(select CLE_IDE from RMC_CLE  '
                                                                                     || ' Where  TYPE_IDE       = 4 '
                                                                                     || ' And  UPPER(TRANSLATE(CLE_LIB,'''|| Avidal_RMC.ch1||''','''|| Avidal_RMC.ch2||''')) like upper(translate(''' || Mot_cle || '%'', '''
																					-- || ' And  UPPER(CLE_LIB) like upper(translate(''' || Mot_cle || '%'', '''
                                                                                     || AVIDAL_RMC.ch1 || ''', ''' || AVIDAL_RMC.ch2 || '''))) e'
                      || ' Where  a.TYPE_IDE       = 5 '
                      || ' And  b.THE_IDE        = a.THE_IDE '
                      || ' And  c.THE_IDE        = b.THE_THE_IDE '
                      || ' And  c.TYPE_IDE       = 4 '
                      || ' And  c.THE_IDE        = d.THE_IDE '
                      || ' And  d.CLE_IDE        = e.CLE_IDE '
                      || ' Order by 4' ;

         end if;
         -- ----------------------------------------------
             -- Clause Order ... en instance
         -- ----------------------------------------------
--       If P_Sel_Dyn.Att_Ide is null Then
--              Requete := Requete || 'And Rownum <= '||The_Res.max_Enr ||' Order By 2';
--                  INSERT INTO REQ VALUES (REQUETE);
--       Else
--             Requete := Requete || 'And Rownum <= '||The_Res.max_Enr ||' Order By 6';
--                 INSERT INTO REQ VALUES (REQUETE);
--           End if;
         -- ----------------------------------------------
             -- Ouverture curseur
         -- ----------------------------------------------
         Open RMC_GetFromKeyWord_txt.RefLnkthe For Requete;
         Return(1);
  Exception
        When Others Then
          Return(sqlcode);
  End RMC_GetFromKeyWord_txt;
  -- -------------------------------------------------------------------
  -- Fonction   : RMC_GetSpe_id
  -- Objet      : Recherche des spécifications à partir (au choix)
  --              . D'un code CIP        : recherche hiérachique pere
  --              . D'une substance      : Recherche profil pere
  --              . D'une indication     : Recherche profil fils
  --              . D'une contre indic.  : Recherche profil fils
  --              . D'une classe thera.  : Recherche profil fils
  --              . D'une classe IAM     : Recherche profil père
  --              . D'un labo            : Recherche profil père
  --             : Modification #1
  --              . D'un labo            : Recherche profil fils
  --              . D'une classe IAM     : Recherche profil fils
  -- -------------------------------------------------------------------
  -- -------------------------------------------------------------------
Function RMC_GetSpe_id (The_Ide            In     RMC_THE_Pubres.THE_IDE,
                       Type_Ide     In     RMC_THE_Pubres.TYPE_IDE,
                                           RefThe               Out RMC_THE_Pubres.RRMC_THECurTyp)
                                           Return Number Is
  Begin

      -------------------------------------------------------------
      --Statistiques sur la procedure - rempli la table Marqueurs
      --le 25/05/2004
      -------------------------------------------------------------
      --         Update Marqueurs SET
      --                  Compteur = Compteur + 1
      --                  where upper(proc_name) Like UPPER('%RMC_GetSpe_id%');
      --        COMMIT;
       -- ---------------------------------------------
           -- Recuperation code spécialité
       -- ---------------------------------------------
       Type_To := RMC_Get_Type('SPE');
       -- ---------------------------------------------
           -- Test des types attendues
       -- ---------------------------------------------
       If     Avidal_RMC.TTyp_Cst(Abs(RMC_GetSpe_id.Type_Ide))  = 'CIP' Then
          -- -------------------------------------------------
                  -- Recherche hiérarchique père pour les CIP
                  -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetSpe_id.The_Ide,'H',Abs(RMC_GetSpe_id.Type_Ide)*-1,Type_To,
                                        RMC_GetSpe_id.RefThe));
           Elsif  Avidal_RMC.TTyp_Cst(Abs(RMC_GetSpe_id.Type_Ide)) In ('INDIC','CINDIC','THERA','LABO','IAM') Then
          -- --------------------------------------------------------------
          -- Recherche profil Fils pour les les indications,
          -- les contre indications, les classes thera,
          -- Modifié le 13/03/2001 : MR - plus les labos et les Classes IAM
          -- --------------------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetSpe_id.The_Ide,'P',Abs(RMC_GetSpe_id.Type_Ide),Type_To,
                                        RMC_GetSpe_id.RefThe));
           Elsif  Avidal_RMC.TTyp_Cst(Abs(RMC_GetSpe_id.Type_Ide)) = 'SUB' Then
          -- -----------------------------------------------------
          -- Recherche profil père pour les substances
          -- Modifié le 13/03/2001 : MR - seulement les substances
          --                           ( retrait des LABO et IAM )
          -- -----------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetSpe_id.The_Ide,'P',Abs(RMC_GetSpe_id.Type_Ide)*-1,Type_To,
                                        RMC_GetSpe_id.RefThe));
           Else
          -- -------------------------------------------------
                  -- Retour vide sur type non attendue
          -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetSpe_id.The_Ide,'P',0,Type_To, RMC_GetSpe_id.RefThe));
           End if;
  Exception
       When No_Data_Found Then
           -- -------------------------------------------------
                   -- Retour vide sur type non Initialisée
           -- -------------------------------------------------
           Begin
              Return(RMC_GetHie_Pro(RMC_GetSpe_id.The_Ide,'P',0,Type_To, RMC_GetSpe_id.RefThe));
           Exception
                     When Others Then
                      Return SqlCode;
                   End;
           When Others Then
               Return SqlCode;
End RMC_GetSpe_id;
Procedure RMC_GetSpe_id (The_Ide           In     RMC_THE_Pubres.THE_IDE,
                       Type_Ide     In     RMC_THE_Pubres.TYPE_IDE,
                                   RefThe               Out RMC_THE_Pubres.RRMC_THECurTyp,
                                           Ret         Out number) Is
 Begin
       RMC_GetSpe_id.Ret := AVidal_RMC.RMC_GetSpe_id(RMC_GetSpe_id.The_Ide, RMC_GetSpe_id.Type_Ide, RMC_GetSpe_id.RefThe);
End RMC_GetSpe_id ;
  -- -------------------------------------------------------------------
  -- Fonction   : RMC_GetCIP_id
  -- Objet      : Recherche des CIP à partir
  --              . D'un code specification  : recherche hiérachique fils
  -- -------------------------------------------------------------------
Procedure RMC_GetCIP_id (The_Ide           In     RMC_THE_Pubres.THE_IDE,
                       Type_Ide     In     RMC_THE_Pubres.TYPE_IDE,
                                   RefThe               Out RMC_THE_Pubres.RRMC_THECurTyp,
                                           Ret         Out number) Is
 Begin
       RMC_GetCIP_id.Ret := AVidal_RMC.RMC_GetCIP_id(RMC_GetCIP_id.The_Ide, RMC_GetCIP_id.Type_Ide, RMC_GetCIP_id.RefThe);
End RMC_GetCIP_id ;
Function RMC_GetCIP_id (The_Ide            In     RMC_THE_Pubres.THE_IDE,
                       Type_Ide     In     RMC_THE_Pubres.TYPE_IDE,
                                           RefThe               Out RMC_THE_Pubres.RRMC_THECurTyp)
                                           Return Number Is
  Begin

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%RMC_GetCIP_id%');
--         COMMIT;
-------------------------------------------------------------


       -- ---------------------------------------------
           -- Recuperation code CIP
       -- ---------------------------------------------
       Type_To := RMC_Get_Type('CIP');
       -- ---------------------------------------------
           -- Test des types attendues
       -- ---------------------------------------------
       If     Avidal_RMC.TTyp_Cst(Abs(RMC_GetCIP_id.Type_Ide))  = 'SPE' Then
          -- -------------------------------------------------
                  -- Recherche hiérarchique fils pour les spécialites
                  -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetCIP_id.The_Ide,'H',Abs(RMC_GetCIP_id.Type_Ide),Type_To,
                                        RMC_GetCIP_id.RefThe));
           Else
          -- -------------------------------------------------
                  -- Retour vide sur type non attendue
          -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetCIP_id.The_Ide,'H',0,Type_To, RMC_GetCIP_id.RefThe));
           End if;
  Exception
       When No_Data_Found Then
           -- -------------------------------------------------
                   -- Retour vide sur type non Initialisée
           -- -------------------------------------------------
           Begin
              Return(RMC_GetHie_Pro(RMC_GetCIP_id.The_Ide,'H',0,Type_To, RMC_GetCIP_id.RefThe));
           Exception
                     When Others Then
                      Return SqlCode;
                   End;
           When Others Then
               Return SqlCode;
End RMC_GetCIP_id;
  -- -------------------------------------------------------------------
  -- Fonction   : RMC_GetSubst_id
  -- Objet      : Recherche des substances à partir
  --              . D'une substance  : recherche hiérachique pere et fils
  --              . D'une specialité : Recherche profil fils
  -- -------------------------------------------------------------------
Procedure RMC_GetSubst_id (The_Ide         In     RMC_THE_Pubres.THE_IDE,
                         Type_Ide     In     RMC_THE_Pubres.TYPE_IDE,
                                     RefThe             Out RMC_THE_Pubres.RRMC_THECurTyp,
                                             Ret         Out number) Is
 Begin
       RMC_GetSubst_id.Ret := AVidal_RMC.RMC_GetSubst_id(RMC_GetSubst_id.The_Ide,
                                                       RMC_GetSubst_id.Type_Ide, RMC_GetSubst_id.RefThe);
End RMC_GetSubst_id;
Function RMC_GetSubst_id (The_Ide          In     RMC_THE_Pubres.THE_IDE,
                         Type_Ide     In     RMC_THE_Pubres.TYPE_IDE,
                                             RefThe             Out RMC_THE_Pubres.RRMC_THECurTyp)
                                             Return Number Is
  Begin

        -------------------------------------------------------------
        --Statistiques sur la procedure - rempli la table Marqueurs
        --le 25/05/2004
        -------------------------------------------------------------
        --Update Marqueurs SET
        --  Compteur = Compteur + 1
        --  where upper(proc_name) Like UPPER('%RMC_GetSubst_id%');
        --COMMIT;
       -- ---------------------------------------------
           -- Recuperation code Substance
       -- ---------------------------------------------
       Type_To := RMC_Get_Type('SUB');
       -- ---------------------------------------------
           -- Test des types attendues
       -- ---------------------------------------------
       If     Avidal_RMC.TTyp_Cst(Abs(RMC_GetSubst_id.Type_Ide))  = 'SUB' Then
          -- -------------------------------------------------
                  -- Recherche hiérarchique per ou fils pour les substances
                  -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetSubst_id.The_Ide,'H',RMC_GetSubst_id.Type_Ide,Type_To,
                                        RMC_GetSubst_id.RefThe));
       Elsif Avidal_RMC.TTyp_Cst(Abs(RMC_GetSubst_id.Type_Ide))  = 'SPE' Then
          -- -------------------------------------------------
                  -- Recherche profil fils pour les spécialités
                  -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetSubst_id.The_Ide,'P',Abs(RMC_GetSubst_id.Type_Ide),Type_To,
                                        RMC_GetSubst_id.RefThe));
           Else
          -- -------------------------------------------------
                  -- Retour vide sur type non attendue
          -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetSubst_id.The_Ide,'H',0,Type_To, RMC_GetSubst_id.RefThe));
           End if;
  Exception
       When No_Data_Found Then
           -- -------------------------------------------------
                   -- Retour vide sur type non Initialisée
           -- -------------------------------------------------
           Begin
              Return(RMC_GetHie_Pro(RMC_GetSubst_id.The_Ide,'H',0,Type_To, RMC_GetSubst_id.RefThe));
           Exception
                     When Others Then
                      Return SqlCode;
                   End;
           When Others Then
               Return SqlCode;
End RMC_GetSubst_id;
  -- -------------------------------------------------------------------
  -- Fonction   : RMC_Getindic_id
  -- Objet      : Recherche des indications à partir
  --              . D'une specialité : Recherche profil pere
  --              . D'un groupe d'indication GINDIC : Recherche profil fils
  -- -------------------------------------------------------------------
Procedure RMC_Getindic_id (The_Ide         In     RMC_THE_Pubres.THE_IDE,
                         Type_Ide     In     RMC_THE_Pubres.TYPE_IDE,
                                     RefThe             Out RMC_THE_Pubres.RRMC_THECurTyp,
                                             Ret         Out number) Is
 Begin
       RMC_Getindic_id.Ret := AVidal_RMC.RMC_Getindic_id(RMC_Getindic_id.The_Ide,
                                                       RMC_Getindic_id.Type_Ide, RMC_Getindic_id.RefThe);
End RMC_Getindic_id;
Function RMC_Getindic_id (The_Ide          In     RMC_THE_Pubres.THE_IDE,
                         Type_Ide     In     RMC_THE_Pubres.TYPE_IDE,
                                             RefThe             Out RMC_THE_Pubres.RRMC_THECurTyp)
                                             Return Number Is
  Begin
        -------------------------------------------------------------
        --Statistiques sur la procedure - rempli la table Marqueurs
        --le 25/05/2004
        -------------------------------------------------------------
        --         Update Marqueurs SET
        --                  Compteur = Compteur + 1
        --                  where upper(proc_name) Like UPPER('%RMC_Getindic_id%');
        --         COMMIT;
       -- ---------------------------------------------
           -- Recuperation code indication
       -- ---------------------------------------------
       Type_To := RMC_Get_Type('INDIC');
       -- ---------------------------------------------
           -- Test des types attendues
       -- ---------------------------------------------
       If     Avidal_RMC.TTyp_Cst(Abs(RMC_Getindic_id.Type_Ide)) = 'GINDIC' Then
          -- -------------------------------------------------
                  -- Recherche profil fils pour les les groupes d'indic
                  -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_Getindic_id.The_Ide,'P',Abs(RMC_Getindic_id.Type_Ide),Type_To,
                                        RMC_Getindic_id.RefThe));
       ElsIf  Avidal_RMC.TTyp_Cst(Abs(RMC_Getindic_id.Type_Ide)) = 'SPE' Then
          -- -------------------------------------------------
                  -- Recherche profil père pour les spécialités
                  -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_Getindic_id.The_Ide,'P',Abs(RMC_Getindic_id.Type_Ide)*-1,Type_To,
                                        RMC_Getindic_id.RefThe));
           Else
          -- -------------------------------------------------
                  -- Retour vide sur type non attendue
          -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_Getindic_id.The_Ide,'P',0,Type_To, RMC_Getindic_id.RefThe));
           End if;
  Exception
       When No_Data_Found Then
           -- -------------------------------------------------
                   -- Retour vide sur type non Initialisée
           -- -------------------------------------------------
           Begin
              Return(RMC_GetHie_Pro(RMC_Getindic_id.The_Ide,'P',0,Type_To, RMC_Getindic_id.RefThe));
           Exception
                     When Others Then
                      Return SqlCode;
                   End;
           When Others Then
               Return SqlCode;
End RMC_Getindic_id;
  -- -------------------------------------------------------------------
  -- Fonction   : RMC_GetGindic_id
  -- Objet      : Recherche des Groupes indications à partir
  --              . D'une indication : Recherche profil pere
  --              . D'un groupe d'indication : Recherche profil pere ou fils
  --              . D'un code CIM : Recherche profil pere
  -- -------------------------------------------------------------------
Procedure RMC_GetGindic_id (The_Ide                In     RMC_THE_Pubres.THE_IDE,
                         Type_Ide     In     RMC_THE_Pubres.TYPE_IDE,
                                     RefThe             Out RMC_THE_Pubres.RRMC_THECurTyp,
                                             Ret         Out number) Is
 Begin
       RMC_GetGindic_id.Ret := AVidal_RMC.RMC_GetGindic_id(RMC_GetGindic_id.The_Ide,
                                                        RMC_GetGindic_id.Type_Ide, RMC_GetGindic_id.RefThe);
End RMC_GetGindic_id;
Function RMC_GetGindic_id (The_Ide         In     RMC_THE_Pubres.THE_IDE,
                         Type_Ide     In     RMC_THE_Pubres.TYPE_IDE,
                                             RefThe             Out RMC_THE_Pubres.RRMC_THECurTyp)
                                             Return Number Is
  Begin

      -------------------------------------------------------------
      --Statistiques sur la procedure - rempli la table Marqueurs
      --le 25/05/2004
      -------------------------------------------------------------
      --         Update Marqueurs SET
      --                  Compteur = Compteur + 1
      --                  where upper(proc_name) Like UPPER('%RMC_GetGindic_id%');
      --         COMMIT;
      -------------------------------------------------------------


       -- ---------------------------------------------
           -- Recuperation code Groupe d'indication
       -- ---------------------------------------------
       Type_To := RMC_Get_Type('GINDIC');
       -- ---------------------------------------------
           -- Test des types attendues
       -- ---------------------------------------------
       If     Avidal_RMC.TTyp_Cst(Abs(RMC_GetGindic_id.Type_Ide))  = 'GINDIC'  Then
          -- -------------------------------------------------
                  -- Recherche profil pere ou fils pour les groupes d'indication
                  -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetGindic_id.The_Ide,'P',RMC_GetGindic_id.Type_Ide,Type_To,
                                        RMC_GetGindic_id.RefThe));
       Elsif   Avidal_RMC.TTyp_Cst(Abs(RMC_GetGindic_id.Type_Ide))  in ('INDIC','CIM')  Then
          -- -------------------------------------------------
                  -- Recherche profil pere pour les indications et les maladies
                  -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetGindic_id.The_Ide,'P',Abs(RMC_GetGindic_id.Type_Ide)*-1,Type_To,
                                        RMC_GetGindic_id.RefThe));
           Else
          -- -------------------------------------------------
                  -- Retour vide sur type non attendue
          -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetGindic_id.The_Ide,'P',0,Type_To, RMC_GetGindic_id.RefThe));
           End if;
  Exception
       When No_Data_Found Then
           -- -------------------------------------------------
                   -- Retour vide sur type non Initialisée
           -- -------------------------------------------------
           Begin
              Return(RMC_GetHie_Pro(RMC_GetGindic_id.The_Ide,'P',0,Type_To, RMC_GetGindic_id.RefThe));
           Exception
                     When Others Then
                      Return SqlCode;
                   End;
           When Others Then
               Return SqlCode;
End RMC_GetGindic_id;
  -- -------------------------------------------------------------------
  -- Fonction   : RMC_GetCindic_id
  -- Objet      : Recherche des contre indications à partir
  --              . D'une spécialité : Recherche profil pere
  --              . D'un code CIM : Recherche profil pere
  --              . Contre indication : Recherhe hierachique Pere/fils
  -- -------------------------------------------------------------------
Procedure RMC_GetCindic_id (The_Ide                In     RMC_THE_Pubres.THE_IDE,
                         Type_Ide     In     RMC_THE_Pubres.TYPE_IDE,
                                     RefThe             Out RMC_THE_Pubres.RRMC_THECurTyp,
                                             Ret         Out number) Is
 Begin
       RMC_GetCindic_id.Ret := AVidal_RMC.RMC_GetCindic_id(RMC_GetCindic_id.The_Ide,
                                                        RMC_GetCindic_id.Type_Ide, RMC_GetCindic_id.RefThe);
End RMC_GetCindic_id;
Function RMC_GetCindic_id (The_Ide         In     RMC_THE_Pubres.THE_IDE,
                          Type_Ide     In     RMC_THE_Pubres.TYPE_IDE,
                                              RefThe            Out RMC_THE_Pubres.RRMC_THECurTyp)
                                              Return Number Is
  Begin

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%RMC_GetCindic_id%');
--         COMMIT;
-------------------------------------------------------------


       -- ---------------------------------------------
           -- Recuperation code Contre indication
       -- ---------------------------------------------
       Type_To := RMC_Get_Type('CINDIC');
       -- ---------------------------------------------
           -- Test des types attendues
       -- ---------------------------------------------
       If     Avidal_RMC.TTyp_Cst(Abs(RMC_GetCindic_id.Type_Ide))  in ('SPE','CIM')  Then
          -- -------------------------------------------------
                  -- Recherche profil père pour les spécialités et
                  -- les codes CIM
                  -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetCindic_id.The_Ide,'P',Abs(RMC_GetCindic_id.Type_Ide)*-1,
                                        Type_To, RMC_GetCindic_id.RefThe));
       Elsif   Avidal_RMC.TTyp_Cst(Abs(RMC_GetCindic_id.Type_Ide))  = 'CINDIC'  Then
          -- -------------------------------------------------
                  -- Recherche profil ???? pour les codes CIM
                  -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetCindic_id.The_Ide,'H',RMC_GetCindic_id.Type_Ide,
                                        Type_To, RMC_GetCindic_id.RefThe));
           Else
          -- -------------------------------------------------
                  -- Retour vide sur type non attendue
          -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetCindic_id.The_Ide,'P',0,Type_To, RMC_GetCindic_id.RefThe));
           End if;
  Exception
       When No_Data_Found Then
           -- -------------------------------------------------
                   -- Retour vide sur type non Initialisée
           -- -------------------------------------------------
           Begin
              Return(RMC_GetHie_Pro(RMC_GetCindic_id.The_Ide,'P',0,Type_To, RMC_GetCindic_id.RefThe));
           Exception
                     When Others Then
                      Return SqlCode;
                   End;
           When Others Then
               Return SqlCode;
End RMC_GetCindic_id;
  -- -------------------------------------------------------------------
  -- Fonction   : RMC_GetThera_id
  -- Objet      : Recherche des classes therapeutiques à partir
  --              . D'une spécialité : Recherche profil fils
  --              . D'une classe therapeutique recherche hiérarchique pere et fils
  -- -------------------------------------------------------------------
Procedure RMC_GetThera_id (The_Ide         In     RMC_THE_Pubres.THE_IDE,
                         Type_Ide     In     RMC_THE_Pubres.TYPE_IDE,
                                     RefThe             Out RMC_THE_Pubres.RRMC_THECurTyp,
                                             Ret         Out number) Is
 Begin
       RMC_GetThera_id.Ret := AVidal_RMC.RMC_GetThera_id(RMC_GetThera_id.The_Ide,
                                                       RMC_GetThera_id.Type_Ide, RMC_GetThera_id.RefThe);
End RMC_GetThera_id;
Function RMC_GetThera_id (The_Ide          In     RMC_THE_Pubres.THE_IDE,
                         Type_Ide     In     RMC_THE_Pubres.TYPE_IDE,
                                             RefThe             Out RMC_THE_Pubres.RRMC_THECurTyp)
                                             Return Number Is
  Begin

      -------------------------------------------------------------
      --Statistiques sur la procedure - rempli la table Marqueurs
      --le 25/05/2004
      -------------------------------------------------------------
      --         Update Marqueurs SET
      --                  Compteur = Compteur + 1
      --                  where upper(proc_name) Like UPPER('%RMC_GetThera_id%');
      --         COMMIT;
      -------------------------------------------------------------


       -- ---------------------------------------------
           -- Recuperation code Classe Thera
       -- ---------------------------------------------
       Type_To := RMC_Get_Type('THERA');
       -- ---------------------------------------------
           -- Test des types attendues
       -- ---------------------------------------------
       If     Avidal_RMC.TTyp_Cst(Abs(RMC_GetThera_id.Type_Ide))  = 'SPE'  Then
          -- -------------------------------------------------
                  -- Recherche profil père pour les specialités
                  -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetThera_id.The_Ide,'P',Abs(RMC_GetThera_id.Type_Ide)*-1,
                                        Type_To, RMC_GetThera_id.RefThe));
       Elsif   Avidal_RMC.TTyp_Cst(Abs(RMC_GetThera_id.Type_Ide)) = 'THERA'  Then
          -- -------------------------------------------------
                  -- Recherche profil pere / fils pour les classes thera
                  -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetThera_id.The_Ide,'H',RMC_GetThera_id.Type_Ide,
                                        Type_To, RMC_GetThera_id.RefThe));
           Else
          -- -------------------------------------------------
                  -- Retour vide sur type non attendue
          -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetThera_id.The_Ide,'H',0,Type_To, RMC_GetThera_id.RefThe));
           End if;
  Exception
       When No_Data_Found Then
           -- -------------------------------------------------
                   -- Retour vide sur type non Initialisée
           -- -------------------------------------------------
           Begin
              Return(RMC_GetHie_Pro(RMC_GetThera_id.The_Ide,'P',0,Type_To, RMC_GetThera_id.RefThe));
           Exception
                     When Others Then
                      Return SqlCode;
                   End;
           When Others Then
               Return SqlCode;
End RMC_GetThera_id;
  -- -------------------------------------------------------------------
  -- Fonction   : RMC_GetIamClass_id
  -- Objet      : Recherche des classes d'interaction à partir
  --              . D'une spécialité : Recherche profil fils
  --              . D'une classe d'interaction
  --            : Modification #1 - MR 13/03/2001 : avant P fils
  --              . D'une spécialité : Recherche profil père
  -- -------------------------------------------------------------------
Procedure RMC_GetIamClass_id (The_Ide              In     RMC_THE_Pubres.THE_IDE,
                         Type_Ide     In     RMC_THE_Pubres.TYPE_IDE,
                                     RefThe             Out RMC_THE_Pubres.RRMC_THECurTyp,
                                             Ret         Out number) Is
 Begin
       RMC_GetIamClass_id.Ret := AVidal_RMC.Rmc_GetIamClass_id(RMC_GetIamClass_id.The_Ide,
                                                       RMC_GetIamClass_id.Type_Ide,
                                                                                                   RMC_GetIamClass_id.RefThe);
End RMC_GetIamClass_id;
Function RMC_GetIamClass_id (The_Ide               In     RMC_THE_Pubres.THE_IDE,
                            Type_Ide     In     RMC_THE_Pubres.TYPE_IDE,
                                                RefThe          Out RMC_THE_Pubres.RRMC_THECurTyp)
                                                Return Number Is
  Begin


        -------------------------------------------------------------
        --Statistiques sur la procedure - rempli la table Marqueurs
        --le 25/05/2004
        -------------------------------------------------------------
        --         Update Marqueurs SET
        --                  Compteur = Compteur + 1
        --                  where upper(proc_name) Like UPPER('%RMC_GetIamClass_id%');
        --         COMMIT;
        -------------------------------------------------------------


       -- ---------------------------------------------
           -- Recuperation code Interaction
       -- ---------------------------------------------
       Type_To := RMC_Get_Type('IAM');
       -- ---------------------------------------------
           -- Test des types attendues
       -- ---------------------------------------------
       If     Avidal_RMC.TTyp_Cst(Abs(RMC_GetIamClass_id.Type_Ide))  = 'SPE'  Then
       -- -------------------------------------------------
       -- Recherche profil père pour les specialités
       -- Modifié : 13/03/2001 : MR - Désormais on cherche les
       --                        profils père pour les spécialités
       --                        (<0)
       -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetIamClass_id.The_Ide,'P',Abs(RMC_GetIamClass_id.Type_Ide)*-1,
                                        Type_To, RMC_GetIamClass_id.RefThe));
       Elsif   Avidal_RMC.TTyp_Cst(Abs(RMC_GetIamClass_id.Type_Ide)) = 'IAM'  Then
          -- -------------------------------------------------
                  -- Recherche profil pere / fils pour les classes d'interaction
                  -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetIamClass_id.The_Ide,'P',RMC_GetIamClass_id.Type_Ide,
                                        Type_To, RMC_GetIamClass_id.RefThe));
           Else
          -- -------------------------------------------------
                  -- Retour vide sur type non attendue
          -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetIamClass_id.The_Ide,'P',0,Type_To, RMC_GetIamClass_id.RefThe));
           End if;
  Exception
       When No_Data_Found Then
           -- -------------------------------------------------
                   -- Retour vide sur type non Initialisée
           -- -------------------------------------------------
           Begin
              Return(RMC_GetHie_Pro(RMC_GetIamClass_id.The_Ide,'P',0,Type_To, RMC_GetIamClass_id.RefThe));
           Exception
                     When Others Then
                      Return SqlCode;
                   End;
           When Others Then
               Return SqlCode;
End RMC_GetIamClass_id;
  -- -------------------------------------------------------------------
  -- Fonction   : RMC_GetLabo_id
  -- Objet      : Recherche des labos à partir
  --              . D'une spécialité : Recherche profil fils
  -- -------------------------------------------------------------------
Procedure RMC_GetLabo_id (The_Ide          In     RMC_THE_Pubres.THE_IDE,
                        Type_Ide     In     RMC_THE_Pubres.TYPE_IDE,
                                    RefThe              Out RMC_THE_Pubres.RRMC_THECurTyp,
                                            Ret         Out number) Is
 Begin
       RMC_GetLabo_id.Ret := AVidal_RMC.RMC_GetLabo_id(RMC_GetLabo_id.The_Ide,
                                                     RMC_GetLabo_id.Type_Ide, RMC_GetLabo_id.RefThe);
End RMC_GetLabo_id;
Function RMC_GetLabo_id (The_Ide           In     RMC_THE_Pubres.THE_IDE,
                        Type_Ide     In     RMC_THE_Pubres.TYPE_IDE,
                                            RefThe               Out RMC_THE_Pubres.RRMC_THECurTyp)
                                            Return Number Is
  Begin
      -------------------------------------------------------------
      --Statistiques sur la procedure - rempli la table Marqueurs
      --le 25/05/2004
      -------------------------------------------------------------
      --         Update Marqueurs SET
      --                  Compteur = Compteur + 1
      --                  where upper(proc_name) Like UPPER('%RMC_GetLabo_id%');
      --        COMMIT;
       -- ---------------------------------------------
           -- Recuperation code labo
       -- ---------------------------------------------
       Type_To := RMC_Get_Type('LABO');
       -- ---------------------------------------------
           -- Test des types attendues
       -- ---------------------------------------------
       If     Avidal_RMC.TTyp_Cst(Abs(RMC_GetLabo_id.Type_Ide))  = 'SPE'  Then
          -- -------------------------------------------------
                  -- Recherche profil fils pour les specialités
                  -- -------------------------------------------------
--         Return(RMC_GetHie_Pro(RMC_GetLabo_id.The_Ide,'P',Abs(RMC_GetLabo_id.Type_Ide),
          Return(RMC_GetHie_Pro(RMC_GetLabo_id.The_Ide,'P',Abs(RMC_GetLabo_id.Type_Ide)*-1,
                                        Type_To, RMC_GetLabo_id.RefThe));
           Else
          -- -------------------------------------------------
                  -- Retour vide sur type non attendue
          -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetLabo_id.The_Ide,'P',0,Type_To, RMC_GetLabo_id.RefThe));
           End if;
  Exception
       When No_Data_Found Then
           -- -------------------------------------------------
                   -- Retour vide sur type non Initialisée
           -- -------------------------------------------------
           Begin
              Return(RMC_GetHie_Pro(RMC_GetLabo_id.The_Ide,'P',0,Type_To, RMC_GetLabo_id.RefThe));
           Exception
                     When Others Then
                      Return SqlCode;
                   End;
           When Others Then
               Return SqlCode;
End RMC_GetLabo_id;
  -- -------------------------------------------------------------------------
  -- Fonction    : RMC_GetCIM10_id
  -- Objet       : Recherche des codes CIM à partir
  --               . D'un groupe d'indication : Recherche Profil fils
  --               . D'une contre indication : Recherche Profil fils
  --               . D'un code CIM : Recherche Hiérarchique père/fils
  -- Modifié par : Manuel Rouault - 26/03/2001 : Dans le cas d'un GINDIC,
  --                 prise en compte du nouveau champ NIVEAU dans RMC_THE_PRO
  --                 => Appel à RMC_GetHie_Pro_GINDIC
  --                 => Ajout d'un paramètre NIVEAU
  -- -------------------------------------------------------------------------
  Procedure RMC_GetCIM10_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                           Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                           Niveau     In    Varchar2,
                           RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp,
                           Ret        Out number)
  Is
  Begin
        RMC_GetCIM10_id.Ret := AVidal_RMC.RMC_GetCIM10_id(RMC_GetCIM10_id.The_Ide, RMC_GetCIM10_id.Type_Ide, Niveau, RMC_GetCIM10_id.RefThe);
  End RMC_GetCIM10_id;
  Function RMC_GetCIM10_id ( The_Ide    In    RMC_THE_Pubres.THE_IDE,
                          Type_Ide   In    RMC_THE_Pubres.TYPE_IDE,
                          Niveau     In    Varchar2,
                          RefThe     Out   RMC_THE_Pubres.RRMC_THECurTyp)
                        Return Number Is
  Begin

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%RMC_GetCIM10_id%');
--         COMMIT;
-------------------------------------------------------------



       -- ---------------------------------------------
           -- Recuperation code labo
       -- ---------------------------------------------
       Type_To := RMC_Get_Type('CIM');
       -- ---------------------------------------------
           -- Test des types attendues
       -- ---------------------------------------------
     If     Avidal_RMC.TTyp_Cst(Abs(RMC_GetCIM10_id.Type_Ide)) = 'CINDIC' Then
      -- -------------------------------------------------
                  -- Recherche profil fils pour les contre indications
                  -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetCIM10_id.The_Ide,'P',Abs(RMC_GetCIM10_id.Type_Ide),
                                        Type_To, RMC_GetCIM10_id.RefThe));
     ElsIf  Avidal_RMC.TTyp_Cst(Abs(RMC_GetCIM10_id.Type_Ide)) = 'GINDIC' Then
      -- -------------------------------------------------
                  -- Recherche profil fils pour les groupes d'indications
                  -- Appel de RMC_GetHie_Pro_GINDIC
                  -- -------------------------------------------------
          Return(RMC_GetHie_Pro_GINDIC(RMC_GetCIM10_id.The_Ide, RMC_GetCIM10_id.Niveau, RMC_GetCIM10_id.RefThe));
     Elsif  Avidal_RMC.TTyp_Cst(Abs(RMC_GetCIM10_id.Type_Ide)) = 'CIM' Then
      -- -------------------------------------------------
                  -- Recherche hiérarchique père ou fils pour CIM
                  -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetCIM10_id.The_Ide,'H',RMC_GetCIM10_id.Type_Ide,
                                  Type_To, RMC_GetCIM10_id.RefThe));
     Else
      -- -------------------------------------------------
                  -- Retour vide sur type non attendue
      -- -------------------------------------------------
          Return(RMC_GetHie_Pro(RMC_GetCIM10_id.The_Ide,'P',0,Type_To, RMC_GetCIM10_id.RefThe));
     End if;
  Exception
       When No_Data_Found Then
           -- -------------------------------------------------
                   -- Retour vide sur type non Initialisée
           -- -------------------------------------------------
           Begin
              Return(RMC_GetHie_Pro(RMC_GetCIM10_id.The_Ide,'P',0,Type_To, RMC_GetCIM10_id.RefThe));
           Exception
                     When Others Then
                      Return SqlCode;
                   End;
           When Others Then
               Return SqlCode;
End RMC_GetCIM10_id;
  -- -------------------------------------------------------------------
  -- Fonction   : RMC_GetCIM10FromCode_txt
  -- Objet      : Recherche des lignes de THE dont le CAF répond au
  --              critère de recherche CODECIM10.
  --              Interrogation directe sur la table THE sans utilisation
  --              de mots clés
  -- -------------------------------------------------------------------
Procedure RMC_GetCIM10FromCode_txt (CODECIM10  In   Varchar2,
                                 RefThe     Out  RMC_THE_Pubres.RMC_THECurTyp,
                                                             Ret        Out  Number) Is
 Begin
       RMC_GetCIM10FromCode_txt.Ret := AVidal_RMC.RMC_GetCIM10FromCode_txt(RMC_GetCIM10FromCode_txt.CODECIM10,
                                                                           RMC_GetCIM10FromCode_txt.RefThe);
End RMC_GetCIM10FromCode_txt;
Function RMC_GetCIM10FromCode_txt (CODECIM10 In   Varchar2,
                                    RefThe    Out  RMC_THE_Pubres.RMC_THECurTyp)
                                    Return Number Is
 Begin
 Open RMC_GetCIM10FromCode_txt.RefTHE For
                     Select t.THE_IDE, t.TYPE_IDE, t.THE_CAF, t.THE_LAF, t.ID, t.THE_VIS, t.DAT_MAJ, t.USR_MAJ, t.OBS_MAJ
                     From RMC_THE t
                     Where UPPER(translate(t.THE_CAF, AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2)) LIKE UPPER(translate(RMC_GetCIM10FromCode_txt.CODECIM10, AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
                       And t.type_ide = 8;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%RMC_GetCIM10FromCode_txt%');
--         COMMIT;
-------------------------------------------------------------


 Return (1);
 Exception
       When Others Then
           Return (sqlCode);
End RMC_GetCIM10FromCode_txt;
/*  -- -------------------------------------------------------------------
  -- Fonction   : Groupage
  -- Objet      : Fonction de groupage par appel externe
  -- -------------------------------------------------------------------
Procedure Groupage (IDFG           In Varchar2,
                                                   StringParam In Varchar2) Is
 r number;
 Begin
       r := AVidal_Tlm.Groupage(Groupage.IDFG,
                                    Groupage.StringParam);
End Groupage;
Function Groupage( IDFG            In Varchar2,
                                                   StringParam In Varchar2)
                                            Return Number Is
  Begin
               Return 1;
End Groupage;*/
    -- --------------------------------------------------------------------
    -- Fonction   : RMC_GetCIM10Info_txt
    -- Objet      : Modification #3 : Fonction qui prend une chaîne de
    --                caractères en entrée et qui retourne la même chaîne
    --                sans les caractères non alphanumériques + la
    --                concaténation de '.htm'
    -- --------------------------------------------------------------------
       Procedure RMC_GetCIM10Info_txt ( ChaineIn    In    Varchar2,
                                    ChaineOut   Out   Varchar2,
                                    Ret         Out   Number)
       Is
       Begin
           Ret := AVIDAL_RMC.RMC_GetCIM10Info_txt ( RMC_GetCIM10Info_txt.ChaineIn,
                                               RMC_GetCIM10Info_txt.ChaineOut);
       End RMC_GetCIM10Info_txt;
       Function RMC_GetCIM10Info_txt ( ChaineIn    In    Varchar2,
                                   ChaineOut   Out   Varchar2 )
                                 Return  Number
       Is
         Type           Tab_Mot Is Table Of Varchar2(1)      Index By Binary_Integer;
         T_Mot_f        Tab_Mot;
         Mot_Initial    Varchar2(255);
         Mot_Final      Varchar2(255);
         I            Pls_Integer;
       Begin
         Mot_Initial := RMC_GetCIM10Info_txt.ChaineIn;
         For I In 1..Length(Mot_Initial)
         Loop
           If Substr(Mot_Initial,I,1) Not In ('é','ê','è','ë','à','ä','â','ï','î','ö','ô','ü','û','ù','ÿ','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','0','1','2','3','4','5','6','7','8','9') Then
             T_Mot_f(I) := ' ';
           Else
             T_Mot_f(I) := Substr(Mot_Initial,I,1);
           End If;
         End Loop;
         For I In 1..Length(Mot_Initial)
         Loop
           If T_Mot_f(I) <> ' ' Then
             Mot_final := Mot_final||T_Mot_f(I);
           End If;
         End Loop;
         ChaineOut := Mot_final||'.htm';
-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%RMC_GetCIM10Info_txt%');
--         COMMIT;
-------------------------------------------------------------


        Return (1);
         EXCEPTION
           When Others Then
             Return SQLCODE;
       End RMC_GetCIM10Info_txt;

-- ---------------------------------------------------------------
  -- Fonction de sélection  : RMC_GetFromKeyWord2_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- L'intersection ne se fait pas sur les cle_ide mais sur les the_ide !!
  -- --------------------------------------------------------------
       Procedure RMC_GetFromKeyWord2_txt( ORI_IDE       In     RMC_CLE_PubRes.ORI_IDE  Default Null,
                                                         TYPE_IDE          In     RMC_CLE_PubRes.TYPE_IDE Default '%',
                                                         CLE_LIB           In     RMC_CLE_PubRes.CLE_LIB  Default '%',
                                                                         RefLnkTHE     out RMC_CLE_PubRes.TheCurtyp,
                                                         Ret           Out    Number) Is
       Begin
           Ret := AVidal_RMC.RMC_GetFromKeyWord2_txt(
                                RMC_GetFromKeyWord2_txt.Ori_Ide, RMC_GetFromKeyWord2_txt.Type_Ide,
                                                RMC_GetFromKeyWord2_txt.Cle_Lib, RMC_GetFromKeyWord2_txt.RefLnkThe);
           End RMC_GetFromKeyWord2_txt;
       Function RMC_GetFromKeyWord2_txt( ORI_IDE        In     RMC_CLE_PubRes.ORI_IDE  Default Null,
                                                        TYPE_IDE           In     RMC_CLE_PubRes.TYPE_IDE Default '%',
                                                        CLE_LIB        In         RMC_CLE_PubRes.CLE_LIB  Default '%',
                                                                        RefLnkTHE      Out RMC_CLE_PubRes.TheCurtyp)
                                                        Return  Number is
       Type  R_Mot  Is Record
           (  Cle_Mot   Varchar2(255),
              IFirst    Pls_Integer,
                  ILast     Pls_Integer
           );
       Type         Tab_Mot Is Table Of R_Mot         Index By Binary_Integer;
           Type         Tab_Req Is Table Of Varchar2(500) Index By Binary_Integer;
           T_Mot        Tab_Mot;
           T_Req        Tab_Req;
       Mot_Cle      Varchar2(255);
           Chaine_Epure Varchar2(255);
           Boo_Mot      Boolean;
           Boo_Jump     Boolean;
       Requete      varchar2(4000);
           I            Pls_Integer;
           Ind_Mot      Pls_Integer;
       Cpt          Pls_Integer;
       Begin

          -------------------------------------------------------------
          --Statistiques sur la procedure - rempli la table Marqueurs
          --le 25/05/2004
          -------------------------------------------------------------
          --         Update Marqueurs SET
          --                  Compteur = Compteur + 1
          --                  where upper(proc_name) Like UPPER('%RMC_GetFromKeyWord2_txt%');
          --         COMMIT;
          -------------------------------------------------------------


         -- ---------------------------------------
         -- Cette partie de traitement elimine les
         -- caracteres & | et # se trouvant à l'exterieur
         -- des mots clés
         -- ---------------------------------------
         Chaine_Epure := rtrim(ltrim(RMC_GetFromKeyWord2_txt.Cle_lib,MotEt),MotEt);
         Chaine_Epure := rtrim(ltrim(Chaine_Epure,MotOu),MotOu);
         Chaine_Epure := rtrim(ltrim(Chaine_Epure,MotSauf),MotSauf);
         Boo_Mot := False;
             Ind_Mot := 0;
             -- ---------------------------------------
             -- Compteur de parenthese
             -- Cette partie de traitement equilibre le nombre de
             -- parenthese droite et gauche
             -- ---------------------------------------
         Cpt := 0;
             For I In 1..Length(Chaine_Epure)
             Loop
            If Substr(Chaine_Epure,I,1) = '(' Then
                        Cpt := Cpt + 1;
                    End if;
            If Substr(Chaine_Epure,I,1) = ')' Then
                       Cpt := Cpt - 1;
                    End if;
         End Loop;
         If Cpt > 0 Then
                 Chaine_Epure := Rpad(Chaine_Epure,Length(Chaine_Epure) + Cpt, ')');
         Elsif Cpt < 0 Then
                 Chaine_Epure := Lpad(Chaine_Epure,Length(Chaine_Epure) + Abs(Cpt), '(');
         End if;
             -- ---------------------------------------
             -- Lecture lettre par lettre
             --  Constitution du tableau des mots
             -- ---------------------------------------
             For I In 1..Length(Chaine_Epure)
             Loop
            Boo_Jump := False;
            If Substr(Chaine_Epure,I,1) In (MotEt, MotOu, MotSauf, MotParOpen, MotParClose)
                    Then
                       Boo_Jump := True;
                       If Boo_Mot
               		   	  Then
                              T_Mot(Ind_Mot).Ilast  := I-1;
                  			  Boo_Mot := False;
               		   End if;
            End if;
            If Not Boo_Mot And Substr(Chaine_Epure,I,1) = ' ' Then
                       Boo_Jump := True;
            End if;
            If Not Boo_Jump
                    Then
               		If Not Boo_Mot
                       Then
                  	   	   Ind_Mot := Ind_Mot + 1;
                           T_Mot(Ind_Mot).Cle_Mot := Substr(Chaine_Epure,I,1);
                           T_Mot(Ind_Mot).IFirst  := I;
                  		   Boo_Mot := True;
               	    Else
                           T_Mot(Ind_Mot).Cle_Mot := T_Mot(Ind_Mot).Cle_Mot||Substr(Chaine_Epure,I,1);
                    End if;
             End if;
             End Loop;
         If Boo_Mot Then
                 T_Mot(Ind_Mot).Ilast  := Length(Chaine_Epure);
         End if;
         -- ---------------------------------------------------------
             -- Constitution des requetes.
             -- Tableau de requete pour chaque mot clé trouvé
         -- ---------------------------------------------------------
         For I in T_Mot.First..T_Mot.Last
             Loop
            -- Suppression des BLancs
            Mot_Cle := Upper(Ltrim(Rtrim(T_Mot(I).Cle_Mot)));
            -- Requete dans le tableau
           T_Req(I) :=    'Select Distinct a.The_ide, a.Type_ide, a.the_Caf, a.the_laf, a.id From Rmc_The a, Rmc_The_Cle b, Rmc_Cle c '
                       || ' Where UPPER(TRANSLATE(c.CLE_LIB,'''|| Avidal_RMC.ch1||''','''|| Avidal_RMC.ch2||''')) Like upper(translate(Nvl('''||Mot_Cle||''',''%'')||''%'''
                       || ',''' || AVIDAL_RMC.ch1 || ''', ''' || AVIDAL_RMC.ch2 || '''))'
                       || ' And c.TYPE_IDE = Nvl('||RMC_GetFromKeyWord2_txt.TYPE_IDE||',c.TYPE_IDE) '
					   || ' And b.cle_ide = c.cle_ide '
					   || ' And b.the_ide = a.The_ide '
					   || ' And a.type_ide = c.type_ide ';
		  --T_Req(I) :=    'Select Distinct c.Cle_ide From Rmc_Cle c '
          --             || ' Where c.CLE_LIB Like upper(translate(Nvl('''||Mot_Cle||''',''%'')||''%'''
          --             || ',''' || AVIDAL_RMC.ch1 || ''', ''' || AVIDAL_RMC.ch2 || '''))'
          --             || ' And c.TYPE_IDE = Nvl('||RMC_GetFromKeyWord.TYPE_IDE||',c.TYPE_IDE) ';
          --            || ' And c.ORI_IDE = Nvl('||RMC_GetFromKeyWord.ORI_IDE||',c.ORI_IDE) '
			 End Loop;
             -- ---------------------------------------------
             -- Constitution requete
             -- ---------------------------------------------
         Requete := 'Select /*+ ORDERED */ Distinct '
                              || 't.The_Ide, t.Type_ide, t.the_Caf, t.The_Laf, t.id '
                                          || ' From (';
         For I in T_Mot.First..T_Mot.Last
         Loop
            -- ---------------------
                -- Cas premier Mot
            -- ---------------------
            If I = T_Mot.First And T_Mot(I).Ifirst <> 1 Then
                        Requete := Requete || ' ' || Substr(Chaine_Epure,1,T_Mot(I).Ifirst-1);
            End if;
            -- ---------------------------------------
                -- Inserton requete dans chaine generale
            -- --------------------------------------
                    Requete := Requete || ' ' ||T_Req(I);
            -- ---------------------
                -- Inter mots
            -- ---------------------
            If I <> T_Mot.Last  Then
                        Mot_Cle := Substr(Chaine_Epure,T_Mot(I).Ilast+1,
                                                          T_Mot(I+1).Ifirst-T_Mot(I).Ilast-1);
                        Requete := Requete || Replace(Replace(Replace(Mot_Cle,MotEt,' Intersect '),
                                                                       MotOu,' Union '),
                                                                      Motsauf,' Minus ');
            End if;
            -- ----------------------------------------
                -- Cas dernier mot
            -- ----------------------------------------
            If I = T_Mot.Last And T_Mot(I).Ilast <> Length(Chaine_Epure) Then
                Requete := Requete || Substr(Chaine_Epure,T_Mot(I).Ilast+1);
            End if;
             End Loop;
                 -- --------------------------------------------------
                 --  Construction de la fin de la requete
                 -- --------------------------------------------------
			   Requete := Requete ||') t';
             --Requete := Requete ||') x, RMC_THE_CLE c, RMC_THE T '
             --                   ||'Where c.CLE_IDE = x.CLE_IDE And t.THE_IDE = c.THE_IDE ';
         --If RMC_GetFromKeyWord.TYPE_IDE is not null Then
         --          Requete := Requete || ' And t.TYPE_IDE = '||RMC_GetFromKeyWord.Type_Ide||' ';
         --End if;
           -- --------------------------------------------------
           -- Cas particulier du groupe d'indication
           -- --------------------------------------------------
         If RMC_GetFromKeyWord2_txt.TYPE_IDE  = 5  Then
           Requete :=  Requete
                      || ' union '
                      || ' select  Distinct a.The_Ide THE_IDE, a.Type_ide TYPE_IDE, a.the_Caf THE_CAF, '
                      || ' a.The_Laf THE_LAF, a.id ID '
					  --, 0 IDORGANISME, '''' FLAG ' Mod par ML le 02/01/2003
                      || ' from RMC_THE a, RMC_THE_PRO b, RMC_THE c, RMC_THE_CLE d ,(select CLE_IDE from RMC_CLE  '
                                                                                     || ' Where  TYPE_IDE       = 4 '
                                                                                     || ' And  UPPER(TRANSLATE(CLE_LIB,'''|| Avidal_RMC.ch1||''','''|| Avidal_RMC.ch2||''')) like upper(translate(''' || Mot_cle || '%'', '''
                  																     || AVIDAL_RMC.ch1 || ''', ''' || AVIDAL_RMC.ch2 || '''))) e'

					  || ' Where  a.TYPE_IDE       = 5 '
                      || ' And  b.THE_IDE        = a.THE_IDE '
                      || ' And  c.THE_IDE        = b.THE_THE_IDE '
                      || ' And  c.TYPE_IDE       = 4 '
                      || ' And  c.THE_IDE        = d.THE_IDE '
                      || ' And  d.CLE_IDE        = e.CLE_IDE '
                      || ' Order by 4' ;

         end if;
         -- ----------------------------------------------
             -- Clause Order ... en instance
         -- ----------------------------------------------
--       If P_Sel_Dyn.Att_Ide is null Then
--              Requete := Requete || 'And Rownum <= '||The_Res.max_Enr ||' Order By 2';
--                  INSERT INTO REQ VALUES (REQUETE);
--       Else
--             Requete := Requete || 'And Rownum <= '||The_Res.max_Enr ||' Order By 6';
--                 INSERT INTO REQ VALUES (REQUETE);
--           End if;
         -- ----------------------------------------------
             -- Ouverture curseur
         -- ----------------------------------------------
         Open RMC_GetFromKeyWord2_txt.RefLnkthe For Requete;
         Return(1);
  Exception
        When Others Then
          Return(sqlcode);
  End RMC_GetFromKeyWord2_txt;


-- ====================================================================
-- Fin de package
-- ====================================================================
Begin
      -- ----------------------------------------------------------
          -- Initailisation du Package
      -- ----------------------------------------------------------
      Avidal_RMC.TTyp_Cst.Delete;
          Avidal_RMC.TTyp_Cst(1)  := 'CIP';     -- Valeur 1  CIP
          Avidal_RMC.TTyp_Cst(2)  := 'SPE';     -- Valeur 2  Spécialité
          Avidal_RMC.TTyp_Cst(3)  := 'SUB';     -- Valeur 3  Substance
          Avidal_RMC.TTyp_Cst(4)  := 'INDIC';   -- Valeur 4  Indications
          Avidal_RMC.TTyp_Cst(5)  := 'GINDIC';  -- Valeur 5  Groupe d'indication, situation de prescription
          Avidal_RMC.TTyp_Cst(6)  := 'CINDIC';  -- Valeur 6  Contre indication
          Avidal_RMC.TTyp_Cst(7)  := 'THERA';   -- Valeur 7  Classe therapeutique
          Avidal_RMC.TTyp_Cst(8)  := 'CIM';     -- Valeur 8  CIM10
        --  Avidal_RMC.TTyp_Cst(9)  := 'IAM';     -- Valeur 9  Classe d'interaction
        --  Avidal_RMC.TTyp_Cst(10) := 'LABO';    -- Valeur 10 laboratoire
          Avidal_RMC.TTyp_Cst(10)  := 'IAM';     -- Valeur 9  Classe d'interaction
          Avidal_RMC.TTyp_Cst(9) := 'LABO';    -- Valeur 10 laboratoire

          Avidal_RMC.TTyp_Cst(11) := 'DIAG';    -- Valeur 11 Dignostic
END AVIDAL_RMC;
/
CREATE OR REPLACE PACKAGE "AVIDAL_RMC_DOSSIER"   AS

  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
       -- -------------------------------------------------------------------
       -- Procedure   : RMC_GetGIndic_Prob
       -- -------------------------------------------------------------------
       PROCEDURE RMC_GetGIndic_Prob_txt(ID_SPECIALITES  IN   VARCHAR2,
                                    RefThe          OUT  Rmc_The_Pubres.GINDIC_PROBCurTyp,
                                    Ret             OUT  NUMBER);
       -- -------------------------------------------------------------------
       -- Fonction   : RMC_GetGIndic_Prob
       -- Objet      : Recherche des groupes d'indications probables à partir
       --              . D'une liste d'id de spécialités
       -- -------------------------------------------------------------------
       FUNCTION RMC_GetGIndic_Prob_txt(ID_SPECIALITES  IN   VARCHAR2,
      				   RefThe 	   OUT  Rmc_The_Pubres.GINDIC_PROBCurTyp)
                                   RETURN NUMBER;
       -- -------------------------------------------------------------------
       -- Procedure   : RMC_Detect_iam_ci
       -- -------------------------------------------------------------------
       PROCEDURE RMC_Detect_iam_ci_txt(ID_SPECIALITES  IN   VARCHAR2,
                                   CODECIM10       IN   VARCHAR2,
      				   RefThe 	   OUT  Rmc_The_Pubres.DETECTCurTyp,
                                   Ret             OUT  NUMBER);
       -- -------------------------------------------------------------------
       -- Fonction   : RMC_Detect_iam_ci
       -- Objet      : Recherche des interactions et des contre indications
       --              (assurees ou risquées) en fonction
       --              . D'une liste d'id de spécialités
       --              . D'une liste de CIM10
       -- -------------------------------------------------------------------
       FUNCTION RMC_Detect_iam_ci_txt(ID_SPECIALITES  IN   VARCHAR2,
                                  CODECIM10       IN   VARCHAR2,
      				  RefThe 	  OUT  Rmc_The_Pubres.DETECTCurTyp)
                                  RETURN NUMBER;
      -- -------------------------------------------------------------------
      -- Procedure   : RMC_GetCim10Corres
      -- Objet      : In chaine de Id de GIndic => Cim10 correspondant
      -- -------------------------------------------------------------------
      PROCEDURE RMC_GetCim10Corres_txt (ID_GINDICS     IN   VARCHAR2,
                                   Niveau          IN   VARCHAR2 DEFAULT 'O',
                                   RefThe          OUT  Rmc_The_Pubres.RRMC_THECurTyp1,
                      	           Ret             OUT  NUMBER);
      -- -------------------------------------------------------------------
      -- Fonction   : RMC_GetCim10Corres
      -- Objet      : In chaine de Id de GIndic => Cim10 correspondant
      -- -------------------------------------------------------------------
      FUNCTION RMC_GetCim10Corres_txt (ID_GINDICS  IN   VARCHAR2,
                                   Niveau      IN   VARCHAR2 DEFAULT 'O',
                                   RefThe 	   OUT  Rmc_The_Pubres.RRMC_THECurTyp1)
                                   RETURN NUMBER;



       TTyp_Cst  Rmc_The_Pubres.TabType_Cst;
-- ====================================================================
-- Fin de package
-- ====================================================================
END Avidal_RMC_Dossier;
/

CREATE OR REPLACE PACKAGE BODY "AVIDAL_RMC_DOSSIER"              AS
Type_INDIC       Rmc_The_Pubres.TYPE_IDE;
Type_GINDIC      Rmc_The_Pubres.TYPE_IDE;
Type_SPE         Rmc_The_Pubres.TYPE_IDE;
Type_CIM         Rmc_The_Pubres.TYPE_IDE;
Type_CINDIC      Rmc_The_Pubres.TYPE_IDE;
TYPE_CIM10       Rmc_The_Pubres.TYPE_IDE;


FUNCTION  RMC_Get_Type(Typ_Lib     IN VARCHAR2)
                       RETURN PLS_INTEGER IS
       I PLS_INTEGER;
 BEGIN
      I := Avidal_RMC_Dossier.TTyp_Cst.First;
	    WHILE I <= Avidal_RMC_Dossier.TTyp_Cst.Last AND Avidal_RMC_Dossier.TTyp_Cst(I) <> RMC_Get_Type.Typ_Lib
	    LOOP
          I := I + 1;
	    END LOOP;
      IF I > Avidal_RMC_Dossier.TTyp_Cst.Last THEN
	        RETURN 0;
	    ELSE
	        RETURN I;
	    END IF;
END RMC_Get_Type;

  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  -- -------------------------------------------------------------------
  -- Fonction   : RMC_GetGIndic_Prob_txt
  -- Objet      : Recherche des groupes d'indications probables à partir
  --              . D'une liste d'id de spécialités
  -- -------------------------------------------------------------------
PROCEDURE RMC_GetGIndic_Prob_txt (ID_SPECIALITES  IN   VARCHAR2,
                               RefThe          OUT  Rmc_The_Pubres.GINDIC_PROBCurTyp,
                  	           Ret             OUT  NUMBER) IS
  BEGIN
       RMC_GetGIndic_Prob_txt.Ret := Avidal_RMC_Dossier.RMC_GetGIndic_Prob_txt(RMC_GetGIndic_Prob_txt.ID_SPECIALITES,
	                                                                     RMC_GetGIndic_Prob_txt.RefThe);
END RMC_GetGIndic_Prob_txt;
FUNCTION RMC_GetGIndic_Prob_txt (ID_SPECIALITES  IN   VARCHAR2,
                             RefThe          OUT  Rmc_The_Pubres.GINDIC_PROBCurTyp)
                             RETURN NUMBER IS
 BEGIN

      -------------------------------------------------------------
      --Statistiques sur la procedure - rempli la table Marqueurs
      --le 25/05/2004
      -------------------------------------------------------------
      --         Update Marqueurs SET
      --                  Compteur = Compteur + 1
      --                  where upper(proc_name) Like UPPER('%RMC_GetGIndic_Prob_txt%');
      --         COMMIT;
      -------------------------------------------------------------



       Type_GINDIC  := Avidal_RMC_Dossier.RMC_Get_Type('GINDIC');
       Type_INDIC   := Avidal_RMC_Dossier.RMC_Get_Type('INDIC');
       Type_SPE     := Avidal_RMC_Dossier.RMC_Get_Type('SPE');
       OPEN RMC_GetGIndic_Prob_txt.RefThe FOR
	   'Select theide,
               typeide,
               thecaf,
               thelaf,
               theid,
               COUNT(*) occur
	      FROM (SELECT DISTINCT c1.THE_IDE theide,
	   	  	   		   c1.TYPE_IDE typeide,
	   				   c1.THE_CAF thecaf,
					   c1.THE_LAF thelaf,
	   				   c1.ID theid,
	   				   e1.THE_IDE
	   				   FROM RMC_THE a1, RMC_THE_PRO b1, RMC_THE c1, RMC_THE_PRO d1, RMC_THE e1
	      			   		 WHERE c1.THE_IDE = b1.THE_IDE
	   						 AND   c1.TYPE_IDE = '||TYPE_GINDIC||'
	   						 AND   b1.THE_THE_IDE = a1.THE_IDE
	   						 AND   a1.TYPE_IDE = '||TYPE_INDIC||'
	   						 AND   a1.THE_IDE = d1.THE_IDE
	   						 AND   d1.THE_THE_IDE = e1.THE_IDE
	   						 AND   e1.TYPE_IDE = '||TYPE_SPE||'
	   						 AND   e1.THE_IDE IN ('||ID_SPECIALITES||')
	            )
        GROUP BY theide, typeide, thecaf, thelaf, theid
        ORDER BY occur DESC, 4';
        RETURN (1);
 EXCEPTION
        WHEN OTHERS THEN
            RETURN (SQLCODE);
END RMC_GetGIndic_Prob_txt;
   -- -------------------------------------------------------------------
   -- Fonction   : RMC_Detect_iam_ci_txt
   -- Objet      : Recherche des interactions et des contre indications
   --              (assurees ou risquées) en fonction
   --              . D'une liste d'id de spécialités
   --              . D'une liste de CIM10
   -- -------------------------------------------------------------------
PROCEDURE RMC_Detect_iam_ci_txt(ID_SPECIALITES  IN   VARCHAR2,
                            CODECIM10       IN   VARCHAR2,
                            RefThe 	        OUT  Rmc_The_Pubres.DETECTCurTyp,
                            Ret             OUT  NUMBER) IS
BEGIN
      RMC_Detect_iam_ci_txt.Ret := Avidal_RMC_Dossier.RMC_Detect_iam_ci_txt(RMC_Detect_iam_ci_txt.ID_SPECIALITES,
						                                                        RMC_Detect_iam_ci_txt.CODECIM10,
                                                                    RMC_Detect_iam_ci_txt.RefThe);
END RMC_Detect_iam_ci_txt;
FUNCTION RMC_Detect_iam_ci_txt(ID_SPECIALITES  IN   VARCHAR2,
                            CODECIM10       IN   VARCHAR2,
                            RefThe 	    OUT  Rmc_The_Pubres.DETECTCurTyp)
                            RETURN NUMBER IS
  BEGIN
-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%RMC_Detect_iam_ci_txt%');
--         COMMIT;
-------------------------------------------------------------


       Type_CIM     := Avidal_RMC_Dossier.RMC_Get_Type('CIM');
       Type_CINDIC  := Avidal_RMC_Dossier.RMC_Get_Type('CINDIC');
       Type_SPE     := Avidal_RMC_Dossier.RMC_Get_Type('SPE');
       OPEN RMC_Detect_iam_ci_txt.RefThe FOR
       'Select f0.ID_SPECIALITE  ID_SPECIALITE1,
               f0.DENOMSPE       DENOMSPE1,
               a0.id_iamclasse   ID_IAMCLASSE1,
               d0.CLASSE         CLASSE1,
               h0.ID_SPECIALITE  ID_SPECIALITE2,
               h0.DENOMSPE       DENOMSPE2,
               b0.id_iamclasse   ID_IAMCLASSE2,
               e0.CLASSE         CLASSE2,
               c0.NIVEAUGRAVITE  NIVEAUGRAVITE,
               c0.RISQETMECAN    RISQETMECAN,
               c0.CONDUITEATENIR CONDUITEATENIR,
               0                 CIM_INI,
               h0.source         DENOM_CIM_INI,
               0                 FLAG_P_D_F,
               0                 CIM_FIN,
               0                 SPEC,
               h0.source         DENOM_SPEC,
               0                 FLAG_K
        FROM IAMCLASSE_IAMCOUPLE a0 , IAMCLASSE_IAMCOUPLE b0, IAMCOUPLE c0 , IAMCLASS d0,
             IAMCLASS e0, SPECIALITE f0, SPECIALITE_IAMCLASS g0, SPECIALITE h0, SPECIALITE_IAMCLASS i0
        WHERE a0.id_iamcouple = b0.id_iamcouple
          AND a0.id_iamclasse < b0.id_iamclasse
          AND a0.id_iamcouple IN (SELECT id_iamcouple
                                  FROM IAMCLASSE_IAMCOUPLE
                                  WHERE id_iamclasse IN (SELECT id_iamclasse
                                                         FROM SPECIALITE_IAMCLASS
                                                         WHERE id_specialite IN ('||ID_SPECIALITES||')
                                                         GROUP BY id_iamclasse
                                                         )
                                  GROUP BY id_iamcouple
                                  HAVING COUNT(*) > 1
                                 )
          AND a0.id_iamcouple  = c0.id_iamcouple
          AND a0.id_iamclasse  = d0.id_iamclasse
          AND b0.id_iamclasse  = e0.id_iamclasse
          AND d0.id_iamclasse  = g0.id_iamclasse
          AND g0.ID_SPECIALITE = f0.ID_SPECIALITE
          AND f0.ID_SPECIALITE IN ('||ID_SPECIALITES||')
          AND e0.id_iamclasse  = i0.id_iamclasse
          AND i0.ID_SPECIALITE = h0.ID_SPECIALITE
          AND h0.ID_SPECIALITE IN ('||ID_SPECIALITES||')
          AND h0.ID_SPECIALITE <> f0.ID_SPECIALITE
      UNION
        SELECT 0               ID_SPECIALITE1,
               '' ''           DENOMSPE1,
               0               ID_IAMCLASSE1,
               '' ''           CLASSE1,
               0               ID_SPECIALITE2,
               '' ''           DENOMSPE2,
               0               ID_IAMCLASSE2,
               '' ''           CLASSE2,
               '' ''           NIVEAUGRAVITE,
               '' ''           RISQETMECAN,
               '' ''           CONDUITEATENIR,
               ReqB.CIMB       CIM_INI,
               ReqB.DENOMCIM   DENOM_CIM_INI,
               ReqB.flag       FLAG_P_D_F,
               ReqA.CIMA       CIM_FIN,
               ReqA.SPE        SPEC,
               ReqA.DENOMSPE   DENOM_SPEC,
               1               FLAG_K
        FROM (SELECT 1          flag,
                     a.THE_IDE  CIMB,
                     a.THE_LAF  DENOMCIM,
                     c.THE_IDE  CIM2B
              FROM RMC_THE a, RMC_THE_HIE b, RMC_THE c
              WHERE a.THE_IDE IN ('||CODECIM10||')
	              AND a.TYPE_IDE     = '||TYPE_CIM||'
         	      AND b.THE_THE_IDE  = a.THE_IDE
                AND c.THE_IDE      = b.THE_IDE
                AND c.TYPE_IDE     = '||TYPE_CIM||'
             UNION
              SELECT 0          flag,
                     c.THE_IDE  CIMB,
                     c.THE_LAF  DENOMCIM,
                     c.THE_IDE  CIM2B
              FROM RMC_THE c
              WHERE c.THE_IDE IN ('||CODECIM10||')
             UNION
              SELECT -1         flag,
                     a.THE_IDE  CIMB,
                     a.THE_LAF  DENOMCIM,
                     c.THE_IDE  CIM2B
              FROM RMC_THE a, RMC_THE_HIE b, RMC_THE c
              WHERE a.THE_IDE IN ('||CODECIM10||')
	              AND a.TYPE_IDE   = '||TYPE_CIM||'
                AND b.THE_IDE    = a.THE_IDE
                AND c.THE_IDE    = b.THE_THE_IDE
                AND c.TYPE_IDE   = '||TYPE_CIM||'
              ) ReqB,
              (SELECT t1.the_ide  SPE,
                      t1.the_laf  DENOMSPE,
                      t3.THE_IDE  CIMA
               FROM RMC_THE t1, RMC_THE t2, RMC_THE t3, RMC_THE_PRO p1, RMC_THE_PRO p2
               WHERE t1.THE_IDE   = p1.THE_THE_IDE
                 AND t1.TYPE_IDE  = '||Type_SPE||'
                 AND p1.THE_IDE   = t2.THE_IDE
                 AND t2.TYPE_IDE  = '||Type_CINDIC||'
                 AND t1.THE_IDE IN (SELECT the_ide
                             FROM RMC_THE
                             WHERE id IN ('||ID_SPECIALITES||')
							 AND   type_ide = '||Type_SPE||')
                 AND t2.THE_IDE   = p2.THE_IDE
                 AND p2.THE_THE_IDE  = t3.THE_IDE
                 AND t3.TYPE_IDE  = '||TYPE_CIM||'
              ) ReqA
        WHERE ReqB.CIM2B = ReqA.CIMA
      ORDER BY 18,1,12';
      RETURN (1);
      EXCEPTION
      WHEN OTHERS THEN
          RETURN (SQLCODE);
END RMC_Detect_iam_ci_txt;
  -- -------------------------------------------------------------------
  -- Fonction   : RMC_GetCim10Corres_txt
  -- Objet      : In chaine de Id de GIndic => Cim10 correspondant
  -- -------------------------------------------------------------------
PROCEDURE RMC_GetCim10Corres_txt (ID_GINDICS  IN   VARCHAR2,
                               Niveau          IN   VARCHAR2 DEFAULT 'O',
                               RefThe          OUT  Rmc_The_Pubres.RRMC_THECurTyp1,
                  	           Ret             OUT  NUMBER) IS
  BEGIN
       RMC_GetCim10Corres_txt.Ret := Avidal_RMC_Dossier.RMC_GetCim10Corres_txt(RMC_GetCim10Corres_txt.ID_GINDICS,
                                                                       RMC_GetCim10Corres_txt.Niveau,
	                                                                     RMC_GetCim10Corres_txt.RefThe);
END RMC_GetCim10Corres_txt;
FUNCTION RMC_GetCim10Corres_txt (ID_GINDICS  IN   VARCHAR2,
                               Niveau      IN   VARCHAR2 DEFAULT 'O',
                               RefThe 	   OUT  Rmc_The_Pubres.RRMC_THECurTyp1)
                               RETURN NUMBER IS
  BEGIN
       TYPE_GINDIC  := Avidal_RMC_Dossier.RMC_Get_Type('GINDIC');
       TYPE_CIM10   := Avidal_RMC_Dossier.RMC_Get_Type('CIM');
       IF  RMC_GetCim10Corres_txt.Niveau = 'O' THEN
          OPEN RMC_GetCim10Corres_txt.RefThe FOR
          'Select c1.THE_IDE,
              c1.TYPE_IDE,
              c1.THE_CAF,
              c1.THE_LAF,
              c1.ID
          FROM RMC_THE a1, RMC_THE_PRO b1, RMC_THE c1
          WHERE a1.TYPE_IDE  = '||TYPE_GINDIC||'
            AND a1.THE_IDE IN ('||ID_GINDICS||')
            AND b1.THE_IDE     = a1.THE_IDE
            AND b1.THE_THE_IDE = c1.THE_IDE
            AND b1.niveau IN (0,1)
            AND c1.TYPE_IDE    = '||TYPE_CIM10||'
         		ORDER BY  c1.THE_CAF ';
       ELSE
          OPEN RMC_GetCim10Corres_txt.RefThe FOR
          'Select c1.THE_IDE,
              c1.TYPE_IDE,
              c1.THE_CAF,
              c1.THE_LAF,
              c1.ID
          FROM RMC_THE a1, RMC_THE_PRO b1, RMC_THE c1
          WHERE a1.TYPE_IDE  = '||TYPE_GINDIC||'
            AND a1.THE_IDE IN ('||ID_GINDICS||')
            AND b1.THE_IDE     = a1.THE_IDE
            AND b1.THE_THE_IDE = c1.THE_IDE
            AND b1.niveau = 1
            AND c1.TYPE_IDE    = '||TYPE_CIM10||'
            ORDER BY  c1.THE_CAF ';
       END IF;
-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%RMC_GetCim10Corres_txt%');
--         COMMIT;
-------------------------------------------------------------


        RETURN (1);
   EXCEPTION
        WHEN OTHERS THEN
            RETURN (SQLCODE);
END RMC_GetCim10Corres_txt;



BEGIN
      -- ----------------------------------------------------------
	  -- Initialisation du Package
      -- ----------------------------------------------------------
    Avidal_RMC_Dossier.TTyp_Cst.DELETE;
	  Avidal_RMC_Dossier.TTyp_Cst(1)  := 'CIP';     -- Valeur 1  CIP
	  Avidal_RMC_Dossier.TTyp_Cst(2)  := 'SPE';     -- Valeur 2  Spécialité
	  Avidal_RMC_Dossier.TTyp_Cst(3)  := 'SUB';     -- Valeur 3  Substance
	  Avidal_RMC_Dossier.TTyp_Cst(4)  := 'INDIC';   -- Valeur 4  Indications
	  Avidal_RMC_Dossier.TTyp_Cst(5)  := 'GINDIC';  -- Valeur 5  Groupe d'indication, situation de prescription
	  Avidal_RMC_Dossier.TTyp_Cst(6)  := 'CINDIC';  -- Valeur 6  Contre indication
	  Avidal_RMC_Dossier.TTyp_Cst(7)  := 'THERA';   -- Valeur 7  Classe therapeutique
	  Avidal_RMC_Dossier.TTyp_Cst(8)  := 'CIM';     -- Valeur 8  CIM10
	  Avidal_RMC_Dossier.TTyp_Cst(9)  := 'IAM';     -- Valeur 9  Classe d'interaction
	  Avidal_RMC_Dossier.TTyp_Cst(10) := 'LABO';    -- Valeur 10 laboratoire
	  Avidal_RMC_Dossier.TTyp_Cst(11) := 'DIAG';    -- Valeur 11 Dignostic
END Avidal_RMC_Dossier;
/
CREATE OR REPLACE PACKAGE Avidal_Saumon IS

  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	  PROCEDURE GetSaumon_txt (Terme 		 IN 	VARCHAR2,
	   			 		    Typ			     IN 	INTEGER,
							RefSPESAUMON     OUT Spesaumon_Pubres.SPESAUMONCurTyp,
							Result 		     OUT NUMBER);

	  PROCEDURE GetLaboSaumon_txt (labo 	 IN 	VARCHAR2,
	   			 		  RefSPELABOSAUMON   OUT Spelabosaumon_Pubres.SPELABOSAUMONCurTyp,
	   			 		  Result 		     OUT NUMBER);

	  FUNCTION GetSaumon_txt (Terme 		 IN 	VARCHAR2,
	   			 		Typ			     IN 	INTEGER,
						RefSPESAUMON     OUT Spesaumon_Pubres.SPESAUMONCurTyp)
						RETURN NUMBER;

	  FUNCTION GetLaboSaumon_txt (labo 	 IN 	VARCHAR2,
	   			 		  RefSPELABOSAUMON   OUT Spelabosaumon_Pubres.SPELABOSAUMONCurTyp)
						RETURN NUMBER;

-- ====================================================================
-- Fin de package
-- ====================================================================
END Avidal_Saumon;
/

CREATE OR REPLACE PACKAGE BODY Avidal_Saumon AS

  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSaumon_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	     PROCEDURE GetSaumon_txt (Terme 		 IN 	VARCHAR2,
	   			 		    Typ			     IN 	INTEGER,
							RefSPESAUMON     OUT Spesaumon_Pubres.SPESAUMONCurTyp,
							Result 		     OUT NUMBER)
           IS
           BEGIN
                 Result := GetSaumon_txt ( Terme, Typ, RefSPESAUMON);
           END GetSaumon_txt;

           FUNCTION GetSaumon_txt ( Terme               IN    VARCHAR2,
                              Typ                   IN    INTEGER,
                              RefSPESAUMON    OUT   Spesaumon_Pubres.SPESAUMONCurTyp)
           RETURN NUMBER IS
           BEGIN
             IF typ = 1 THEN
                OPEN GetSaumon_txt.RefSPESAUMON FOR
                   SELECT   e.produit, e.docid, e.nomcompletmono,
                            e.idlaboratoire
                   FROM     SAUMON e
                   WHERE    UPPER(TRANSLATE(e.produit,Avidal_Pubres.ch1,Avidal_Pubres.ch2)) LIKE UPPER(TRANSLATE(GetSaumon_txt.Terme,Avidal_Pubres.ch1,Avidal_Pubres.ch2))
                   ORDER BY e.produit;

             ELSIF Typ = 4 THEN
               	   OPEN GetSaumon_txt.RefSPESAUMON FOR
                   SELECT   e.produit, e.docid, e.nomcompletmono,
                            e.idlaboratoire
                   FROM     SAUMON e, LABOSAUMON a
                   WHERE    a.idlaboratoire LIKE GetSaumon_txt.Terme
				   AND 		e.IDLABORATOIRE = a.idlaboratoire
                   ORDER BY e.produit;
             END IF;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSaumon_txt%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetSaumon_txt;


  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetLaboSaumon_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
  PROCEDURE GetLaboSaumon_txt (labo 	 IN 	VARCHAR2,
	   			 		  RefSPELABOSAUMON   OUT Spelabosaumon_Pubres.SPELABOSAUMONCurTyp,
	   			 		  Result 		     OUT NUMBER)
		   IS
           BEGIN
                           Result := GetLaboSaumon_txt ( labo, RefSPELABOSAUMON);
           END GetLaboSaumon_txt;
		   FUNCTION GetLaboSaumon_txt ( labo               IN    VARCHAR2,
                                    RefSPELABOSAUMON    OUT   Spelabosaumon_Pubres.SPELABOSAUMONCurTyp)
           RETURN NUMBER IS
           BEGIN

                OPEN GetLaboSaumon_txt.RefSPELABOSAUMON FOR
                   SELECT   e.idlaboratoire, e.LABORATOIRE
                   FROM     LABOSAUMON e
                   WHERE	UPPER(TRANSLATE(e.LABORATOIRE, Avidal_Pubres.ch1, Avidal_Pubres.ch2)) LIKE UPPER(TRANSLATE(GetLaboSaumon_txt.labo, Avidal_Pubres.ch1, Avidal_Pubres.ch2))
                   ORDER BY e.LABORATOIRE;


-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetLaboSaumon_txt%');
--         COMMIT;
-------------------------------------------------------------


             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetLaboSaumon_txt;


END Avidal_Saumon;
/
CREATE OR REPLACE Package AVIDAL_SITUATION_PRESCRIPTION Is
-- ====================================================================
-- Script     : AVIDAL_SITUATION_PRESCRIPTION    Type : Package
-- Objet      : Ressources Select tables
-- Owner      : VIDAL
-- Création   : 09/10/2000
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Odille Emmanuel
-- ====================================================================
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	   Procedure GetSPs_txt ( Libelle  	 	 In GROUPINDIC_Pubres.LIBELLE	 Default Null,
	   				   	 RefGROUPINDIC	 Out GROUPINDIC_Pubres.GROUPINDICCurTyp,
						 Ret			 Out Number);

	   Procedure GetSP_id ( IdSP  	 	     In GROUPINDIC_Pubres.ID_GROUPINDIC	 Default Null,
	   				   	 RefGROUPINDIC	 Out GROUPINDIC_Pubres.GROUPINDICCurTyp,
						 Ret			 Out Number);

	   Procedure GetSPIndics_id ( IdSP  	 	 In  GROUPINDIC_Pubres.ID_GROUPINDIC	 Default Null,
	   				   	 	  RefT_INDIC	 Out T_INDIC_Pubres.T_INDICCurTyp,
						 Ret			 Out Number);

	   Procedure GetSPSpes_id ( IdSP  	 	  In  GROUPINDIC_Pubres.ID_GROUPINDIC	 Default Null,
	   				   	 	RefSPECIALITE Out SPECIALITE_Pubres.SPECIALITECurTyp,
						 Ret			 Out Number);

   -- =====================================================================
   -- Function		   : GetSPs
   -- Purpose		   :
   -- Parameters In	   :
   -- Parameters Out   :
   -- Tables utilisees :
   -- History	  	   : Created by E.O. 10 Oct 2000
   -- =====================================================================
	   Function GetSPs_txt ( Libelle  	 	 In GROUPINDIC_Pubres.LIBELLE	 Default Null,
	   				   	 RefGROUPINDIC	 Out GROUPINDIC_Pubres.GROUPINDICCurTyp)
	   			Return Number;
	   --Pragma Restrict_References(GetSPs,WNDS);

   -- =====================================================================
   -- Function		   : GetSP
   -- Purpose		   :
   -- Parameters In	   : idSP
   -- Parameters Out   :
   -- Tables utilisees :
   -- History	  	   : Created by N.Q. 10 Oct 2000
   -- =====================================================================
	   Function GetSP_id ( IdSP  	 	     In GROUPINDIC_Pubres.ID_GROUPINDIC	 Default Null,
	   				   	 RefGROUPINDIC	 Out GROUPINDIC_Pubres.GROUPINDICCurTyp)
	   			Return Number;
	    Pragma Restrict_References(GetSP_id,WNDS,WNPS,RNPS);

   -- =====================================================================
   -- Function		   : GetSPIndics
   -- Purpose		   :
   -- Parameters In	   : idSP
   -- Parameters Out   :
   -- Tables utilisees :
   -- History	  	   : Created by N.Q. 10 Oct 2000
   -- =====================================================================
	   Function GetSPIndics_id ( IdSP  	 	 In  GROUPINDIC_Pubres.ID_GROUPINDIC	 Default Null,
	   				   	 	  RefT_INDIC	 Out T_INDIC_Pubres.T_INDICCurTyp)
	   			Return Number;
	    Pragma Restrict_References(GetSPIndics_id,WNDS,WNPS,RNPS);

   -- =====================================================================
   -- Function		   : GetSPIndics
   -- Purpose		   :
   -- Parameters In	   : idSP
   -- Parameters Out   :
   -- Tables utilisees :
   -- History	  	   : Created by N.Q. 10 Oct 2000
   -- =====================================================================
	   Function GetSPSpes_id ( IdSP  	 	  In  GROUPINDIC_Pubres.ID_GROUPINDIC	 Default Null,
	   				   	 	RefSPECIALITE Out SPECIALITE_Pubres.SPECIALITECurTyp)
	   			Return Number;
	    Pragma Restrict_References(GetSPSpes_id,WNDS,WNPS,RNPS);

-- ====================================================================
-- Fin de package
-- ====================================================================
End AVIDAL_SITUATION_PRESCRIPTION;
/

CREATE OR REPLACE Package Body AVIDAL_SITUATION_PRESCRIPTION Is
-- ====================================================================
-- Script     : AVIDAL_SITUATION_PRESCRIPTION    Type : Package
-- Objet      : Ressources Select tables
-- Owner      : VIDAL
-- Création   : 09/10/2000
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Odille Emmanuel
-- ====================================================================

  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSPs_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------

	   Procedure GetSPs_txt ( Libelle 	     In GROUPINDIC_Pubres.LIBELLE	 Default Null,
	   				   	 RefGROUPINDIC	 Out GROUPINDIC_Pubres.GROUPINDICCurTyp,
						 Ret			 Out Number)
       Is
	   Begin
	   		Ret :=GetSPs_txt ( Libelle, RefGROUPINDIC);
	   End GetSPs_txt;

	   Function GetSPs_txt ( Libelle 	     In GROUPINDIC_Pubres.LIBELLE	 Default Null,
	   				   	 RefGROUPINDIC	 Out GROUPINDIC_Pubres.GROUPINDICCurTyp)
	   			Return Number
       Is
	   Begin
		Open GetSPs_txt.RefGROUPINDIC For
		  Select ID_GROUPINDIC,
                 LIBELLE,
                 TYPE_
		   From  GROUPINDIC
		  Where  Upper(TRANSLATE(LIBELLE, AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2)) LIKE Upper(TRANSLATE(GetSPs_txt.Libelle, AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
		  Order by LIBELLE;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSPs_txt%');
--         COMMIT;
-------------------------------------------------------------


	   	Return 1;

		EXCEPTION
		When Others Then
			 Return SQLCODE;

	   End GetSPs_txt;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSP_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------


	   Procedure GetSP_id ( IdSP  	 	     In GROUPINDIC_Pubres.ID_GROUPINDIC	 Default Null,
	   				   	 RefGROUPINDIC	 Out GROUPINDIC_Pubres.GROUPINDICCurTyp,
						 Ret			 Out Number)
       Is
	   Begin
	   		Ret:= GetSP_id ( IdSP, RefGROUPINDIC);
	   End GetSP_id;

	   Function GetSP_id ( IdSP  	 	     In GROUPINDIC_Pubres.ID_GROUPINDIC	 Default Null,
	   				   	 RefGROUPINDIC	 Out GROUPINDIC_Pubres.GROUPINDICCurTyp)
	   			Return Number
       Is
	   Begin
		Open GetSP_id.RefGROUPINDIC For
		  Select ID_GROUPINDIC,
                 LIBELLE,
                 TYPE_
		  From   GROUPINDIC
		  Where (ID_GROUPINDIC = GetSP_id.IdSP Or GetSP_id.IdSP Is null)
		  Order by ID_GROUPINDIC;


-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSP_id%');
--         COMMIT;
-------------------------------------------------------------


	   	Return 1;

		EXCEPTION
		When Others Then
			 Return SQLCODE;

	   End GetSP_id;


  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSPIndics_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   Procedure GetSPIndics_id ( IdSP  	 	 In  GROUPINDIC_Pubres.ID_GROUPINDIC	 Default Null,
	   				   	 	  RefT_INDIC	 Out T_INDIC_Pubres.T_INDICCurTyp,
							  Ret			 Out Number)
       Is
	   Begin
	   		Ret := GetSPIndics_id ( IdSP, RefT_INDIC);
	   End GetSPIndics_id;

	   Function GetSPIndics_id ( IdSP  	 	 In  GROUPINDIC_Pubres.ID_GROUPINDIC	 Default Null,
	   				   	 	  RefT_INDIC	 Out T_INDIC_Pubres.T_INDICCurTyp)
	   			Return Number
       Is
	   Begin
		Open GetSPIndics_id.RefT_INDIC For
		  Select b.ID_T_INDIC, b.LIBELLE, b.TEXTE, b.CREATION, b.VALIDATION, b.REMARQUES
		    From T_INDIC b, GROUPINDICINDIC_REL a
		   Where a.ID_GROUPINDIC = GetSPIndics_id.IdSP
		     And b.ID_T_INDIC    = a.ID_T_INDIC;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSPIndics_id%');
--         COMMIT;
-------------------------------------------------------------


	   	Return 1;

		EXCEPTION
		When Others Then
			 Return SQLCODE;

	   End GetSPIndics_id;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSPSpes_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
	   Procedure GetSPSpes_id ( IdSP  	 	  In  GROUPINDIC_Pubres.ID_GROUPINDIC	 Default Null,
	   				   	 	RefSPECIALITE Out SPECIALITE_Pubres.SPECIALITECurTyp,
							Ret			  Out Number)
       Is
	   Begin

			Ret := GetSPSpes_id ( IdSP, RefSPECIALITE);

	   End GetSPSpes_id;

	   Function GetSPSpes_id ( IdSP  	 	  In  GROUPINDIC_Pubres.ID_GROUPINDIC	 Default Null,
	   				   	 	RefSPECIALITE Out SPECIALITE_Pubres.SPECIALITECurTyp)
	   			Return Number
       Is
	   Begin
		Open GetSPSpes_id.RefSPECIALITE For
		  Select c.ID_SPECIALITE, c.BVALID, c.BENCOURS, c.NOMUSER,
		  		 c.DENOMSPE, c.FORME, c.DOSAGE, c.complement, c.COMMAMMPOSO,
				 c.RESERVE, c.INFERIEURAGE, c.UNITINF, c.SUPERIEURAGE,
				 c.UNIFSUP, c.INFERIEURPOIDS, c.SUPERIEURPOIDS, c.DENOMAMM,
				 c.NUMDOSAMM, c.SPECATEGORIE, c.SOURCE, c.DATESOURCE,
				 c.REMARQUES, c.DCREAT, c.DMODIF, c.DREVIS
		    From SPECIALITE c, SPEINDIC b, GROUPINDICINDIC_REL a
		   Where a.ID_GROUPINDIC = GetSPSpes_id.IdSP
		     And b.ID_T_INDIC    = a.ID_T_INDIC
			 And c.ID_SPECIALITE = b.ID_SPECIALITE;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSPSpes_id%');
--         COMMIT;
-------------------------------------------------------------

	   	Return 1;

		EXCEPTION
		When Others Then
			 Return SQLCODE;

	   End GetSPSpes_id;


-- ====================================================================
-- Fin de package
-- ====================================================================
End AVIDAL_SITUATION_PRESCRIPTION;
/
CREATE OR REPLACE PACKAGE AVIDAL_SPECIALITE AS
-- =====================================================================
-- Script     : AVIDAL_SPECIALITE    Type : Package
-- Objet      : Ressources Select tables
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:37
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- Modifié par: SG K2-PixelPark 21/02/2001
--            : Modification #2 - MR- 20/03/2001 : Ajout de GetSpeSubsts
-- =====================================================================

  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

           Procedure GetSpes_txt ( DenomSpe        In    SPECIALITE_Pubres.Denomspe       Default Null,
                               Typ             In    Number                           Default Null,
                               Domain          In    Number                           Default Null,
                               RefSPECIALITE   Out   SPECIALITE_Pubres.SPECIALITECurRef,
                               Ret             Out   Number);

           Procedure GetSpe_id ( Id_Specialite   In    SPECIALITE_Pubres.Id_Specialite   Default Null,
                              RefSPECIALITE   Out   SPECIALITE_Pubres.SPECIALITECurTyp,
                              Ret             Out   Number);

           Procedure GetSpeCips_id ( Id_Specialite        In    SPECIALITE_Pubres.Id_Specialite            Default Null,
                                  RefSPEPRESENTATION   Out   SPEPRESENTATION_Pubres.SPEPRESENTATIONCurTyp,
                                  Ret                  Out   Number);

           Procedure GetSpeVoies_id ( Id_Specialite   In    SPECIALITE_Pubres.Id_Specialite    Default Null,
                                   RefSPEVOIE      Out   SPEVOIE_Pubres.SPEVOIECurTyp,
                                   Ret             Out   Number);

           Procedure GetSpeCIndics_id ( Id_Specialite   In    SPECIALITE_Pubres.Id_Specialite   Default Null,
                                     RefT_CI         Out   T_CI_Pubres.T_CICurTyp,
                                     Ret             Out   Number);

           Procedure GetSpeIndics_id ( Id_Specialite   In    SPECIALITE_Pubres.Id_Specialite    Default Null,
                                    RefT_INDIC      Out   T_INDIC_Pubres.T_INDICCurTyp,
                                    Ret             Out   Number);

           Procedure GetSpeEvts_id ( Id_Specialite   In    SPECIALITE_Pubres.Id_Specialite      Default Null,
                                  RefSPEEVT       Out   SPEEVT_Pubres.SPEEVTCurTyp,
                                  Ret             Out   Number);

           Procedure GetSpeSPs_id ( Id_Specialite   In    SPECIALITE_Pubres.Id_Specialite       Default Null,
                                 RefGROUPINDIC   Out   GROUPINDIC_Pubres.GROUPINDICCurTyp,
                                 Ret             Out   Number);

           Procedure GetSpeTheras_id ( Id_Specialite         In    SPECIALITE_Pubres.Id_Specialite              Default Null,
                                    RefDICOCOMCLASSIRIS   Out   DICOCOMCLASSIRIS_Pubres.DICOCOMCLASSIRISCurTyp2,
                                    Ret                   Out   Number);

           Procedure GetSpeIamClasses_id ( Id_Specialite   In    SPECIALITE_Pubres.Id_Specialite    Default Null,
                                        RefIAMCLASS     Out   IAMCLASS_Pubres.IAMCLASSCurTyp,
                                        Ret             Out   Number);

           Procedure GetSpeDoc_id ( Id_Specialite   In    SPECIALITE_Pubres.Id_Specialite       Default Null,
                                 RefSpesuiviSgml      OUT   Spesuivisgml_Pubres.SPESUIVISGMLCurTypR,
                                 Ret             Out   Number);

           Procedure GetSpeLabo_id ( Id_Specialite    In    SPECIALITE_Pubres.Id_Specialite     Default Null,
                                  RefLABORATOIRE   Out   LABORATOIRE_Pubres.LABORATOIRECurTyp,
                                  Ret              Out   Number);
           Procedure GetSpeSubsts_id ( Id_Specialite   In    SPECIALITE_Pubres.Id_Specialite    Default Null,
                                    RefT_SUB        Out   T_SUB_Pubres.T_SUBCurTyp,
                                    Ret             Out   Number);

		       Procedure GetSpeEphmras_id ( Id_Specialite         In    SPECIALITE_Pubres.Id_Specialite              Default Null,
                                    RefDICOT_EPHMRA       Out   DICOT_EPHMRA_Pubres.DICOT_EPHMRACurTyp,
                                    Ret                   Out   Number);

		       Procedure GetSpeATCs_id ( Id_Specialite         In    SPECIALITE_Pubres.Id_Specialite              Default Null,
                                    RefDICOT_ATC_IRIS       Out   DICOT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp2,
                                    Ret                   Out   Number);

	         Procedure GetSpePEs_id ( Id_Specialite         In    SPECIALITE_Pubres.Id_Specialite              Default Null,
                                    Terme                 In    VARCHAR2,
                                    Ref_SpePE       Out   SPEPE_Pubres.Spepecurtyp,
                                    Ret                   Out   Number);
-- =====================================================================
   -- Function            : GetSpes_txt
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out      :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================

		   Function GetSpes_txt ( DenomSpe        In   SPECIALITE_Pubres.Denomspe    Default Null,
                              Typ             In   Number                        Default Null,
                              Domain          In   Number                        Default Null,
                              RefSPECIALITE   Out SPECIALITE_Pubres.SPECIALITECurRef)
                            Return Number;
           -- Pragma Restrict_References(GetSpes,WNDS);
   -- =====================================================================
   -- Function            : GetSpe_id
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out      :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           Function GetSpe_id ( Id_Specialite   In    SPECIALITE_Pubres.Id_Specialite      Default Null,
                             RefSPECIALITE   Out   SPECIALITE_Pubres.SPECIALITECurTyp)
                           Return Number;
            Pragma Restrict_References(GetSpe_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : GetSpeCips_id
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           Function GetSpeCips_id ( Id_Specialite        In    SPECIALITE_Pubres.Id_Specialite            Default Null,
                                 RefSPEPRESENTATION   Out   SPEPRESENTATION_Pubres.SPEPRESENTATIONCurTyp)
                               Return Number;
            Pragma Restrict_References(GetSpeCips_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : GetSpeVoies_id
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           Function GetSpeVoies_id ( Id_Specialite   In    SPECIALITE_Pubres.Id_Specialite    Default Null,
                                  RefSPEVOIE      Out   SPEVOIE_Pubres.SPEVOIECurTyp)
                                Return Number;
            Pragma Restrict_References(GetSpeVoies_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : GetSpeCIndics_id
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           Function GetSpeCIndics_id ( Id_Specialite   In    SPECIALITE_Pubres.Id_Specialite   Default Null,
                                    RefT_CI         Out   T_CI_Pubres.T_CICurTyp)
                                  Return Number;
            Pragma Restrict_References(GetSpeCIndics_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : GetSpeIndics_id
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           Function GetSpeIndics_id ( Id_Specialite   In    SPECIALITE_Pubres.Id_Specialite    Default Null,
                                   RefT_INDIC      Out   T_INDIC_Pubres.T_INDICCurTyp)
                                 Return Number;
            Pragma Restrict_References(GetSpeIndics_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : GetSpeEvts_id
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           Function GetSpeEvts_id ( Id_Specialite   In    SPECIALITE_Pubres.Id_Specialite      Default Null,
                                 RefSPEEVT       Out   SPEEVT_Pubres.SPEEVTCurTyp)
                               Return Number;
            Pragma Restrict_References(GetSpeCips_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : GetSpeSPs_id
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           Function GetSpeSPs_id ( Id_Specialite   In    SPECIALITE_Pubres.Id_Specialite       Default Null,
                                RefGROUPINDIC   Out   GROUPINDIC_Pubres.GROUPINDICCurTyp)
                              Return Number;
            Pragma Restrict_References(GetSpeCips_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : GetSpeSPs_id
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           Function GetSpeTheras_id ( Id_Specialite         In    SPECIALITE_Pubres.Id_Specialite              Default Null,
                                   RefDICOCOMCLASSIRIS   Out   DICOCOMCLASSIRIS_Pubres.DICOCOMCLASSIRISCurTyp2)
                                 Return Number;
            Pragma Restrict_References(GetSpeCips_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : GetSpeIamClasses_id
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out  :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           Function GetSpeIamClasses_id ( Id_Specialite   In    SPECIALITE_Pubres.Id_Specialite         Default Null,
                                       RefIAMCLASS     Out   IAMCLASS_Pubres.IAMCLASSCurTyp)
                                     Return Number;
            Pragma Restrict_References(GetSpeCips_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : GetSpeDoc_id
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out      :
   -- History             : Created by N.Q. 20 Sept 2000
   -- =====================================================================
           Function GetSpeDoc_id ( Id_Specialite   In    SPECIALITE_Pubres.Id_Specialite      Default Null,
                                RefSpesuiviSgml      OUT   Spesuivisgml_Pubres.SPESUIVISGMLCurTypR)
                              Return Number;
            Pragma Restrict_References(GetSpeDoc_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function            : GetSpeLabo_id
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out      :
   -- History             : Created by SG K2-PixelPark 21/02/2001
   -- =====================================================================
           Function GetSpeLabo_id ( Id_Specialite    In    SPECIALITE_Pubres.Id_Specialite      Default Null,
                                 RefLABORATOIRE   Out   LABORATOIRE_Pubres.LABORATOIRECurTyp)
                               Return Number;
   -- =====================================================================
   -- Function            : GetSpeSubsts_id
   -- Purpose             :
   -- Parameters In       :
   -- Parameters Out      :
   -- History             : Created by MR K2-PixelPark 20/03/2001
   -- =====================================================================
           Function GetSpeSubsts_id ( Id_Specialite   In    SPECIALITE_Pubres.Id_Specialite     Default Null,
                                   RefT_SUB        Out   T_SUB_Pubres.T_SUBCurTyp)
                                 Return Number;

		       Function GetSpeEphmras_id ( Id_Specialite         In    SPECIALITE_Pubres.Id_Specialite              Default Null,
                                   RefDICOT_EPHMRA        Out   DICOT_EPHMRA_Pubres.DICOT_EPHMRACurTyp)
                                 Return Number;
		       Function GetSpeATCs_id ( Id_Specialite         In    SPECIALITE_Pubres.Id_Specialite              Default Null,
                                  RefDICOT_ATC_IRIS       Out   DICOT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp2)
                                    Return Number;

	         Function GetSpePEs_id ( Id_Specialite         In    SPECIALITE_Pubres.Id_Specialite              Default Null,
                                    Terme                 In    VARCHAR2,
                                    Ref_SpePE       Out   SPEPE_Pubres.Spepecurtyp)
                                    Return Number;
-- ====================================================================
-- Fin de package
-- ====================================================================
End AVIDAL_SPECIALITE;
/

CREATE OR REPLACE PACKAGE BODY Avidal_Specialite AS
-- ====================================================================
-- Script      : AVIDAL_SPECIALITE    Type : Package Body
-- Objet       : Ressources Select tables
-- Owner       : VIDAL
-- Création    : 14/09/99 18:31:39
-- Auteur      : AGDF (2000) from Data to Information
-- Généré par  : Kercaps - AGDF_GEN_PAC Version : 2.02
-- Modifié par : SG K2-PixelPark 21/02/2001
--             : Modification #2 - MR- 20/03/2001 : Ajoût de GetSpeSubsts
-- ====================================================================


  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSpeLabo_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetSpeLabo_id ( Id_Specialite    IN    Specialite_Pubres.Id_Specialite         DEFAULT NULL,
                                  RefLABORATOIRE   OUT   Laboratoire_Pubres.LABORATOIRECurTyp,
                                  Ret              OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetSpeLabo_id ( Id_Specialite , RefLABORATOIRE );
           END GetSpeLabo_id;
           FUNCTION GetSpeLabo_id ( Id_Specialite    IN    Specialite_Pubres.Id_Specialite          DEFAULT NULL,
                                 RefLABORATOIRE   OUT   Laboratoire_Pubres.LABORATOIRECurTyp)
                               RETURN NUMBER
           IS
           BEGIN
             OPEN GetSpeLabo_id.RefLABORATOIRE FOR
               SELECT a.ID_LABORATOIRE, null LAB_ID_LABORATOIRE, a.LABORATOIRE,
                      a.ADR1, a.ADR2, a.ADR3, a.CP, a.VILLE, a.CEDEX, a.PAYS, a.TELEPHONE,
                      a.TELECOPIE, a.EMAIL, a.INTERNET, a.COMMENTAIRE, a.MORT, a.DCREAT, a.DMODIF, a.DREVIS, VIGNETTE
               FROM   LABORATOIRE a, SPELABS_REL b
               WHERE  b.Id_Laboratoire = a.Id_Laboratoire
                 AND  b.Id_Specialite  = GetSpeLabo_id.Id_Specialite;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSpeLabo_id%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetSpeLabo_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSpes_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetSpes_txt ( DenomSpe        IN    Specialite_Pubres.Denomspe       DEFAULT NULL,
                               Typ             IN    NUMBER                           DEFAULT NULL,
                               Domain          IN    NUMBER                           DEFAULT NULL,
                               RefSPECIALITE   OUT   Specialite_Pubres.SPECIALITECurRef,
                               Ret             OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetSpes_txt( DenomSpe,  Typ, Domain, RefSPECIALITE);
           END GetSpes_txt;
           FUNCTION GetSpes_txt ( DenomSpe        IN    Specialite_Pubres.Denomspe        DEFAULT NULL,
                              Typ             IN    NUMBER                            DEFAULT NULL,
                              Domain          IN    NUMBER                            DEFAULT NULL,
                              RefSPECIALITE   OUT   Specialite_Pubres.SPECIALITECurRef)
                            RETURN NUMBER
           IS
		   domaine VARCHAR2(50);
           BEGIN

		     domaine := AVIDAL_PUBRES.DecodeDomain(GetSpes_txt.Domain);

             IF typ = 1 THEN
               OPEN GetSpes_txt.RefSPECIALITE FOR
                 'SELECT   Id_Specialite, Bvalid,
                          Bencours, Nomuser, Denomspe,
                          Forme, Dosage, complement,
                          Commammposo, Reserve, Inferieurage,
                          Unitinf, Superieurage, Unifsup,
                          Inferieurpoids, Superieurpoids, Denomamm,
                          Numdosamm, Specategorie, Source,
                          Datesource, Remarques, Dcreat,
                          Dmodif, Drevis
                 FROM     SPECIALITE
                 WHERE    UPPER(TRANSLATE(DENOMSPE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetSpes_txt.DenomSpe||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))
				   AND    IDTYPESPE IN ('||domaine||')
                 ORDER BY Id_Specialite';
             ELSIF Typ = 2 THEN
               OPEN GetSpes_txt.RefSPECIALITE FOR
                 'SELECT d.Id_Specialite, d.Bvalid,
                        d.Bencours, d.Nomuser, d.Denomspe,
                        d.Forme, d.Dosage, d.complement,
                        d.Commammposo, d.Reserve, d.Inferieurage,
                        d.Unitinf, d.Superieurage, d.Unifsup,
                        d.Inferieurpoids, d.Superieurpoids, d.Denomamm,
                        d.Numdosamm, d.Specategorie, d.Source,
                        d.Datesource, d.Remarques, d.Dcreat,
                        d.Dmodif, d.Drevis
                 FROM   SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, T_SUB a
                 WHERE  UPPER(TRANSLATE(a.LIBELLE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetSpes_txt.DenomSpe||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))
                   AND  b.DENOMSUB      = a.LIBELLE
                   AND  c.ID_SPECOMPO   = b.ID_SPECOMPO
                   AND  d.ID_SPECIALITE = c.ID_SPECIALITE
				   AND  d.IDTYPESPE IN ('||domaine||')';
		     --Recherche a partir d'une substance active
			 ELSIF Typ = 25 THEN
               OPEN GetSpes_txt.RefSPECIALITE FOR
                 'SELECT d.Id_Specialite, d.Bvalid,
                        d.Bencours, d.Nomuser, d.Denomspe,
                        d.Forme, d.Dosage, d.complement,
                        d.Commammposo, d.Reserve, d.Inferieurage,
                        d.Unitinf, d.Superieurage, d.Unifsup,
                        d.Inferieurpoids, d.Superieurpoids, d.Denomamm,
                        d.Numdosamm, d.Specategorie, d.Source,
                        d.Datesource, d.Remarques, d.Dcreat,
                        d.Dmodif, d.Drevis
                 FROM   SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, T_SUB a
                 WHERE  UPPER(TRANSLATE(a.LIBELLE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetSpes_txt.DenomSpe||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))
                   AND  b.DENOMSUB      = a.LIBELLE
				   AND  b.bconstactif = ''1''
                   AND  c.ID_SPECOMPO   = b.ID_SPECOMPO
                   AND  d.ID_SPECIALITE = c.ID_SPECIALITE
				   AND  d.IDTYPESPE IN ('||domaine||')';
		     --Recherche a partir d'un excipient
			 ELSIF Typ = 27 THEN
               OPEN GetSpes_txt.RefSPECIALITE FOR
                 'SELECT d.Id_Specialite, d.Bvalid,
                        d.Bencours, d.Nomuser, d.Denomspe,
                        d.Forme, d.Dosage, d.complement,
                        d.Commammposo, d.Reserve, d.Inferieurage,
                        d.Unitinf, d.Superieurage, d.Unifsup,
                        d.Inferieurpoids, d.Superieurpoids, d.Denomamm,
                        d.Numdosamm, d.Specategorie, d.Source,
                        d.Datesource, d.Remarques, d.Dcreat,
                        d.Dmodif, d.Drevis
                 FROM   SPECIALITE d, SPECOMPO c, SPECONSTITUANT b, T_SUB a
                 WHERE  UPPER(TRANSLATE(a.LIBELLE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetSpes_txt.DenomSpe||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))
                   AND  b.DENOMSUB      = a.LIBELLE
				   AND  b.bconstactif = ''0''
                   AND  c.ID_SPECOMPO   = b.ID_SPECOMPO
                   AND  d.ID_SPECIALITE = c.ID_SPECIALITE
				   AND  d.IDTYPESPE IN ('||domaine||')';
             ELSIF Typ = 3 THEN
               OPEN GetSpes_txt.RefSPECIALITE FOR
                 'SELECT d.Id_Specialite, d.Bvalid,
                        d.Bencours, d.Nomuser, d.Denomspe,
                        d.Forme, d.Dosage, d.complement,
                        d.Commammposo, d.Reserve, d.Inferieurage,
                        d.Unitinf, d.Superieurage, d.Unifsup,
                        d.Inferieurpoids, d.Superieurpoids, d.Denomamm,
                        d.Numdosamm, d.Specategorie, d.Source,
                        d.Datesource, d.Remarques, d.Dcreat,
                        d.Dmodif, d.Drevis
                 FROM   SPECIALITE d, SPECLASSIRIS c, DICOCOMCLASSIRIS a
                 WHERE  UPPER(TRANSLATE(Avidal_Classe_Thera.FormatLibDicocomclassiris(a.LIBELLE),'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetSpes_txt.DenomSpe||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))
                   AND  c.ID_DICOCOMCLASSIRIS = a.ID_DICOCOMCLASSIRIS
                   AND  d.ID_SPECIALITE        = c.ID_SPECIALITE
				   AND  d.IDTYPESPE IN ('||domaine||')';
             ELSIF Typ = 4 THEN
               OPEN GetSpes_txt.RefSPECIALITE FOR
                 'SELECT d.Id_Specialite, d.Bvalid,
                        d.Bencours, d.Nomuser, d.Denomspe,
                        d.Forme, d.Dosage, d.complement,
                        d.Commammposo, d.Reserve, d.Inferieurage,
                        d.Unitinf, d.Superieurage, d.Unifsup,
                        d.Inferieurpoids, d.Superieurpoids, d.Denomamm,
                        d.Numdosamm, d.Specategorie, d.Source,
                        d.Datesource, d.Remarques, d.Dcreat,
                        d.Dmodif, d.Drevis
                 FROM   SPECIALITE d, SPELABS_REL c, LABORATOIRE a
                 WHERE  UPPER(TRANSLATE(a.LABORATOIRE,'''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||''')) LIKE UPPER(TRANSLATE('''||GetSpes_txt.DenomSpe||''','''|| Avidal_Pubres.ch1||''','''|| Avidal_Pubres.ch2||'''))
                   AND  c.ID_LABORATOIRE = a.ID_LABORATOIRE
                   AND  d.ID_SPECIALITE  = c.ID_SPECIALITE
				   AND  d.IDTYPESPE IN ('||domaine||')';
             END IF;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSpes_txt%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetSpes_txt;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSpe_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetSpe_id ( Id_Specialite   IN    Specialite_Pubres.Id_Specialite        DEFAULT NULL,
                              RefSPECIALITE   OUT   Specialite_Pubres.SPECIALITECurTyp,
                              Ret             OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetSpe_id ( Id_Specialite, RefSPECIALITE);
           END GetSpe_id;
           FUNCTION GetSpe_id ( Id_Specialite   IN    Specialite_Pubres.Id_Specialite         DEFAULT NULL,
                             RefSPECIALITE   OUT   Specialite_Pubres.SPECIALITECurTyp)
                           RETURN NUMBER
           IS
           BEGIN
             OPEN GetSpe_id.RefSPECIALITE FOR
               SELECT   Id_Specialite, Bvalid,
                        Bencours, Nomuser, Denomspe,
                        Forme, Dosage, complement,
                        Commammposo, Reserve, Inferieurage,
                        Unitinf, Superieurage, Unifsup,
                        Inferieurpoids, Superieurpoids, Denomamm,
                        Numdosamm, Specategorie, Source,
                        Datesource, Remarques, Dcreat,
                        Dmodif, Drevis
               FROM     SPECIALITE
               WHERE    (Id_Specialite = GetSpe_id.Id_Specialite OR GetSpe_id.Id_Specialite IS NULL)
               ORDER BY Id_Specialite;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSpe_id%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetSpe_id;
  -- ------------------------------------------------------------------------------------
  -- Fonction de sélection  : GetSpeCips_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- Modifié par : MR - 26/03/2001 : Ajout table SPECONDITIONNEMENTPRIMAIRE pour Denomcip
  -- -------------------------------------------------------------------------------------
           PROCEDURE GetSpeCips_id ( Id_Specialite        IN    Specialite_Pubres.Id_Specialite            DEFAULT NULL,
                                  RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp,
                                  Ret                  OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetSpeCips_id ( Id_Specialite, RefSPEPRESENTATION);
           END GetSpeCips_id;
           FUNCTION GetSpeCips_id ( Id_Specialite        IN    Specialite_Pubres.Id_Specialite             DEFAULT NULL,
                                 RefSPEPRESENTATION   OUT   Spepresentation_Pubres.SPEPRESENTATIONCurTyp)
                               RETURN NUMBER
           IS
           BEGIN
             OPEN GetSpeCips_id.RefSPEPRESENTATION FOR
               SELECT   a.Id_Spepresentation, a.Id_Specialite,
                        a.Cip, a.Ucd, a.Ammeurope,
                        a.Lieudispo, a.Conddispo,
                        a.Liste, a.Dureeprescription, a.Prescriptioninitiale,
                        a.Prescriptionreservee, a.Renouvelreserve, a.Medpartic,
                        a.Naturesurveillance, a.Codereferantgenerique, a.Remplace,
                        a.Sourceremplace, a.Datesourceremplace, a.Remplacepar,
                        a.Sourceremplacepar, a.Datesourceremplacepar, a.Prixprodhtf,
                        a.Prixpublicttcf, a.Prixprodhte, a.Prixpublicttce,
                        a.Tva, a.Dcreat, a.Dmodif,
                        a.Drevis, a.Cipreferant,
                        b.DENOMSPE||DECODE(Condi,NULL,'',' : '||Condi) DenomCip,
                        a.disponibilite, a.nbprise, a.priseunitaire, a.codedispo codedispo
--ML : 06/11/2003
               FROM     SPECIALITE b, SPEPRESENTATION a --, SPECONDITIONNEMENTPRIMAIRE c
               WHERE    a.Id_Specialite           = GetSpeCips_id.Id_Specialite
                 AND    b.Id_Specialite           = a.Id_Specialite
      --           AND    c.Id_Spepresentation (+)  = a.Id_Spepresentation
      --           AND    UPPER(c.Typecondprimaire (+)) = 'DENOMCIP'
               ORDER BY  DECODE(codedispo,0,0,DECODE(codedispo,3,0,1)), Denomcip;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSpeCips_id%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetSpeCips_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSpeVoies_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetSpeVoies_id ( Id_Specialite   IN    Specialite_Pubres.Id_Specialite    DEFAULT NULL,
                                   RefSPEVOIE      OUT   Spevoie_Pubres.SPEVOIECurTyp,
                                   Ret             OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetSpeVoies_id ( Id_Specialite, RefSPEVOIE);
           END GetSpeVoies_id;
           FUNCTION GetSpeVoies_id ( Id_Specialite   IN    Specialite_Pubres.Id_Specialite     DEFAULT NULL,
                                  RefSPEVOIE      OUT   Spevoie_Pubres.SPEVOIECurTyp)
                                RETURN NUMBER
           IS
           BEGIN
             OPEN GetSpeVoies_id.RefSPEVOIE FOR
               SELECT   Id_Specialite, Voie,
                        Ordre
               FROM     SPEVOIE
               WHERE    (Id_Specialite = GetSpeVoies_id.Id_Specialite OR GetSpeVoies_id.Id_Specialite IS NULL)
               ORDER BY Voie;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSpeVoies_id%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetSpeVoies_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSpeCIndics_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetSpeCIndics_id ( Id_Specialite   IN    Specialite_Pubres.Id_Specialite     DEFAULT NULL,
                                     RefT_CI         OUT   T_Ci_Pubres.T_CICurTyp,
                                     Ret             OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetSpeCIndics_id ( Id_Specialite, RefT_CI);
           END GetSpeCIndics_id;
           FUNCTION GetSpeCIndics_id ( Id_Specialite   IN    Specialite_Pubres.Id_Specialite      DEFAULT NULL,
                                    RefT_CI         OUT   T_Ci_Pubres.T_CICurTyp)
                                  RETURN NUMBER
           IS
           BEGIN
             OPEN GetSpeCIndics_id.RefT_CI FOR
               SELECT   B.Id_T_Ci, B.Libelle,
                        B.Texte, B.Creation, B.Validation,
                        B.Remarques
               FROM     T_CI B, SPECI A
               WHERE    (A.ID_SPECIALITE = GetSpeCIndics_id.Id_Specialite OR GetSpeCIndics_id.Id_Specialite IS NULL)
                 AND    B.Id_T_Ci = A.ID_T_CI
         --        AND    B.VALIDATION = 'V'
               ORDER BY B.ID_T_CI;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSpeCIndics_id%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetSpeCIndics_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSpeIndics_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetSpeIndics_id ( Id_Specialite   IN    Specialite_Pubres.Id_Specialite       DEFAULT NULL,
                                    RefT_INDIC      OUT   T_Indic_Pubres.T_INDICCurTyp,
                                    Ret             OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetSpeIndics_id ( Id_Specialite, RefT_INDIC);
           END GetSpeIndics_id;
           FUNCTION GetSpeIndics_id ( Id_Specialite   IN    Specialite_Pubres.Id_Specialite        DEFAULT NULL,
                                   RefT_INDIC      OUT   T_Indic_Pubres.T_INDICCurTyp)
                                 RETURN NUMBER
           IS
           BEGIN
             OPEN GetSpeIndics_id.RefT_INDIC FOR
               SELECT   B.Id_T_Indic, B.Libelle,
                        B.Texte, B.Creation, B.Validation,
                        B.Remarques
               FROM     T_INDIC B, SPEINDIC A
               WHERE    (A.ID_SPECIALITE = GetSpeIndics_id.Id_Specialite OR GetSpeIndics_id.Id_Specialite IS NULL)
                 AND    B.Id_T_INDIC = A.ID_T_INDIC
         --        AND    B.VALIDATION = 'V'
               ORDER BY B.ID_T_INDIC;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSpeIndics_id%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetSpeIndics_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSpeEvts_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetSpeEvts_id ( Id_Specialite   IN    Specialite_Pubres.Id_Specialite         DEFAULT NULL,
                                  RefSPEEVT       OUT   Speevt_Pubres.SPEEVTCurTyp,
                                  Ret             OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetSpeEvts_id ( Id_Specialite, RefSPEEVT);
           END GetSpeEvts_id;
           FUNCTION GetSpeEvts_id ( Id_Specialite   IN    Specialite_Pubres.Id_Specialite          DEFAULT NULL,
                                 RefSPEEVT       OUT   Speevt_Pubres.SPEEVTCurTyp)
                               RETURN NUMBER
           IS
           BEGIN
             OPEN GetSpeEvts_id.RefSPEEVT FOR
               SELECT   Id_Speevt, Id_Specialite,
                        Evenement, Source, Datesource,
                        Dateevenement, Traiteeven
               FROM     SPEEVT
               WHERE    (Id_Specialite = GetSpeEvts_id.Id_Specialite OR GetSpeEvts_id.Id_Specialite IS NULL)
               ORDER BY Id_Speevt;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSpeEvts_id%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetSpeEvts_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSpesPs_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetSpesPs_id ( Id_Specialite   IN    Specialite_Pubres.Id_Specialite         DEFAULT NULL,
                                 RefGROUPINDIC   OUT   Groupindic_Pubres.GROUPINDICCurTyp,
                                 Ret             OUT   NUMBER)
           IS
           BEGIN
                 Ret     := GetSpesPs_id ( Id_Specialite, RefGROUPINDIC);
           END GetSpesPs_id;
           FUNCTION GetSpesPs_id ( Id_Specialite   IN    Specialite_Pubres.Id_Specialite          DEFAULT NULL,
                                RefGROUPINDIC   OUT   Groupindic_Pubres.GROUPINDICCurTyp)
                              RETURN NUMBER
           IS
           BEGIN
             OPEN GetSpesPs_id.RefGROUPINDIC FOR
               SELECT C.Id_Groupindic, C.Libelle,
                      C.Type_
               FROM   GROUPINDIC C, GROUPINDICINDIC_REL B, SPEINDIC A
               WHERE  (A.ID_SPECIALITE = GetSpesPs_id.Id_Specialite OR GetSpesPs_id.Id_Specialite IS NULL)
                 AND  B.ID_T_INDIC = A.ID_T_INDIC
                 AND  C.ID_GROUPINDIC = B.ID_GROUPINDIC;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSpesPs_id%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetSpesPs_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSpeTheras_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetSpeTheras_id ( Id_Specialite         IN    Specialite_Pubres.Id_Specialite               DEFAULT NULL,
                                    RefDICOCOMCLASSIRIS   OUT   Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp2,
                                    Ret                   OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetSpeTheras_id ( Id_Specialite, RefDICOCOMCLASSIRIS);
           END GetSpeTheras_id;
           FUNCTION GetSpeTheras_id ( Id_Specialite         IN    Specialite_Pubres.Id_Specialite                DEFAULT NULL,
                                   RefDICOCOMCLASSIRIS   OUT   Dicocomclassiris_Pubres.DICOCOMCLASSIRISCurTyp2)
                                 RETURN NUMBER
           IS
           BEGIN
             OPEN GetSpeTheras_id.RefDICOCOMCLASSIRIS FOR
               SELECT B.ID_DICOCOMCLASSIRIS ID_DICOCOMCLASSIRIS, B.LIBELLE LIBELLE, C.ID_DICOCOMCLASSIRIS DIC_ID_DICOCOMCLASSIRIS, C.LIBELLE DIC_LIBELLE, B.ORDRE
               FROM   DICOCOMCLASSIRIS C,DICOCOMCLASSIRIS B, SPECLASSIRIS A
               --FROM   DICOCOMCLASSIRIS C,DICOCOMCLASSIRIS B, SPEINDIC A
               WHERE  (A.ID_SPECIALITE = GetSpeTheras_id.Id_Specialite OR GetSpeTheras_id.Id_Specialite IS NULL)
                 AND  B.ID_DICOCOMCLASSIRIS = A.ID_DICOCOMCLASSIRIS
                 AND  C.ID_DICOCOMCLASSIRIS = B.DIC_ID_DICOCOMCLASSIRIS;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSpeTheras_id%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetSpeTheras_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSpeIamClasses_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetSpeIamClasses_id ( ID_SPECIALITE   IN    Specialite_Pubres.Id_SPECIALITE      DEFAULT NULL,
                                        RefIAMCLASS     OUT   Iamclass_Pubres.IAMCLASSCurTyp,
                                        Ret             OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetSpeIamClasses_id ( ID_SPECIALITE, RefIAMCLASS);
           END GetSpeIamClasses_id;
           FUNCTION GetSpeIamClasses_id ( ID_SPECIALITE   IN    Specialite_Pubres.Id_SPECIALITE       DEFAULT NULL,
                                       RefIAMCLASS     OUT   Iamclass_Pubres.IAMCLASSCurTyp)
                                     RETURN NUMBER
           IS
           BEGIN
             -- ----------------------------------------------------
             -- Modification de la requete suivante qui ne semble
             -- par répondre aux psécification de la documentation
             -- Cette requête a été checké a cause des performances
             -- Auteur Modification : AgdF - Jean-michel JACQUELIN
             -- Date modification   : 19!12/2000
             -- ----------------------------------------------------

/*           Open GetSpeIamClasses_id.RefIAMCLASS For
               Select   e.ID_IAMCLASSE, e.CLASSE, e.REMARQUE, e.DCREAT, e.DMODIF, e.DREVIS
               From     specialite a, specialite_iamclass b, iamclasse_iamcouple c, iamclass d, iamclass e
               Where    (a.ID_SPECIALITE = GetSpeIamClasses_id.Id_Specialite or GetSpeIamClasses_id.Id_Specialite Is Null)
                 And    b.ID_SPECIALITE = a.id_specialite
                 And    (c.ID_IAMCOUPLE In ( Select id_iamcouple
                                             From iamclasse_iamcouple
                                             Where id_iamclasse = b.ID_IAMCLASSE)
                 And    c.ID_IAMCLASSE <> b.ID_IAMCLASSE)
                 And    d.ID_IAMCLASSE = b.ID_IAMCLASSE
                 And    e.ID_IAMCLASSE = c.ID_IAMCLASSE
               Order By 2;
*/
               OPEN GetSpeIamClasses_id.RefIAMCLASS FOR
                 SELECT   b.ID_IAMCLASSE, b.CLASSE, b.REMARQUE, b.DCREAT, b.DMODIF, b.DREVIS
                 FROM     SPECIALITE_IAMCLASS a, IAMCLASS b
                 WHERE    a.ID_SPECIALITE = GetSpeIamClasses_id.Id_Specialite
                   AND    b.ID_IAMCLASSE  = a.ID_IAMCLASSE
                 ORDER BY 2;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSpeIamClasses_id%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetSpeIamClasses_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSpeDoc_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetSpeDoc_id ( ID_SPECIALITE   IN    Specialite_Pubres.Id_SPECIALITE        DEFAULT NULL,
                                  RefSpesuiviSgml      OUT   Spesuivisgml_Pubres.SPESUIVISGMLCurTypR,
                                 Ret             OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetSpeDoc_id ( ID_SPECIALITE, RefSpesuiviSgml);
           END GetSpeDoc_id;
           FUNCTION GetSpeDoc_id ( ID_SPECIALITE   IN    Specialite_Pubres.Id_SPECIALITE         DEFAULT NULL,
                                 RefSpesuiviSgml      OUT   Spesuivisgml_Pubres.SPESUIVISGMLCurTypR)
                              RETURN NUMBER
           IS
           BEGIN
            OPEN GetSpeDoc_id.RefSpesuiviSgml FOR
               SELECT  ID_SPESUIVISGML, c.ID_SPEPRESENTATION, MONOGRAPHIE
               FROM    specialite a, spesuivisgml c, spepresentation b
               WHERE   a.ID_SPECIALITE = GetSpeDoc_id.Id_Specialite
               and     a.id_specialite = b.id_specialite
               and     b.ID_SPEPRESENTATION = c.ID_SPEPRESENTATION;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSpeDoc_id%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetSpeDoc_id;
  -- -----------------------------------------------------------------------------------
  -- Fonction de sélection  : GetSpeSubsts_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- Modification #2 : Création. Les substances ramenées correspondent à des spécialités
  --                   répondant au critère Id_Specialite
  -- -----------------------------------------------------------------------------------
           PROCEDURE GetSpeSubsts_id ( Id_Specialite   IN    Specialite_Pubres.Id_Specialite      DEFAULT NULL,
                                    RefT_SUB        OUT   T_Sub_Pubres.T_SUBCurTyp,
                                    Ret             OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetSpeSubsts_id ( Id_Specialite, RefT_SUB);
           END GetSpeSubsts_id;
           FUNCTION GetSpeSubsts_id ( Id_Specialite   IN    Specialite_Pubres.Id_Specialite       DEFAULT NULL,
                                   RefT_SUB        OUT   T_Sub_Pubres.T_SUBCurTyp)
                                 RETURN NUMBER
           IS
           BEGIN
             OPEN GetSpeSubsts_id.RefT_SUB FOR
			 SELECT DISTINCT b.ID_T_SUB,
                       a.LIBELLE,
                       a.HOMEOPATHIE,
                       a.TEXTE,
                       a.DC,
                       a.COMPLEMENTINDEXSUB,
							         BCONSTACTIF,
							         NATUREEXCIP,
                       b.quantite, b.unite, b.Tetiere
			 FROM  t_SUB a, SPECONSTITUANT b, SPECOMPO c, SPECIALITE d
			 WHERE  b.ID_SPECOMPO   = c.ID_SPECOMPO
			 AND  c.ID_SPECIALITE = d.ID_SPECIALITE
			 and  a.ID_T_SUB = b.ID_T_SUB
			 AND  d.ID_SPECIALITE = GetSpeSubsts_id.Id_Specialite
             ORDER BY  BCONSTACTIF desc, a.libelle;

             /*  SELECT DISTINCT a.ID_T_SUB,
                               a.LIBELLE,
                               a.HOMEOPATHIE,
                               a.TEXTE,
                               a.DC,
                               a.COMPLEMENTINDEXSUB
               FROM            T_SUB a
               WHERE           a.ID_T_SUB IN ( SELECT b.ID_T_SUB
                                               FROM   SPECONSTITUANT b, SPECOMPO c, SPECIALITE d
                                               WHERE  b.ID_SPECOMPO   = c.ID_SPECOMPO
                                                 AND  c.ID_SPECIALITE = d.ID_SPECIALITE
                                                 AND  d.ID_SPECIALITE = GetSpeSubsts_id.Id_Specialite )
               ORDER BY        a.ID_T_SUB;*/

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSpeSubsts_id%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetSpeSubsts_id;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSpeEphmras_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           PROCEDURE GetSpeEphmras_id ( Id_Specialite         IN    Specialite_Pubres.Id_Specialite               DEFAULT NULL,
                                    RefDICOT_EPHMRA       OUT   Dicot_Ephmra_Pubres.DICOT_EPHMRACurTyp,
                                    Ret                   OUT   NUMBER)
           IS
           BEGIN
                 Ret := GetSpeEphmras_id ( Id_Specialite, RefDICOT_EPHMRA);
           END GetSpeEphmras_id;
           FUNCTION GetSpeEphmras_id ( Id_Specialite         IN    Specialite_Pubres.Id_Specialite                DEFAULT NULL,
                                   RefDICOT_EPHMRA        OUT   Dicot_Ephmra_Pubres.DICOT_EPHMRACurTyp)
                                 RETURN NUMBER
           IS
           BEGIN
             OPEN GetSpeEphmras_id.RefDICOT_EPHMRA FOR
             /*  SELECT B.ID_DICOT_EPHMRA ID_DICOT_EPHMRA, null DIC_ID_DICOT_EPHMRA, c.LIBELLE LIBELLE, B.ORDRE
               FROM   DICOT_EPHMRA_ETENDUE C,DICOT_EPHMRA B, SPEPHARMACODYNAMIE A
               WHERE  A.ID_SPECIALITE = GetSpeEphmras_id.Id_Specialite
			     AND  A.CODEEPHMRA = B.LIBELLE
                 AND  B.ID_DICOT_EPHMRA = C.ID_DICOT_EPHMRA;*/
     SELECT a.ID_DICOEPHMRA, null DIC_ID_DICOEPHMRA, LIBELLE, ORDRE
     FROM   DICOEPHMRA a, spepresentation b, specialite c
     where  c.id_specialite = b.id_specialite
      and   a.id_dicoephmra = b.id_dicoephmra
      and  c.ID_SPECIALITE = GetSpeEphmras_id.Id_Specialite;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSpeEphmras_id%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
           END GetSpeEphmras_id;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSpeATCs_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------


		    Procedure GetSpeATCs_id ( Id_Specialite         In    SPECIALITE_Pubres.Id_Specialite              Default Null,
                                    RefDICOT_ATC_IRIS       Out   DICOT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp2,
                                    Ret                   Out   Number)
			IS
			BEGIN
				 Ret := GetSpeATCs_id (Id_Specialite, RefDICOT_ATC_IRIS);
			END GetSpeATCs_id;
			FUNCTION GetSpeATCs_id ( Id_Specialite         In    SPECIALITE_Pubres.Id_Specialite              Default Null,
                                   RefDICOT_ATC_IRIS       Out   DICOT_ATC_IRIS_Pubres.DICOT_ATC_IRISCurTyp2)
								   RETURN Number
			IS
			BEGIN
				 OPEN GetSpeATCs_id.RefDICOT_ATC_IRIS FOR
				 	  SELECT a.ID_DICOT_ATC_IRIS, AVIDAL_CLASSE_ATC.FormatCodeDicot_atc_iris(a.LIBELLE) Code, AVIDAL_CLASSE_ATC.FormatLibDicot_atc_iris(a.LIBELLE) LIBELLE, c.ID_DICOT_ATC_IRIS DIC_ID_DICOT_ATC_IRIS, AVIDAL_CLASSE_ATC.FormatCodeDicot_atc_iris(c.LIBELLE) Dic_Code, AVIDAL_CLASSE_ATC.FormatLibDicot_atc_iris(c.LIBELLE) Dic_Libelle
					  FROM DICOT_ATC_IRIS a, SPEPHARMACODYNAMIE b, DICOT_ATC_IRIS c, DICOT_ATC_IRIS d
					  WHERE b.ID_SPECIALITE = GetSpeATCs_id.Id_Specialite
					    AND a.LIBELLE = b.ATC_IRIS
						AND c.DIC_ID_DICOT_ATC_IRIS IS NULL
						AND c.ID_DICOT_ATC_IRIS in (Select id_dicot_atc_iris
												    From Dicot_atc_iris
													Connect by prior dic_id_dicot_atc_iris = id_dicot_atc_iris
													Start with id_dicot_atc_iris = a.ID_DICOT_ATC_IRIS)
						AND d.DIC_ID_DICOT_ATC_IRIS(+) = c.ID_DICOT_ATC_IRIS
					 GROUP BY a.ID_DICOT_ATC_IRIS, a.LIBELLE, c.ID_DICOT_ATC_IRIS, c.LIBELLE;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSpeATCs_id%');
--         COMMIT;
-------------------------------------------------------------

				RETURN 1;
				EXCEPTION
						 WHEN OTHERS THEN
						 	  RETURN SQLCODE;
			END GetSpeATCs_id;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSpePEs_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------

	         Procedure GetSpePEs_id ( Id_Specialite         In    SPECIALITE_Pubres.Id_Specialite              Default Null,
                                    Terme                 In    VARCHAR2,
                                    Ref_SpePE             Out   SPEPE_Pubres.Spepecurtyp,
                                    Ret                   Out   Number)
           Is
           Begin
                 Ret := GetSpePEs_id ( Id_Specialite, Terme, Ref_SpePE);
           End GetSpePEs_id;
           Function GetSpePEs_id ( Id_Specialite         In    SPECIALITE_Pubres.Id_Specialite              Default Null,
                                    Terme                 In    VARCHAR2,
                                    Ref_SpePE             Out   SPEPE_Pubres.Spepecurtyp)
                              Return Number
           Is
           Begin


        IF GetSpePEs_id.terme is not null THEN
         OPEN GetSpePEs_id.Ref_SpePE For
           Select a.id_Specialite,
              a.Id_SpePE,
              a.TERME,
              a.ORIGINEOVP,
              a.DATEORIGOVP,
              a.ARGUMENTAIREAUTEUR,
              a.COMMAMM,
              a.ORDRE
              FROM  SPEPE a, Specialite b
              WHERE b.id_Specialite = GetSpePEs_id.id_specialite
              AND   a.Id_specialite = b.Id_specialite
              AND   a.pertinentovp = 0
              AND  UPPER(TRANSLATE(a.Terme,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
							LIKE  UPPER(TRANSLATE(GetSpePEs_id.Terme,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
              ORDER BY Ordre;
        ELSE
       OPEN GetSpePEs_id.Ref_SpePE For
           Select a.id_Specialite,
              a.Id_SpePE,
              a.TERME,
              a.ORIGINEOVP,
              a.DATEORIGOVP,
              a.ARGUMENTAIREAUTEUR,
              a.COMMAMM,
              a.ORDRE
              FROM  SPEPE a, Specialite b
              WHERE b.id_Specialite = GetSpePEs_id.id_specialite
              AND   a.Id_specialite = b.Id_specialite
              AND   a.pertinentovp = 0
              ORDER BY Ordre;
         END IF;


-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSpePEs_id%');
--         COMMIT;
-------------------------------------------------------------

             Return 1;
             EXCEPTION
               When Others Then
                 Return SQLCODE;
           End GetSpePEs_id;


-- ====================================================================
-- Fin de package
-- ====================================================================
END Avidal_Specialite;
/
CREATE OR REPLACE package AVIDAL_STATS is

  -- Author  : MALIKLA
  -- Created : 04/12/2002 16:16:54
  -- Purpose : Exécution des index et statistiques
      PROCEDURE Suppr_Creer_index(cod_trt OUT  Varchar2);
  -- Public type declarations


end AVIDAL_STATS;
/

CREATE OR REPLACE package body AVIDAL_STATS is
  -- Function and procedure implementations
   PROCEDURE Suppr_Creer_index (cod_trt OUT  Varchar2) is
   v_sql  varchar(2000);
   nb     number;
   begin

-- Table speconstituant
select count(*) into nb from user_indexes where upper(index_name) = upper('Ix_denomsub');
if (nb = 0)  then
 v_sql := 'create index Ix_denomsub on speconstituant(denomsub) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

select count(*) into nb from user_indexes where upper(index_name) = upper('Ix_id_specompo');
if (nb = 0)  then
 v_sql := 'create index Ix_id_specompo on speconstituant(ID_SPECOMPO) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

-- Table speindic
select count(*) into nb from user_indexes where upper(index_name) = upper('Ix_Id_dicocomclassiris');
if (nb = 0)  then
 v_sql := 'create index Ix_Id_dicocomclassiris on speindic(Id_dicocomclassiris) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

-- Table spelabs_rel
select count(*) into nb from user_indexes where upper(index_name) = upper('Ix_Id_laboratoire');
if (nb = 0)  then
 v_sql := 'create index Ix_Id_laboratoire on spelabs_rel(Id_laboratoire) TABLESPACE INDX';
 execute immediate v_sql;
 end if;
-- Table spepresentation
select count(*) into nb from user_indexes where upper(index_name) = upper('IX_ID_SPECIALITE_1');
if (nb = 0)  then
 v_sql := 'create index IX_ID_SPECIALITE_1 on spepresentation(ID_SPECIALITE) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

select count(*) into nb from user_indexes where upper(index_name) = upper('IX_UCD');
if (nb = 0)  then
 v_sql := 'create index IX_UCD on spepresentation(UCD) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

select count(*) into nb from user_indexes where upper(index_name) = upper('IX_CIP');
if (nb = 0)  then
 v_sql := 'create index IX_CIP on spepresentation(CIP) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

select count(*) into nb from user_indexes where upper(index_name) = upper('IX_CIPREFERANT');
if (nb = 0)  then
 v_sql := 'create index IX_CIPREFERANT on spepresentation(CIPREFERANT) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

-- Table SPEEVTPRESENTATION
select count(*) into nb from user_indexes where upper(index_name) = upper('IX_ID_SPEPRESENTATION');
if (nb = 0)  then
 v_sql := 'create index IX_ID_SPEPRESENTATION on SPEEVTPRESENTATION(ID_SPEPRESENTATION) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

-- Table SPECIALITE_IAMCLASS
select count(*) into nb from user_indexes where upper(index_name) = upper('IX_ID_IAMCLASSE');
if (nb = 0)  then
 v_sql := 'create index IX_ID_IAMCLASSE on SPECIALITE_IAMCLASS(ID_IAMCLASSE) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

-- Table COUPLETERMETERME
select count(*) into nb from user_indexes where upper(index_name) = upper('IX_ID_T_SUB_F_1');
if (nb = 0)  then
 v_sql := 'create index IX_ID_T_SUB_F_1 on COUPLETERMETERME (ID_T_SUB_F) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

select count(*) into nb from user_indexes where upper(index_name) = upper('IX_ID_T_SUB_P_1');
if (nb = 0)  then
 v_sql := 'create index IX_ID_T_SUB_P_1 on COUPLETERMETERME (ID_T_SUB_P) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

-- Table T_SUB
select count(*) into nb from user_indexes where upper(index_name) = upper('IX_LIBELLE');
if (nb = 0)  then
 v_sql := 'create index IX_LIBELLE on T_SUB (LIBELLE) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

-- Table specompo
select count(*) into nb from user_indexes where upper(index_name) = upper('IX_ID_specialite');
if (nb = 0)  then
 v_sql := 'create index IX_ID_specialite on specompo(id_specialite) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

-- Table RMC_THE
select count(*) into nb from user_indexes where upper(index_name) = upper('IX_ID_RMC_THE');
if (nb = 0)  then
 v_sql := 'create index IX_ID_RMC_THE on RMC_THE (ID) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

-- Table RMC_CLE
select count(*) into nb from user_indexes where upper(index_name) = upper('IX_RMC_CLE_TYPE_IDE');
if (nb = 0)  then
 v_sql := 'create index IX_RMC_CLE_TYPE_IDE on RMC_CLE (TYPE_IDE, CLE_LIB, CLE_IDE) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

-- Table LABOSAUMON
select count(*) into nb from user_indexes where upper(index_name) = upper('IX_LABORATOIRE');
if (nb = 0)  then
 v_sql := 'create index IX_LABORATOIRE on LABOSAUMON (LABORATOIRE asc) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

-- Table SPECIALITE
select count(*) into nb from user_indexes where upper(index_name) = upper('IX_DENOMSPE');
if (nb = 0)  then
 v_sql := 'create index IX_DENOMSPE on SPECIALITE (denomspe) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

select count(*) into nb from user_indexes where upper(index_name) = upper('IX_IDTYPESPE');
if (nb = 0)  then
 v_sql := 'create index IX_IDTYPESPE on SPECIALITE (idtypespe) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

select count(*) into nb from user_indexes where upper(index_name) = upper('IX_DENOMSPE_TYPE');
if (nb = 0)  then
 v_sql := 'create index IX_DENOMSPE_TYPE on SPECIALITE (idtypespe,denomspe) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

-- Table T_SUB_ETENDUE
select count(*) into nb from user_indexes where upper(index_name) = upper('UNICITE_LIBELLEANGLAIS');
if (nb = 0)  then
 v_sql := 'create index UNICITE_LIBELLEANGLAIS on T_SUB_ETENDUE (LIBELLEANGLAIS) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

select count(*) into nb from user_indexes where upper(index_name) = upper('UNICITE_LIBELLEFRANCAIS');
if (nb = 0)  then
 v_sql := 'create index UNICITE_LIBELLEFRANCAIS on T_SUB_ETENDUE (LIBELLEFRANCAIS) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

select count(*) into nb from user_indexes where upper(index_name) = upper('UNICITE_MATRICULE');
if (nb = 0)  then
 v_sql := 'create index UNICITE_MATRICULE on T_SUB_ETENDUE (MATRICULE) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

-- Table T_SUB_PARENT
select count(*) into nb from user_indexes where upper(index_name) = upper('IX_ID_T_SUB_F');
if (nb = 0)  then
 v_sql := 'create index IX_ID_T_SUB_F on T_SUB_PARENT (ID_T_SUB_F) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

select count(*) into nb from user_indexes where upper(index_name) = upper('IX_ID_T_SUB_P');
if (nb = 0)  then
 v_sql := 'create index IX_ID_T_SUB_P on T_SUB_PARENT (ID_T_SUB_P) TABLESPACE INDX';
 execute immediate v_sql;
 end if;

 SYS.DBMS_UTILITY.ANALYZE_SCHEMA('SA','ESTIMATE',10000);

      cod_trt := 'ORA-00000 : Normal, Successful completion';

        EXCEPTION
         WHEN OTHERS THEN
         Suppr_Creer_index.Cod_Trt := SUBSTR(SQLERRM,1,255);
    end;
end AVIDAL_STATS;
/
CREATE OR REPLACE PACKAGE AVIDAL_SUBSTANCES AS

  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

           Procedure GetSubsts_txt ( Libelle         In    T_SUB_Pubres.LIBELLE Default Null,
                                 Typ             In    Number,
                                 RefT_SUB        Out   T_SUB_Pubres.T_SUBHasChildCurTypHomeo2,
                                 Ret             Out   Number);
           Procedure GetSubst_id ( IdSubst     In    T_SUB_Pubres.ID_T_SUB Default Null,
                                RefT_SUB    Out   T_SUB_Pubres.T_SUBHasChildCurTyp,
                                Ret         Out   Number);
           Procedure GetSubstFull_id ( IdSubst     In    T_SUB_Pubres.ID_T_SUB Default Null,
                                  RefT_SUB    Out   T_SUB_Pubres.T_SUBHasChildFullCurTyp,
                                  Ret         Out   Number);
           Procedure GetSubstAncester_id ( IdSubst    In    T_SUB_Pubres.ID_T_SUB Default Null,
                                        RefT_SUB   Out   T_SUB_Pubres.T_SUBHasChildCurTyp,
                                        Ret        Out   Number);
           Procedure GetSubstParent_id ( IdSubst    In    T_SUB_Pubres.ID_T_SUB Default Null,
                                      RefT_SUB   Out   T_SUB_Pubres.T_SUBHasChildCurTyp,
                                      Ret        Out   Number);
           Procedure GetSubstChild_id ( IdSubst    In    T_SUB_Pubres.ID_T_SUB Default Null,
                                     RefT_SUB   Out   T_SUB_Pubres.T_SUBHasChildCurTyp,
                                     Ret        Out   Number);
           Procedure GetSubstSpes_id ( IdSubst         In    T_SUB_Pubres.ID_T_SUB Default Null,
                                    RefSPECIALITE   Out   SPECIALITE_Pubres.SPECIALITECurTyp,
                                    Ret             Out   Number);
           Procedure GetSubstsParentMV_id ( IdSubst    In    T_SUB_Pubres.ID_T_SUB,
                                         RefT_SUB   Out   T_SUB_Pubres.T_SUBHasChildCurTypHomeoRef,
                                         Ret        Out   Number);
           Procedure GetSubstsDopantes_txt ( Libelle         In    T_SUB_Pubres.DENOMSUB Default Null,
                                 Typ             In    Number,
                                 RefT_SUBDopant        Out   T_SUB_Pubres.T_SUB_DopantCurTyp,
                                 Ret             Out   Number);
   -- =====================================================================
   -- Function             : GetSubsts
   -- Purpose              :
   -- Parameters In        : GetSubsts
   -- Parameters Out   :
   -- Tables utilisees :
   -- History              : Created  by N.Q. 10 Oct 2000
   --                      : Modified by M.R. 12 Mar 2001
   --                      : Modified by M.R. 21 Mar 2001
   -- =====================================================================
           Function GetSubsts_txt ( Libelle         In    T_SUB_Pubres.LIBELLE                Default Null,
                                Typ             In    Number,
                                RefT_SUB        Out   T_SUB_Pubres.T_SUBHasChildCurTypHomeo2)
                              Return Number;
   -- =====================================================================
   -- Function             : GetSubst
   -- Purpose              :
   -- Parameters In        : IdSubst
   -- Parameters Out   :
   -- Tables utilisees :
   -- History              : Created by E.O. 10 Oct 2000
   -- =====================================================================
           Function GetSubst_id ( IdSubst    In    T_SUB_Pubres.ID_T_SUB  Default Null,
                               RefT_SUB   Out   T_SUB_Pubres.T_SUBHasChildCurTyp)
                             Return Number;
            Pragma Restrict_References(GetSubst_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function             : GetSubstFull
   -- Purpose              :
   -- Parameters In        : IdSubst
   -- Parameters Out   :
   -- Tables utilisees :
   -- History              : Created by E.A. 25 Mar 2001
   -- =====================================================================
           Function GetSubstFull_id ( IdSubst    In    T_SUB_Pubres.ID_T_SUB  Default Null,
                                 RefT_SUB   Out   T_SUB_Pubres.T_SUBHasChildFullCurTyp)
                               Return Number;
            Pragma Restrict_References(GetSubst_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function             : GetSubstAncester
   -- Purpose              :
   -- Parameters In        : IdSubst
   -- Parameters Out   :
   -- Tables utilisees :
   -- History              : Created by E.O. 10 Oct 2000
   -- =====================================================================
           Function GetSubstAncester_id ( IdSubst    In    T_SUB_Pubres.ID_T_SUB   Default Null,
                                       RefT_SUB   Out   T_SUB_Pubres.T_SUBHasChildCurTyp)
                                     Return Number;
            Pragma Restrict_References(GetSubstAncester_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function             : GetSubstParent
   -- Purpose              :
   -- Parameters In        :
   -- Parameters Out   :
   -- Tables utilisees :
   -- History              : Created by N.Q. 10 Oct 2000
   -- =====================================================================
           Function GetSubstParent_id ( IdSubst    In    T_SUB_Pubres.ID_T_SUB   Default Null,
                                     RefT_SUB   Out   T_SUB_Pubres.T_SUBHasChildCurTyp)
                                   Return Number;
            Pragma Restrict_References(GetSubstParent_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function             : GetSubstChild
   -- Purpose              :
   -- Parameters In        :
   -- Parameters Out   :
   -- Tables utilisees :
   -- History              : Created by N.Q. 10 Oct 2000
   -- =====================================================================
           Function GetSubstChild_id ( IdSubst    In    T_SUB_Pubres.ID_T_SUB   Default Null,
                                    RefT_SUB   Out   T_SUB_Pubres.T_SUBHasChildCurTyp)
                                  Return Number;
            Pragma Restrict_References(GetSubstParent_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function             : GetSubstSpes
   -- Purpose              :
   -- Parameters In        :
   -- Parameters Out   :
   -- Tables utilisees :
   -- History              : Created by N.Q. 10 Oct 2000
   --                      : Modified by M.R. 12 Mar 2001
   -- =====================================================================
           Function GetSubstSpes_id ( IdSubst         In  T_SUB_Pubres.ID_T_SUB   Default Null,
                                   RefSPECIALITE   Out SPECIALITE_Pubres.SPECIALITECurTyp)
                                 Return Number;
            Pragma Restrict_References(GetSubstSpes_id,WNDS,WNPS,RNPS);
   -- =====================================================================
   -- Function             : GetSubst
   -- Purpose              :
   -- Parameters In        :
   -- Parameters Out   :
   -- Tables utilisees :
   -- History              : Created by M.R. 13 Mar 2001
   -- =====================================================================
           Function GetSubstsParentMV_id ( IdSubst     In    T_SUB_Pubres.ID_T_SUB,
                                        RefT_SUB    Out   T_SUB_Pubres.T_SUBHasChildCurTypHomeoRef)
                                       Return Number;

           Function Getsubstsdopantes_Txt ( Libelle         In    T_SUB_Pubres.DENOMSUB                Default Null,
                                Typ             In    Number,
                                RefT_SUBDopant        Out   T_SUB_Pubres.T_SUB_DopantCurTyp)
                              Return Number;
-- ====================================================================
-- Fin de package
-- ====================================================================
End AVIDAL_SUBSTANCES;
/

CREATE OR REPLACE PACKAGE BODY AVIDAL_SUBSTANCES AS
-- ========================================================================================
-- Script      : AVIDAL_SUBSTRANCES    Type : Package
-- Objet       : Ressources Select tables
-- Owner       : VIDAL
-- Création    : 09/10/2000
-- Auteur      : AGDF (2000) from Data to Information
-- Généré par  : Odille Emmanuel
-- Modifié par : Manuel Rouault - 12/03/2001 - Modification #1 : Modif. de GetSubsts
--                                           - Modification #2 : Création de GetSubstsPere
--                                                               Création GetSubstsParentMV
--                                           - Modification #3 : Modif. de GetSubstSpes
--             : Manuel Rouault - 21/03/2001 - Modification #4 : Modif. de GetSubsts
-- Généré par  : Manuel Rouault
-- ========================================================================================
-- --------------------------------------------------------------------------------------------
  -- Fonction de sélection  : GetSubstsPere_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- Modification #2 : Création de GetSubstsPere. Fonction permettant
  --                   de récupérer :
  --                 * les substances pères d'une listes de substances et/ou de leurs synonymes
  --                 * les substances pères indexées MEDIAVIDAL d'une listes de substances
  --                   et/ou de leurs synonymes
  --                   [ Fonction appelée dans GetSubstsParentMV ]
  -- ------------------------------------------------------------------------------------------
           Function GetSubstsPere ( ListeIdSubst  In    Varchar2,
                                    RefId_SUB     Out   T_SUB_Pubres.T_SUBPereCurRef,
                                    RefT_SUB      Out   T_SUB_Pubres.T_SUBHasChildCurTypHomeoRef)
                                  Return Number
           Is
           Begin
             Open GetSubstsPere.RefId_SUB For
              -- récupération des substances pères de la liste de substances (+synonymes) passée en entrée.
              'Select Distinct  a.ID_T_SUB_P
               From             COUPLETERMETERME a
               Connect By       a.ID_T_SUB_F = a.ID_T_SUB_P
               Start With       a.ID_T_SUB_F in ('||GetSubstsPere.ListeIdSubst||')
              Union
               Select Distinct  a.ID_T_SUB_P
               From             COUPLETERMETERME a
               Where            a.ID_T_SUB_F in ( Select Distinct  b.ID_T_SYNONYSUB
                                                  From             COUPLETERMESYNONYME b
                                                  Where            ID_T_SUB in ('||GetSubstsPere.ListeIdSubst||')
                                                )';
             Open GetSubstsPere.RefT_SUB For
              -- récupération des substances pères MV de la liste de substances (+synonymes) passée en entrée.
              'Select Distinct a.ID_T_SUB,
                               decode(a.HOMEOPATHIE,''F'',a.LIBELLE,a.LIBELLE||'' [Homéo]'') LIBELLE,
                               a.HOMEOPATHIE,
                               a.TEXTE,
                               a.DC,
                               a.COMPLEMENTINDEXSUB,
                               1 HasChild
               From            COUPLETERMETERME b, T_SUB a, INDEXSUB_REL c
               Where           a.ID_T_SUB     = b.ID_T_SUB_P
                 And           b.ID_T_SUB_F   in ('||GetSubstsPere.ListeIdSubst||')
                 And           c.ID_T_SUB     = a.ID_T_SUB
                 And           c.ID_TYPEINDEX = 1
              Union
               Select Distinct a.ID_T_SUB,
                               decode(a.HOMEOPATHIE,''F'',a.LIBELLE,a.LIBELLE||'' [Homéo]'') LIBELLE,
                               a.HOMEOPATHIE,
                               a.TEXTE,
                               a.DC,
                               a.COMPLEMENTINDEXSUB,
                               1 HasChild
               From            COUPLETERMESYNONYME c, T_SUB a, COUPLETERMETERME b, INDEXSUB_REL d
               Where           a.ID_T_SUB       = b.ID_T_SUB_P
                 And           b.ID_T_SUB_F     = c.ID_T_SYNONYSUB
                 And           c.ID_T_SUB       in ('||GetSubstsPere.ListeIdSubst||')
                 And           d.ID_T_SUB       = a.ID_T_SUB
                 And           d.ID_TYPEINDEX   = 1
              Order By 2';

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSubstsPere%');
--         COMMIT;
-------------------------------------------------------------

             Return 1;
             EXCEPTION
               When Others Then
                 Return SQLCODE;
           End GetSubstsPere;

  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -- ------------------------------------------------------------------------------------------
  -- Fonction de sélection  : GetSubsts_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- Modification #1 : Désormais, on ne ramène plus que les substances marquées MédiaVIDAL
  --                  et la mention [Homéo] apparait dans le libellé des substances de
  --                  sortie ayant leur champ "homéopathie" à VRAI
  -- Modification #4 : Ajout du paramètre "typ" : * si typ = 0 => recherche excipients
  --                                              * si typ = 1 => recherche substances actives
  --                                              * si typ = 2 => recherche toutes substances
  -- ------------------------------------------------------------------------------------------
      Procedure GetSubsts_txt( Libelle      In   T_SUB_Pubres.LIBELLE                   Default Null,
                                 Typ          In   Number,
                                 RefT_SUB     Out  T_SUB_Pubres.T_SUBHasChildCurTypHomeo2,
                                 Ret          Out  Number)
           Is
           Begin
                 Ret := GetSubsts_txt ( Libelle, Typ, RefT_SUB);
           End GetSubsts_txt;
           Function GetSubsts_txt ( Libelle      In   T_SUB_Pubres.LIBELLE               Default Null,
                                Typ          In   Number,
                                RefT_SUB     Out  T_SUB_Pubres.T_SUBHasChildCurTypHomeo2)
                              Return Number
           Is
           Begin
             If ( GetSubsts_txt.Typ = 0 ) Then
               -- on ne ramène que les excipients ( bconstactif = 0 dans table speconstituant )
               Open GetSubsts_txt.RefT_SUB For
                 -- info MédiaVidal dans table INDEXSUB_REL (champ ID_TYPEINDEX à 0)
                 --on ramène les substances correspondantes
              select  Distinct a.ID_T_SUB,
                                 decode(HOMEOPATHIE,'F',a.LIBELLE,a.LIBELLE||' [Homéo]') LIBELLE,
                                 HOMEOPATHIE,
                                 TEXTE,
                                 DC,
                                 COMPLEMENTINDEXSUB,
                                 decode(a.iD_T_SUB, null, 0, 1) HasChild,
                                 0 as Bconstactif from t_sub a, t_sub_complement b
						  where  a.id_t_sub = b.id_t_sub
						  and    a.id_t_sub in
                                 (select id_t_sub_p from t_sub_parent where ouvrage = 1)
                            and b.rolecompoherite in (2,3)
						    and UPPER(TRANSLATE(a.LIBELLE,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
							 LIKE UPPER(TRANSLATE(GetSubsts_txt.Libelle,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))

	UNION
	  		select Distinct b.ID_T_SUB,
                            a.libelle||' = '||decode(b.HOMEOPATHIE,'F',b.LIBELLE,b.LIBELLE||' [Homéo]') LIBELLE,
                            b.HOMEOPATHIE,
                            a.TEXTE,
                            a.DC,
                            COMPLEMENTINDEXSUB,
                            decode(b.ID_T_SUB, null, 0, 1) HasChild,
                            0 as Bconstactif from t_synonysub a, t_sub b,
							coupletermesynonyme c, t_sub_complement d
							where  c.id_t_sub = b.id_t_sub
                            and c.id_t_synonysub = a.id_t_synonysub
							and d.ID_T_SUB = b.ID_T_SUB
						    and UPPER(TRANSLATE(a.LIBELLE,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
							 LIKE UPPER(TRANSLATE(GetSubsts_txt.Libelle,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
						    and d.rolecompoherite in (2,3)
						--	and indexMV = 1
                     	 and b.id_t_sub in (select id_t_sub_p from t_sub_parent where ouvrage = 1)
						                   -- and bconstactif = 0)

                Order By 2;

             ElsIf ( GetSubsts_txt.Typ = 1 ) Then
               -- on ne ramène que les substances actives ( bconstactif = 1 dans table speconstituant )
               Open GetSubsts_txt.RefT_SUB For
                 -- info MédiaVidal dans table INDEXSUB_REL (champ ID_TYPEINDEX à 1)
                 -- on ramène les substances correspondantes
	   /*	select Distinct ID_T_SUB,
                        decode(HOMEOPATHIE,'F',LIBELLE,LIBELLE||' [Homéo]') LIBELLE,
                        HOMEOPATHIE,
                        TEXTE,
                        DC,
                        COMPLEMENTINDEXSUB,
                        decode(iD_T_SUB, null, 0, 1) HasChild,
                        1 as Bconstactif
		from t_sub
		where id_t_sub in
                       (select id_t_sub_p from t_sub_parent where ouvrage = 1
                                 and bconstactif = 1)
								 and UPPER(TRANSLATE(LIBELLE,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
							 LIKE UPPER(TRANSLATE(GetSubsts_txt.Libelle,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))*/
	select  Distinct a.ID_T_SUB,
                                 decode(HOMEOPATHIE,'F',a.LIBELLE,a.LIBELLE||' [Homéo]') LIBELLE,
                                 HOMEOPATHIE,
                                 TEXTE,
                                 DC,
                                 COMPLEMENTINDEXSUB,
                                 decode(a.iD_T_SUB, null, 0, 1) HasChild,
                                 1 as Bconstactif from t_sub a, t_sub_complement b
						  where  a.id_t_sub = b.id_t_sub
						  and    a.id_t_sub in
                                 (select id_t_sub_p from t_sub_parent where ouvrage = 1)
                                     --and bconstactif = 1)
						 -- and    b.indexMV = 1
                            and b.rolecompoherite in (1,3)
						    and UPPER(TRANSLATE(a.LIBELLE,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
							 LIKE UPPER(TRANSLATE(GetSubsts_txt.Libelle,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))

	UNION
	  		select Distinct b.ID_T_SUB,
                            a.libelle||' = '||decode(b.HOMEOPATHIE,'F',b.LIBELLE,b.LIBELLE||' [Homéo]') LIBELLE,
                            b.HOMEOPATHIE,
                            a.TEXTE,
                            a.DC,
                            COMPLEMENTINDEXSUB,
                            decode(b.ID_T_SUB, null, 0, 1) HasChild,
                            1 as Bconstactif from t_synonysub a, t_sub b,
							coupletermesynonyme c, t_sub_complement d
							where  c.id_t_sub = b.id_t_sub
                            and c.id_t_synonysub = a.id_t_synonysub
							and d.ID_T_SUB = b.ID_T_SUB
						    and UPPER(TRANSLATE(a.LIBELLE,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
							 LIKE UPPER(TRANSLATE(GetSubsts_txt.Libelle,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
						    and d.rolecompoherite in (1,3)
						--	and indexMV = 1
                     	 and b.id_t_sub in (select id_t_sub_p from t_sub_parent where ouvrage = 1)
						                   -- and bconstactif = 1)

		Order By 2;

             Elsif ( GetSubsts_txt.Typ = 2 ) Then
               -- on ramène toutes les substances qui entrent dans une compo sans distinction
               Open GetSubsts_txt.RefT_SUB For
                 -- info MédiaVidal dans table INDEXSUB_REL (champ ID_TYPEINDEX à 1)
                 -- on ramène les substances correspondantes

	select  Distinct a.ID_T_SUB,
                                 decode(HOMEOPATHIE,'F',a.LIBELLE,a.LIBELLE||' [Homéo]') LIBELLE,
                                 HOMEOPATHIE,
                                 TEXTE,
                                 DC,
                                 COMPLEMENTINDEXSUB,
                                 decode(a.iD_T_SUB, null, 0, 1) HasChild,
                                 '' as Bconstactif from t_sub a, t_sub_complement b
						  where  a.id_t_sub = b.id_t_sub
						  and    a.id_t_sub in
                                 (select id_t_sub_p from t_sub_parent where ouvrage = 1)
						 -- and    b.indexMV = 1
                           and b.rolecompoherite in (1,2,3)
						    and UPPER(TRANSLATE(a.LIBELLE,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
							 LIKE UPPER(TRANSLATE(GetSubsts_txt.Libelle,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))

	UNION
	  		select Distinct b.ID_T_SUB,
                            a.libelle||' = '||decode(b.HOMEOPATHIE,'F',b.LIBELLE,b.LIBELLE||' [Homéo]') LIBELLE,
                            b.HOMEOPATHIE,
                            a.TEXTE,
                            a.DC,
                            COMPLEMENTINDEXSUB,
                            decode(b.ID_T_SUB, null, 0, 1) HasChild,
                            '' as Bconstactif from t_synonysub a, t_sub b,
							coupletermesynonyme c, t_sub_complement d
							where  c.id_t_sub = b.id_t_sub
                            and c.id_t_synonysub = a.id_t_synonysub
							and d.ID_T_SUB = b.ID_T_SUB
						    and UPPER(TRANSLATE(a.LIBELLE,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
							 LIKE UPPER(TRANSLATE(GetSubsts_txt.Libelle,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
						    and d.rolecompoherite in (1,2,3)
						--	and indexMV = 1
                     	 and b.id_t_sub in (select id_t_sub_p from t_sub_parent where ouvrage = 1)


       Order By 2;
             End If;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSubsts_txt%');
--         COMMIT;
-------------------------------------------------------------

             Return 1;
             EXCEPTION
               When Others Then
                 Return SQLCODE;
           End GetSubsts_txt;

-- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSubst_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           Procedure GetSubst_id ( IdSubst    In    T_SUB_Pubres.ID_T_SUB             Default Null,
                                RefT_SUB   Out   T_SUB_Pubres.T_SUBHasChildCurTyp,
                                Ret        Out   Number)
           Is
           Begin
                 Ret := GetSubst_id( IdSubst, RefT_SUB);
           End GetSubst_id;
           Function GetSubst_id ( IdSubst    In  T_SUB_Pubres.ID_T_SUB                Default Null,
                               RefT_SUB   Out T_SUB_Pubres.T_SUBHasChildCurTyp)
                             Return Number
           Is
           Begin
             Open GetSubst_id.RefT_SUB For
               Select Distinct a.ID_T_SUB,
                               a.LIBELLE,
                               a.HOMEOPATHIE,
                               a.TEXTE,
                               a.DC,
                               a.COMPLEMENTINDEXSUB,
                               decode(b.ID_T_SUB_F, null, 0, 1) HasChild
               From            COUPLETERMETERME b, T_SUB a
               Where           a.ID_T_SUB = GetSubst_id.IdSubst
                 And           a.ID_T_SUB = b.ID_T_SUB_P(+)
               Order By        a.ID_T_SUB;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSubst_id%');
--         COMMIT;
-------------------------------------------------------------

             Return 1;
             EXCEPTION
               When Others Then
                 Return SQLCODE;
           End GetSubst_id;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSubstFull_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           Procedure GetSubstFull_id ( IdSubst    In    T_SUB_Pubres.ID_T_SUB             Default Null,
                                  RefT_SUB   Out   T_SUB_Pubres.T_SUBHasChildFullCurTyp,
                                  Ret        Out   Number)
           Is
           Begin
                 Ret := GetSubstFull_id( IdSubst, RefT_SUB);
           End GetSubstFull_id;
           Function GetSubstFull_id ( IdSubst    In  T_SUB_Pubres.ID_T_SUB                Default Null,
                                 RefT_SUB   Out T_SUB_Pubres.T_SUBHasChildFullCurTyp)
                               Return Number
           Is
           Begin
             Open GetSubstFull_id.RefT_SUB For
               Select Distinct a.ID_T_SUB,
                               a.LIBELLE,
                               a.HOMEOPATHIE,
                               a.TEXTE,
                               a.DC,
                               a.COMPLEMENTINDEXSUB,
                               decode(b.ID_T_SUB_F, null, 0, 1) HasChild,
                               d.BVALID,
                               d.BENCOURS,
                               d.NOMUSER,
                               d.CAS,
                               d.CASREPLACED,
                               d.NATURE,
                               d.CHIMIE,
                               d.LISTE,
                               d.COMMLISTE,
                               d.ORIGINEEXCIPIENT,
                               d.DCREAT,
                               d.DMODIF,
                               d.DREVIS,
                               '' OMS,
                               d.CLASSDOPANT
               From            COUPLETERMETERME b, T_SUB a, substance d
               Where           a.ID_T_SUB     = GetSubstFull_id.IdSubst
                 And           a.ID_T_SUB     = b.ID_T_SUB_P(+)
                 And           d.ID_T_SUB     = a.ID_T_SUB
--                 And           d.HOMEO        = a.HOMEOPATHIE
               Order By        a.ID_T_SUB;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSubstFull_id%');
--         COMMIT;
-------------------------------------------------------------

             Return 1;
             EXCEPTION
               When Others Then
                 Return SQLCODE;
           End GetSubstFull_id;

  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSubstAncester_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           Procedure GetSubstAncester_id ( IdSubst    In    T_SUB_Pubres.ID_T_SUB              Default Null,
                                        RefT_SUB   Out   T_SUB_Pubres.T_SUBHasChildCurTyp,
                                        Ret        Out   Number)
           Is
           Begin
                 Ret := GetSubstAncester_id( IdSubst, RefT_SUB);
           End GetSubstAncester_id;
           Function GetSubstAncester_id ( IdSubst    In    T_SUB_Pubres.ID_T_SUB               Default Null,
                                       RefT_SUB   Out   T_SUB_Pubres.T_SUBHasChildCurTyp)
                                     Return Number
           Is
           Begin
             Open GetSubstAncester_id.RefT_SUB For
               Select Distinct a.ID_T_SUB,
                               a.LIBELLE,
                               a.HOMEOPATHIE,
                               a.TEXTE,
                               a.DC,
                               a.COMPLEMENTINDEXSUB,
                               decode(c.ID_T_SUB_F, null, 0, 1) HasChild
               From            t_sub a, ( Select id_t_sub
                                          From   t_sub
                                         Minus
                                          Select id_t_sub_f
                                          From   coupletermeterme ) b, coupletermeterme c
               Where           a.id_t_sub = GetSubstAncester_id.IdSubst
                 And           a.id_t_sub = b.id_t_sub
                 And           a.id_t_sub = c.id_t_sub_p(+)
               Order By a.ID_T_SUB;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSubstAncester_id%');
--         COMMIT;
-------------------------------------------------------------

             Return 1;
             EXCEPTION
               When Others Then
                 Return SQLCODE;
           End GetSubstAncester_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSubstParent_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           Procedure GetSubstParent_id ( IdSubst    In    T_SUB_Pubres.ID_T_SUB              Default Null,
                                      RefT_SUB   Out   T_SUB_Pubres.T_SUBHasChildCurTyp,
                                      Ret        Out   Number)
           Is
           Begin
                 Ret := GetSubstParent_id ( IdSubst, RefT_SUB);
           End GetSubstParent_id;
           Function GetSubstParent_id ( IdSubst    In    T_SUB_Pubres.ID_T_SUB               Default Null,
                                     RefT_SUB   Out   T_SUB_Pubres.T_SUBHasChildCurTyp)
                                   Return Number
           Is
           Begin
             Open GetSubstParent_id.RefT_SUB For
               Select Distinct a.ID_T_SUB,
                               a.LIBELLE,
                               a.HOMEOPATHIE,
                               a.TEXTE,
                               a.DC,
                               a.COMPLEMENTINDEXSUB,
                               1 HasChild
               From            t_sub a, coupletermeterme b
               Where           b.ID_T_SUB_F = GetSubstParent_id.IdSubst
                 And           a.id_t_sub   = b.ID_T_SUB_P
               Order By a.ID_T_SUB;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSubstParent_id%');
--         COMMIT;
-------------------------------------------------------------

             Return 1;
             EXCEPTION
               When Others Then
                 Return SQLCODE;
           End GetSubstParent_id;
  -- ---------------------------------------------------------------
  -- Fonction de sélection  : GetSubstParent
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- --------------------------------------------------------------
           Procedure GetSubstChild_id ( IdSubst    In    T_SUB_Pubres.ID_T_SUB               Default Null,
                                     RefT_SUB   Out   T_SUB_Pubres.T_SUBHasChildCurTyp,
                                     Ret        Out   Number)
           Is
           Begin
                 Ret := GetSubstChild_id ( IdSubst, RefT_SUB);
           End GetSubstChild_id;
           Function GetSubstChild_id ( IdSubst    In    T_SUB_Pubres.ID_T_SUB                Default Null,
                                    RefT_SUB   Out   T_SUB_Pubres.T_SUBHasChildCurTyp)
                                  Return Number
           Is
           Begin
             Open GetSubstChild_id.RefT_SUB For
               Select Distinct a.ID_T_SUB,
                               a.LIBELLE,
                               a.HOMEOPATHIE,
                               a.TEXTE,
                               a.DC,
                               a.COMPLEMENTINDEXSUB,
                               1 HasChild
               From            t_sub a, coupletermeterme b
               Where           b.ID_T_SUB_P = GetSubstChild_id.IdSubst
                 And           a.id_t_sub   = b.ID_T_SUB_F
               Order By a.ID_T_SUB;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSubstChild_id%');
--         COMMIT;
-------------------------------------------------------------

             Return 1;
             EXCEPTION
               When Others Then
                 Return SQLCODE;
           End GetSubstChild_id;
  -- ---------------------------------------------------------------------------
  -- Fonction de sélection  : GetSubstSpes_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- Modification #3 : Les spécialités ramenées correspondent à des substances
  --                   ou à des filles de substances répondant au critère IdSubst
  -- ----------------------------------------------------------------------------
           Procedure GetSubstSpes_id ( IdSubst         In    T_SUB_Pubres.ID_T_SUB                Default Null,
                                    RefSPECIALITE   Out   SPECIALITE_Pubres.SPECIALITECurTyp,
                                    ReT             Out   Number)
           Is
           Begin
                 Ret := GetSubstSpes_id ( IdSubst, RefSPECIALITE);
           End GetSubstSpes_id;
           Function GetSubstSpes_id ( IdSubst         In    T_SUB_Pubres.ID_T_SUB                 Default Null,
                                   RefSPECIALITE   Out   SPECIALITE_Pubres.SPECIALITECurTyp)
                                 Return Number
           Is
           Begin
             Open GetSubstSpes_id.RefSPECIALITE For
               Select d.ID_SPECIALITE, d.BVALID, d.BENCOURS,
                      d.NOMUSER, d.DENOMSPE, d.FORME, d.DOSAGE,
                      d.complement, d.COMMAMMPOSO, d.RESERVE,
                      d.INFERIEURAGE, d.UNITINF, d.SUPERIEURAGE,
                      d.UNIFSUP, d.INFERIEURPOIDS, d.SUPERIEURPOIDS,
                      d.DENOMAMM, d.NUMDOSAMM, d.SPECATEGORIE,
                      d.SOURCE, d.DATESOURCE, d.REMARQUES, d.DCREAT, d.DMODIF, d.DREVIS
               From   SPECIALITE d, SPECOMPO c, SPECONSTITUANT b
               Where  b.DENOMSUB in ( Select LIBELLE
                                      From   T_SUB
                                      Where  ID_T_SUB = GetSubstSpes_id.IdSubst
                                    )
                 And  c.ID_SPECOMPO   = b.ID_SPECOMPO
                 And  d.ID_SPECIALITE = c.ID_SPECIALITE
              Union
               Select d.ID_SPECIALITE, d.BVALID, d.BENCOURS,
                      d.NOMUSER, d.DENOMSPE, d.FORME, d.DOSAGE,
                      d.complement, d.COMMAMMPOSO, d.RESERVE,
                      d.INFERIEURAGE, d.UNITINF, d.SUPERIEURAGE,
                      d.UNIFSUP, d.INFERIEURPOIDS, d.SUPERIEURPOIDS,
                      d.DENOMAMM, d.NUMDOSAMM, d.SPECATEGORIE,
                      d.SOURCE, d.DATESOURCE, d.REMARQUES, d.DCREAT, d.DMODIF, d.DREVIS
               From   SPECIALITE d, SPECOMPO c, SPECONSTITUANT b
               Where  b.DENOMSUB in ( Select LIBELLE
                                      From   T_SUB
                                      Where  ID_T_SUB in ( Select Distinct  f.ID_T_SUB_F
                                                           From             COUPLETERMETERME f
                                                           Connect By Prior f.ID_T_SUB_F = f.ID_T_SUB_P
                                                           Start With       f.ID_T_SUB_P = GetSubstSpes_id.IdSubst
                                                         )
                                    )
                 And  c.ID_SPECOMPO   = b.ID_SPECOMPO
                 And  d.ID_SPECIALITE = c.ID_SPECIALITE;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSubstSpes_id%');
--         COMMIT;
-------------------------------------------------------------

             Return 1;
             EXCEPTION
               When Others Then
                 Return SQLCODE;
           End GetSubstSpes_id;
  -- ----------------------------------------------------------------------------------
  -- Fonction de sélection  : GetSubstsParentMV_id
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- Modification #2 : Création GetSubstsParentMV_id. Fonction permettant de récupérer
  --                   le (ou les) premiers pères indexés MédiaVIDAL d'une substance ou
  --                   de ses synonymes.
  --                   [ Appel à GetSubstsPere ]
  -- ----------------------------------------------------------------------------------
           Procedure GetSubstsParentMV_id ( IdSubst      In    T_SUB_Pubres.ID_T_SUB,
                                         RefT_SUB     Out   T_SUB_Pubres.T_SUBHasChildCurTypHomeoRef,
                                         Ret          Out   Number)
           Is
           Begin
                 Ret := GetSubstsParentMV_id ( IdSubst, RefT_SUB);
           End GetSubstsParentMV_id;
           Function GetSubstsParentMV_id ( IdSubst       In    T_SUB_Pubres.ID_T_SUB,
                                        RefT_SUB      Out   T_SUB_Pubres.T_SUBHasChildCurTypHomeoRef)
                                      Return Number
           Is
           Id_Subst       Number;
           ChaineId       Varchar2(1000);
           Retour         Number;
           Retour_Fin     Number;
           Stop           Varchar2(1);
           RefId_SUB      T_SUB_Pubres.T_SUBPereCurRef;
           RefTSUB        T_SUB_Pubres.T_SUB_HasChildRecHomeo;
           TypeRetourReq1 Number :=2;
           TypeRetourReq2 Number :=2;
           Begin
             Stop := 'N';
             ChaineId := to_char(GetSubstsParentMV_id.IdSubst);
             -- on va boucler tant qu'on n'a pas au moins un père MV et que l'on n'est pas
             -- arrivé en haut de la hiérarchie
             While (Stop = 'N') Loop
               Retour := GetSubstsPere ( ChaineId, RefId_SUB, RefT_SUB);
               -- si pas d'erreur dans GetSubstsPere
               If ( Retour = 1 ) Then
                 BEGIN
                   -- si on a au moins un père MV : on sort
                   Fetch RefT_SUB Into RefTSUB;
                   If ( RefT_SUB%NotFound ) Then
                     TypeRetourReq2 := 0;
                   Else
                     TypeRetourReq2 := 1;
                     Stop := 'O';
                   End If;
                 END;
                 Close RefT_SUB;
                 -- si pas de MV, on cherche les autres pères
                 If ( TypeRetourReq2 = 0 ) Then
                    BEGIN
                      Fetch RefId_SUB Into Id_Subst;
                      -- si pas de pères non-MV, on sort : sommet de hiérarchie
                      If ( RefId_SUB%Notfound) Then
                        TypeRetourReq1 := 0;
                        Stop := 'O';
                      -- si pères non MV, on poursuit avec la recherche de leurs pères
                      Else
                        TypeRetourReq1 := 1;
                        ChaineId := to_char(Id_Subst);
                        Loop
                          Fetch RefId_SUB Into Id_Subst;
                          Exit When RefId_SUB%NotFound;
                          ChaineId := ChaineId ||', '||to_char(Id_Subst);
                        End Loop;
                      End If;
                      Close RefId_SUB;
                    END;
                 End If;
               -- si erreur dans GetSubstsPere
               Else
                 Stop := 'O';
               End If;
             End Loop;
             If ( TypeRetourReq2 = 1 ) Then
               -- on a trouvé ! : on "recharge" le curseur avec les valeurs finales
               Retour := GetSubstsPere ( ChaineId, RefId_SUB, RefT_SUB );
               Retour_Fin := 1;
             ElsIf ( TypeRetourReq2 = 0 ) Then
               -- on a remonté tout l'arbre sans rien trouver
               Retour_Fin := 0;
             Else
               -- on a une erreur dans GetSubstsPere
               Retour_Fin := Retour;
             End If;
             Return Retour_Fin;
             EXCEPTION
               When Others Then
                 Return SQLCODE;
             End GetSubstsParentMV_id;


 -- ------------------------------------------------------------------------------------------
  -- Fonction de sélection  : GetSubstsDopantes_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- Modification #4 : Ajout du paramètre "typ" : * si typ = 1 => recherche par Libelle de substance
  -- ------------------------------------------------------------------------------------------
      Procedure GetSubstsDopantes_txt( Libelle      In   T_SUB_Pubres.DENOMSUB   Default Null,
                                 Typ          In   Number,
                                 RefT_SUBDopant     Out  T_SUB_Pubres.T_SUB_DopantCurTyp,
                                 Ret          Out  Number)
           Is
           Begin
                 Ret := GetSubstsDopantes_txt ( Libelle, Typ, RefT_SUBDopant);
           End GetSubstsDopantes_txt;
           Function GetSubstsDopantes_txt ( Libelle      In   T_SUB_Pubres.DENOMSUB Default Null,
                                Typ          In   Number,
                                RefT_SUBDopant     Out  T_SUB_Pubres.T_SUB_DopantCurTyp)
                              Return Number
           Is
           Begin
             If ( GetSubstsDopantes_txt.Typ = 1 ) Then
              OPEN GetSubstsDopantes_txt.RefT_SUBDopant For
              Select a.ID_T_SUB,
                a.DENOMSUB,
                a.HOMEO,
                a.BVALID,
                a.BENCOURS,
                a.NOMUSER,
                a.CAS,
                a.CASREPLACED,
                a.NATURE,
                a.CHIMIE,
                a.LISTE,
                a.COMMLISTE,
                a.ORIGINEEXCIPIENT,
                a.DCREAT,
                a.DMODIF,
                a.DREVIS,
                a.ClassDopant,
                b.COMM
              FROM SUBSTANCE a, SUBPE b, T_SUB c
              WHERE a.id_Substance = b.id_Substance
              AND   a.Id_t_Sub = c.id_t_sub
              AND   UPPER(b.terme) LIKE UPPER('SPORTIFS%')
              AND   UPPER(TRANSLATE(a.DENOMSUB,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
							LIKE  UPPER(TRANSLATE(GetSubstsDopantes_txt.Libelle,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
              ORDER BY a.DENOMSUB;
             End If;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSubstsDopantes_txt%');
--         COMMIT;
-------------------------------------------------------------

             Return 1;
             EXCEPTION
               When Others Then
                 Return SQLCODE;
           End GetSubstsDopantes_txt;



-- ====================================================================
-- Fin de package
-- ====================================================================
End AVIDAL_SUBSTANCES;
/
CREATE OR REPLACE PACKAGE Avidal_Substances_Livret AS

  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
           PROCEDURE GetSubstsWithLivret_txt ( Libelle         IN    T_Sub_Pubres.LIBELLE DEFAULT NULL,
                                           Typ             IN    NUMBER,
                                           Banque          IN    VARCHAR2,
                                           Id_hop          IN    INTEGER,
                                           RefT_SUB        OUT   T_Sub_Pubres.T_SUBHasChildCurTypHomeoLivre2,
                                           Ret             OUT   NUMBER);
   -- =====================================================================
   -- Function             : GetSubstsWithLivret
   -- Purpose              :
   -- Parameters In        : GetSubstsWithLivret
   -- Parameters Out       :
   -- Tables utilisees     :
   -- History              : Created by MR 09 Mar 2001
   -- =====================================================================
           FUNCTION GetSubstsWithLivret_txt ( Libelle         IN    T_Sub_Pubres.LIBELLE                DEFAULT NULL,
                                          Typ             IN    NUMBER,
                                          Banque          IN    VARCHAR2,
                                          Id_hop          IN    INTEGER,
                                          RefT_SUB        OUT   T_Sub_Pubres.T_SUBHasChildCurTypHomeoLivre2)
                                        RETURN NUMBER;


-- ====================================================================
-- Fin de package
-- ====================================================================
END Avidal_Substances_Livret;
/

CREATE OR REPLACE PACKAGE BODY Avidal_Substances_Livret AS
-- ======================================================================================
-- Script      : AVIDAL_SUBSTRANCES    Type : Package
-- Objet       : Ressources Select tables
-- Owner       : VIDAL
-- Création    : 09/03/2001
-- Auteur      : Manuel Rouault
-- Généré par  : Manuel Rouault
-- Modifié par : MR - 22/03/2001 - Modificartion #1 : modification de GetSubstsWithLivret_txt
-- =======================================================================================
  -- -------------------------------------------------------------------------------
  -- Fonction de sélection  : GetSubstsWithLivret_txt
  -- Toutes les colonnes
  -- Retour par ref_Cursor
  -- Fonction permettant de récupérer les substances et/ou leurs synonymes
  -- indexées MEDIAVIDAL répondant au critère de recherche.
  -- Selon la demande (Banque) on cherchera dans la Banque Vidal et
  -- dans les Livrets VIDAL et HOPITAL de l'organisme spécifié ou seulement
  -- dans les livrets.
  -- Modificartion #1 : Ajout du paramètre d'entrée "Typ" (répercution de GetSubsts)
  --                       * si typ = 0 => recherche excipients
  --                       * si typ = 1 => recherche substances actives
  --                       * si typ = 2 => recherche toutes substances
  -- --------------------------------------------------------------------------------

  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--  Nouvelles Entrées
  --/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
           PROCEDURE GetSubstsWithLivret_txt ( Libelle      IN   T_Sub_Pubres.LIBELLE                   DEFAULT NULL,
                                           Typ          IN    NUMBER,
                                           Banque       IN   VARCHAR2,
                                           Id_hop       IN   INTEGER,
                                           RefT_SUB     OUT  T_Sub_Pubres.T_SUBHasChildCurTypHomeoLivre2,
                                           Ret          OUT  NUMBER)
           IS
           BEGIN
                 Ret := GetSubstsWithLivret_txt ( Libelle, Typ, Banque, Id_hop, RefT_SUB);
           END GetSubstsWithLivret_txt;
           FUNCTION GetSubstsWithLivret_txt ( Libelle      IN   T_Sub_Pubres.LIBELLE               DEFAULT NULL,
                                          Typ          IN   NUMBER,
                                          Banque       IN   VARCHAR2,
                                          Id_hop       IN   INTEGER,
                                          RefT_SUB     OUT  T_Sub_Pubres.T_SUBHasChildCurTypHomeoLivre2)
                                        RETURN NUMBER
           IS
           BEGIN
             IF ( GetSubstsWithLivret_txt.Typ = 0 ) THEN
               -- on ne ramène que les excipients ( bconstactif = 0 dans table speconstituant )
               IF Banque = 'O' THEN
                 -- recherche de toutes les substances
				 -- d'abord dans la banque VIDAL
				 OPEN GetSubstsWithLivret_txt.RefT_SUB FOR
                   SELECT DISTINCT a.ID_T_SUB,
                                   DECODE(a.HOMEOPATHIE,'F',a.LIBELLE,a.LIBELLE||' [Homéo]') LIBELLE,
                                   a.HOMEOPATHIE,
                                   a.TEXTE,
                                   a.DC,
                                   a.COMPLEMENTINDEXSUB,
                                   DECODE(a.ID_T_SUB, NULL, 0, 1) HasChild,
                                   0 IDORGANISME,
                                   'N' FLAG_CAN,
								   '0' Bconstactif
                          FROM   t_sub a, t_sub_complement b, t_sub_parent c
						  WHERE  a.id_t_sub = b.id_t_sub
						  AND    a.id_t_sub = id_t_sub_p
						  AND    ouvrage = 1
                          AND    b.rolecompoherite in (2,3)
						  AND    UPPER(TRANSLATE(a.LIBELLE,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
					      LIKE   UPPER(TRANSLATE(GetSubstsWithLivret_txt.Libelle,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))

                  UNION
                   -- recherche des synonymes des substances dans la banque VIDAL
                   SELECT DISTINCT b.ID_T_SUB,
                                   a.libelle||' = '||b.LIBELLE LIBELLE,
                                   b.HOMEOPATHIE,
                                   b.TEXTE,
                                   b.DC,
                                   b.COMPLEMENTINDEXSUB,
                                   DECODE(b.ID_T_SUB, NULL, 0, 1) HasChild,
                                   0 IDORGANISME,
                                   'N' FLAG_CAN,
								   '0' Bconstactif
				 FROM    t_synonysub a, t_sub b, coupletermesynonyme c, t_sub_complement d
						 WHERE   c.id_t_sub = b.id_t_sub
                         AND     c.id_t_synonysub = a.id_t_synonysub
						 AND     d.ID_T_SUB = b.ID_T_SUB
						 AND     UPPER(TRANSLATE(a.LIBELLE,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
						 LIKE    UPPER(TRANSLATE(GetSubstsWithLivret_txt.Libelle,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
						 AND     d.rolecompoherite in (2,3)
                     	 AND     b.id_t_sub in (SELECT id_t_sub_p
						                        FROM t_sub_parent WHERE ouvrage = 1)

                   UNION
                   -- puis recherche des substances créées par l'organisme
                   SELECT DISTINCT a.ID_T_SUBHOP,
                                   a.LIBELLE,
                                   ''HOMEOPATHIE,
                                   '' TEXTE,
                                   '' DC,
                                   '' COMPLEMENTINDEXSUB,
                                   0 HasChild,
                                   a.IDORGANISME,
                                   'C' FLAG_CAN,
                                   ''  Bconstactif
                   FROM            T_SUBHOP a
                   WHERE           UPPER(TRANSLATE(a.LIBELLE,Avidal_Pubres.ch1, Avidal_Pubres.ch2)) LIKE UPPER(TRANSLATE(GetSubstsWithLivret_txt.Libelle,Avidal_Pubres.ch1, Avidal_Pubres.ch2))
                     AND           a.IDORGANISME           = GetSubstsWithLivret_txt.Id_hop
                   ORDER BY 2;
               ELSE
                 -- Sinon, idem mais on ne cherche que les substances ayant des médicaments dans les livrets de l'organisme
                 OPEN GetSubstsWithLivret_txt.RefT_SUB FOR
				 SELECT DISTINCT   a.ID_T_SUB,
                                   DECODE(a.HOMEOPATHIE,'F',a.LIBELLE,a.LIBELLE||' [Homéo]') LIBELLE,
                                   a.HOMEOPATHIE,
                                   a.TEXTE,
                                   a.DC,
                                   a.COMPLEMENTINDEXSUB,
                                   DECODE(b.ID_T_SUB, NULL, 0, 1) HasChild,
                                   h.IDORGANISME,
                                   'A' FLAG_CAN,
                                   '0' Bconstactif
                   FROM            T_SUB a, T_SUB_COMPLEMENT b, SPECOMPO c, SPECONSTITUANT d,
                                   SPECIALITE f, SPEPRESENTATION g, LIVRETVIDAL h, t_sub_parent i
				   WHERE           a.id_t_sub = b.id_t_sub  AND
				                   a.id_t_sub = id_t_sub_p
					 AND           i.ouvrage = 1
                     AND           b.rolecompoherite in (2,3)
					 AND           UPPER(TRANSLATE(a.LIBELLE,Avidal_Pubres.ch1, Avidal_Pubres.ch2))
					 LIKE          UPPER(TRANSLATE(GetSubstsWithLivret_txt.Libelle,Avidal_Pubres.ch1, Avidal_Pubres.ch2))
                     AND           id_t_sub_f         = d.id_t_sub
                     AND           c.ID_SPECOMPO        = d.ID_SPECOMPO
                     AND           f.ID_SPECIALITE      = c.ID_SPECIALITE
                     AND           g.ID_SPECIALITE      = f.ID_SPECIALITE
                     AND           h.ID_SPEPRESENTATION = g.ID_SPEPRESENTATION
                     AND           h.IDORGANISME        = GetSubstsWithLivret_txt.Id_hop


             UNION
                   -- recherche des synonymes de substances dans le livret VIDAL de l'organisme

                   SELECT DISTINCT b.ID_T_SUB,
                                   a.libelle||' = '||b.LIBELLE LIBELLE,
                                   b.HOMEOPATHIE,
                                   b.TEXTE,
                                   b.DC,
                                   b.COMPLEMENTINDEXSUB,
                                   DECODE(b.ID_T_SUB, NULL, 0, 1) HasChild,
                                   j.IDORGANISME,
                                   'A' FLAG_CAN,
                                   '0' Bconstactif
					 	 FROM    t_synonysub a, t_sub b, coupletermesynonyme c, t_sub_complement d,
        						 SPECONSTITUANT k, SPECOMPO f, SPECIALITE g, SPEPRESENTATION h, LIVRETVIDAL j
						 WHERE   c.id_t_sub = b.id_t_sub
                         AND     c.id_t_synonysub = a.id_t_synonysub
						 AND     d.ID_T_SUB = b.ID_T_SUB
						 AND     UPPER(TRANSLATE(a.LIBELLE,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
						 LIKE    UPPER(TRANSLATE(GetSubstsWithLivret_txt.Libelle,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
						 AND     d.rolecompoherite in (2,3)
                     	 AND     b.id_t_sub in (SELECT id_t_sub_p
						                        FROM t_sub_parent WHERE ouvrage = 1)
                         AND     b.LIBELLE            = k.DENOMSUB
                         AND     f.ID_SPECOMPO        = k.ID_SPECOMPO
                         AND     g.ID_SPECIALITE      = f.ID_SPECIALITE
                         AND     h.ID_SPECIALITE      = g.ID_SPECIALITE
                         AND     j.ID_SPEPRESENTATION = h.ID_SPEPRESENTATION
                         AND     j.IDORGANISME        = GetSubstsWithLivret_txt.Id_hop

                  UNION
                   -- recherche des substances dans le livret HOPITAL de l'organisme
                   -- ( pas de synonymes )
                   SELECT DISTINCT a.ID_T_SUBHOP,
                                   a.LIBELLE,
                                   ''HOMEOPATHIE,
                                   '' TEXTE,
                                   '' DC,
                                   '' COMPLEMENTINDEXSUB,
                                   0 HasChild,
                                   a.IDORGANISME,
                                   'C' FLAG_CAN,
                                   ''  Bconstactif
                   FROM            T_SUBHOP a
                   WHERE           UPPER(TRANSLATE(a.LIBELLE,Avidal_Pubres.ch1, Avidal_Pubres.ch2)) LIKE UPPER(TRANSLATE(GetSubstsWithLivret_txt.Libelle,Avidal_Pubres.ch1, Avidal_Pubres.ch2))
                     AND           a.IDORGANISME           = GetSubstsWithLivret_txt.Id_hop
                  ORDER BY 2;
               END IF;
             ELSIF ( GetSubstsWithLivret_txt.Typ = 1 ) THEN
               -- on ne ramène que les excipients ( bconstactif = 0 dans table speconstituant )
               IF Banque = 'O' THEN
                 -- recherche des substances dans la banque VIDAL ( n'apparaissant pas dans le Livret VIDAL )
                 OPEN GetSubstsWithLivret_txt.RefT_SUB FOR

					 SELECT DISTINCT a.ID_T_SUB,
                                   DECODE(a.HOMEOPATHIE,'F',a.LIBELLE,a.LIBELLE||' [Homéo]') LIBELLE,
                                   a.HOMEOPATHIE,
                                   a.TEXTE,
                                   a.DC,
                                   a.COMPLEMENTINDEXSUB,
                                   DECODE(a.ID_T_SUB, NULL, 0, 1) HasChild,
                                   0 IDORGANISME,
                                   'N' FLAG_CAN,
								   '1' Bconstactif
                          FROM   t_sub a, t_sub_complement b, t_sub_parent c
						  WHERE  a.id_t_sub = b.id_t_sub
						  AND    a.id_t_sub = id_t_sub_p
						  AND    ouvrage = 1
                          AND    b.rolecompoherite in (1,3)
						  AND    UPPER(TRANSLATE(a.LIBELLE,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
					      LIKE   UPPER(TRANSLATE(GetSubstsWithLivret_txt.Libelle,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))


                   UNION
                   -- recherche des synonymes des substances dans la banque VIDAL

				  SELECT DISTINCT b.ID_T_SUB,
                                   a.libelle||' = '||b.LIBELLE LIBELLE,
                                   b.HOMEOPATHIE,
                                   b.TEXTE,
                                   b.DC,
                                   b.COMPLEMENTINDEXSUB,
                                   DECODE(b.ID_T_SUB, NULL, 0, 1) HasChild,
                                   0 IDORGANISME,
                                   'N' FLAG_CAN,
								   '1' Bconstactif
				 FROM    t_synonysub a, t_sub b, coupletermesynonyme c, t_sub_complement d
						 WHERE   c.id_t_sub = b.id_t_sub
                         AND     c.id_t_synonysub = a.id_t_synonysub
						 AND     d.ID_T_SUB = b.ID_T_SUB
						 AND     UPPER(TRANSLATE(a.LIBELLE,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
						 LIKE    UPPER(TRANSLATE(GetSubstsWithLivret_txt.Libelle,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
						 AND     d.rolecompoherite in (1,3)
                     	 AND     b.id_t_sub in (SELECT id_t_sub_p
						                        FROM t_sub_parent WHERE ouvrage = 1)

                   UNION
                   -- recherche des substances dans le livret HOPITAL de l'organisme
                   -- ( pas de synonymes )
                   SELECT DISTINCT a.ID_T_SUBHOP,
                                   a.LIBELLE,
                                   ''HOMEOPATHIE,
                                   '' TEXTE,
                                   '' DC,
                                   '' COMPLEMENTINDEXSUB,
                                   0 HasChild,
                                   a.IDORGANISME,
                                   'C' FLAG_CAN,
                                   ''  Bconstactif
                   FROM            T_SUBHOP a
                   WHERE           UPPER(TRANSLATE(a.LIBELLE,Avidal_Pubres.ch1, Avidal_Pubres.ch2))
				   LIKE            UPPER(TRANSLATE(GetSubstsWithLivret_txt.Libelle,Avidal_Pubres.ch1, Avidal_Pubres.ch2))
                     AND           a.IDORGANISME           = GetSubstsWithLivret_txt.Id_hop
                 ORDER BY 2;
               ELSE
                 -- Sinon, idem mais on ne cherche que dans les livrets de l'organisme
                 OPEN GetSubstsWithLivret_txt.RefT_SUB FOR
				 SELECT DISTINCT     a.ID_T_SUB,
                                   DECODE(a.HOMEOPATHIE,'F',a.LIBELLE,a.LIBELLE||' [Homéo]') LIBELLE,
                                   a.HOMEOPATHIE,
                                   a.TEXTE,
                                   a.DC,
                                   a.COMPLEMENTINDEXSUB,
                                   DECODE(b.ID_T_SUB, NULL, 0, 1) HasChild,
                                   h.IDORGANISME,
                                   'A' FLAG_CAN,
                                   '1' Bconstactif
                   FROM            T_SUB a, T_SUB_COMPLEMENT b, SPECOMPO c, SPECONSTITUANT d,
                                   SPECIALITE f, SPEPRESENTATION g, LIVRETVIDAL h, t_sub_parent i
				   WHERE           a.id_t_sub = b.id_t_sub  AND
				                   a.id_t_sub = id_t_sub_p
					 AND           ouvrage = 1
                     AND           b.rolecompoherite in (1,3)
					 AND           UPPER(TRANSLATE(a.LIBELLE,Avidal_Pubres.ch1, Avidal_Pubres.ch2))
					 LIKE          UPPER(TRANSLATE(GetSubstsWithLivret_txt.Libelle,Avidal_Pubres.ch1, Avidal_Pubres.ch2))
                     AND           id_t_sub_f         = d.id_t_sub
                     AND           c.ID_SPECOMPO        = d.ID_SPECOMPO
                     AND           f.ID_SPECIALITE      = c.ID_SPECIALITE
                     AND           g.ID_SPECIALITE      = f.ID_SPECIALITE
                     AND           h.ID_SPEPRESENTATION = g.ID_SPEPRESENTATION
                     AND           h.IDORGANISME        = GetSubstsWithLivret_txt.Id_hop

                  UNION
                   -- recherche des synonymes de substances dans le livret VIDAL de l'organisme

                   SELECT DISTINCT b.ID_T_SUB,
                                   a.libelle||' = '||b.LIBELLE LIBELLE,
                                   b.HOMEOPATHIE,
                                   b.TEXTE,
                                   b.DC,
                                   b.COMPLEMENTINDEXSUB,
                                   DECODE(b.ID_T_SUB, NULL, 0, 1) HasChild,
                                   j.IDORGANISME,
                                   'A' FLAG_CAN,
                                   '1' Bconstactif
					 	 FROM    t_synonysub a, t_sub b, coupletermesynonyme c, t_sub_complement d,
        						 SPECONSTITUANT k, SPECOMPO f, SPECIALITE g, SPEPRESENTATION h, LIVRETVIDAL j
						 WHERE   c.id_t_sub = b.id_t_sub
                         AND     c.id_t_synonysub = a.id_t_synonysub
						 AND     d.ID_T_SUB = b.ID_T_SUB
						 AND     UPPER(TRANSLATE(a.LIBELLE,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
						 LIKE    UPPER(TRANSLATE(GetSubstsWithLivret_txt.Libelle,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
						 AND     d.rolecompoherite in (1,3)
                     	 AND     b.id_t_sub in (SELECT id_t_sub_p
						                        FROM t_sub_parent WHERE ouvrage = 1)
                         AND     b.LIBELLE            = k.DENOMSUB
                         AND     f.ID_SPECOMPO        = k.ID_SPECOMPO
                         AND     g.ID_SPECIALITE      = f.ID_SPECIALITE
                         AND     h.ID_SPECIALITE      = g.ID_SPECIALITE
                         AND     j.ID_SPEPRESENTATION = h.ID_SPEPRESENTATION
                         AND     j.IDORGANISME        = GetSubstsWithLivret_txt.Id_hop

                 UNION
                   -- recherche des substances dans le livret HOPITAL de l'organisme
                   -- ( pas de synonymes )
                   SELECT DISTINCT a.ID_T_SUBHOP,
                                   a.LIBELLE,
                                   ''HOMEOPATHIE,
                                   '' TEXTE,
                                   '' DC,
                                   '' COMPLEMENTINDEXSUB,
                                   0 HasChild,
                                   a.IDORGANISME,
                                   'C' FLAG_CAN,
                                   ''  Bconstactif
                   FROM            T_SUBHOP a
                   WHERE           UPPER(TRANSLATE(a.LIBELLE,Avidal_Pubres.ch1, Avidal_Pubres.ch2)) LIKE UPPER(TRANSLATE(GetSubstsWithLivret_txt.Libelle,Avidal_Pubres.ch1, Avidal_Pubres.ch2))
                     AND           a.IDORGANISME           = GetSubstsWithLivret_txt.Id_hop
                 ORDER BY 2;
               END IF;
			---------------//----------------//
            --Pour les PA ET les Excipients--
			---------------//----------------//
             ELSIF ( GetSubstsWithLivret_txt.Typ = 2 ) THEN
               IF Banque = 'O' THEN
                 -- recherche des substances dans la banque VIDAL
                 OPEN GetSubstsWithLivret_txt.RefT_SUB FOR
   				 SELECT DISTINCT a.ID_T_SUB,
                                   DECODE(a.HOMEOPATHIE,'F',a.LIBELLE,a.LIBELLE||' [Homéo]') LIBELLE,
                                   a.HOMEOPATHIE,
                                   a.TEXTE,
                                   a.DC,
                                   a.COMPLEMENTINDEXSUB,
                                   DECODE(a.ID_T_SUB, NULL, 0, 1) HasChild,
                                   0 IDORGANISME,
                                   'N' FLAG_CAN,
								   '' Bconstactif
 	                      FROM   t_sub a, t_sub_complement b, t_sub_parent c
						  WHERE  a.id_t_sub = b.id_t_sub
						  AND    a.id_t_sub = id_t_sub_p
						  AND    ouvrage = 1
                          AND    b.rolecompoherite in (1,2,3)
						  AND    UPPER(TRANSLATE(a.LIBELLE,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
					      LIKE   UPPER(TRANSLATE(GetSubstsWithLivret_txt.Libelle,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))

                   UNION
                   -- recherche des synonymes des substances dans la banque VIDAL

				SELECT DISTINCT b.ID_T_SUB,
                                   a.libelle||' = '||b.LIBELLE LIBELLE,
                                   b.HOMEOPATHIE,
                                   b.TEXTE,
                                   b.DC,
                                   b.COMPLEMENTINDEXSUB,
                                   DECODE(b.ID_T_SUB, NULL, 0, 1) HasChild,
                                   0 IDORGANISME,
                                   'N' FLAG_CAN,
								   '' Bconstactif

				 FROM    t_synonysub a, t_sub b, coupletermesynonyme c, t_sub_complement d
						 WHERE   c.id_t_sub = b.id_t_sub
                         AND     c.id_t_synonysub = a.id_t_synonysub
						 AND     d.ID_T_SUB = b.ID_T_SUB
						 AND     UPPER(TRANSLATE(a.LIBELLE,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
						 LIKE    UPPER(TRANSLATE(GetSubstsWithLivret_txt.Libelle,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
						 AND     d.rolecompoherite in (1,2,3)
                     	 AND     b.id_t_sub in (SELECT id_t_sub_p
						                        FROM t_sub_parent WHERE ouvrage = 1)
                   UNION
                   -- recherche des substances dans le livret HOPITAL de l'organisme
                   -- ( pas de synonymes )
                   SELECT DISTINCT a.ID_T_SUBHOP,
                                   a.LIBELLE,
                                   ''HOMEOPATHIE,
                                   '' TEXTE,
                                   '' DC,
                                   '' COMPLEMENTINDEXSUB,
                                   0 HasChild,
                                   a.IDORGANISME,
                                   'C' FLAG_CAN,
                                   ''  Bconstactif
                   FROM            T_SUBHOP a
                   WHERE           UPPER(TRANSLATE(a.LIBELLE,Avidal_Pubres.ch1, Avidal_Pubres.ch2)) LIKE UPPER(TRANSLATE(GetSubstsWithLivret_txt.Libelle,Avidal_Pubres.ch1, Avidal_Pubres.ch2))
                     AND           a.IDORGANISME           = GetSubstsWithLivret_txt.Id_hop
                 ORDER BY 2;
               ELSE
                 -- Sinon, idem mais on ne cherche que dans les livrets de l'organisme
                 OPEN GetSubstsWithLivret_txt.RefT_SUB FOR
				 SELECT DISTINCT     a.ID_T_SUB,
                                   DECODE(a.HOMEOPATHIE,'F',a.LIBELLE,a.LIBELLE||' [Homéo]') LIBELLE,
                                   a.HOMEOPATHIE,
                                   a.TEXTE,
                                   a.DC,
                                   a.COMPLEMENTINDEXSUB,
                                   DECODE(b.ID_T_SUB, NULL, 0, 1) HasChild,
                                   h.IDORGANISME,
                                   'A' FLAG_CAN,
                                   '' Bconstactif

                   FROM            T_SUB a, T_SUB_COMPLEMENT b, SPECOMPO c, SPECONSTITUANT d,
                                   SPECIALITE f, SPEPRESENTATION g, LIVRETVIDAL h, t_sub_parent i
				   WHERE           a.id_t_sub = b.id_t_sub
				     AND           a.id_t_sub = id_t_sub_p
				     AND           ouvrage = 1
                     AND           b.rolecompoherite in (1,2,3)
					 AND           UPPER(TRANSLATE(a.LIBELLE,Avidal_Pubres.ch1, Avidal_Pubres.ch2))
					 LIKE          UPPER(TRANSLATE(GetSubstsWithLivret_txt.Libelle,Avidal_Pubres.ch1, Avidal_Pubres.ch2))
                     AND           id_t_sub_f         = d.id_t_sub
                     AND           c.ID_SPECOMPO        = d.ID_SPECOMPO
                     AND           f.ID_SPECIALITE      = c.ID_SPECIALITE
                     AND           g.ID_SPECIALITE      = f.ID_SPECIALITE
                     AND           h.ID_SPEPRESENTATION = g.ID_SPEPRESENTATION
                     AND           h.IDORGANISME        = GetSubstsWithLivret_txt.Id_hop

                  UNION
                   -- recherche des synonymes de substances dans le livret VIDAL de l'organisme

                   SELECT DISTINCT b.ID_T_SUB,
                                   a.libelle||' = '||b.LIBELLE LIBELLE,
                                   b.HOMEOPATHIE,
                                   b.TEXTE,
                                   b.DC,
                                   b.COMPLEMENTINDEXSUB,
                                   DECODE(b.ID_T_SUB, NULL, 0, 1) HasChild,
                                   j.IDORGANISME,
                                   'A' FLAG_CAN,
                                   '' Bconstactif
					 	 FROM    t_synonysub a, t_sub b, coupletermesynonyme c, t_sub_complement d,
        						 SPECONSTITUANT k, SPECOMPO f, SPECIALITE g, SPEPRESENTATION h, LIVRETVIDAL j
						 WHERE   c.id_t_sub = b.id_t_sub
                         AND     c.id_t_synonysub = a.id_t_synonysub
						 AND     d.ID_T_SUB = b.ID_T_SUB
						 AND     UPPER(TRANSLATE(a.LIBELLE,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
						 LIKE    UPPER(TRANSLATE(GetSubstsWithLivret_txt.Libelle,AVIDAL_PUBRES.ch1, AVIDAL_PUBRES.ch2))
						 AND     d.rolecompoherite in (1,2,3)
                     	 AND     b.id_t_sub in (SELECT id_t_sub_p
						                        FROM t_sub_parent WHERE ouvrage = 1)
                         AND     b.LIBELLE            = k.DENOMSUB
                         AND     f.ID_SPECOMPO        = k.ID_SPECOMPO
                         AND     g.ID_SPECIALITE      = f.ID_SPECIALITE
                         AND     h.ID_SPECIALITE      = g.ID_SPECIALITE
                         AND     j.ID_SPEPRESENTATION = h.ID_SPEPRESENTATION
                         AND     j.IDORGANISME        = GetSubstsWithLivret_txt.Id_hop
                 UNION

                   SELECT DISTINCT a.ID_T_SUBHOP,
                                   a.LIBELLE,
                                   ''HOMEOPATHIE,
                                   '' TEXTE,
                                   '' DC,
                                   '' COMPLEMENTINDEXSUB,
                                   0 HasChild,
                                   a.IDORGANISME,
                                   'C' FLAG_CAN,
                                   ''  Bconstactif
                   FROM            T_SUBHOP a
                   WHERE           UPPER(TRANSLATE(a.LIBELLE,Avidal_Pubres.ch1, Avidal_Pubres.ch2)) LIKE UPPER(TRANSLATE(GetSubstsWithLivret_txt.Libelle,Avidal_Pubres.ch1, Avidal_Pubres.ch2))
                     AND           a.IDORGANISME           = GetSubstsWithLivret_txt.Id_hop
                 ORDER BY 2;
               END IF;
             END IF;

-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetSubstsWithLivret_txt%');
--         COMMIT;
-------------------------------------------------------------

             RETURN 1;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN SQLCODE;
             END GetSubstsWithLivret_txt;


-- ====================================================================
-- Fin de package
-- ====================================================================
END Avidal_Substances_Livret;
/
CREATE OR REPLACE PACKAGE AVIDAL_UCD AS

-- ====================================================================
-- Script     : AVIDAL_UCD    Type : Package Spécification
-- Objet      : Cette procédure permet d'avoir un recherche
--              complète par UCD
-- Owner      : VIDAL
-- Création   : 02/02/2004
-- Auteur     : MALIKA LAGHLA
-- Généré par : VIDAL Version : 2.00
-- ====================================================================

----------------------------------------
-- Recherche par Code ou libelle UCD
----------------------------------------
           PROCEDURE GetUCD_txt ( Terme             IN    VARCHAR2,
                               Typ                  IN    INTEGER,
                               Val                  IN    INTEGER,
                               RefUCD               OUT   UCD_PUBRES.UcdCurRef,
                               Ret                  OUT   NUMBER);


           FUNCTION GetUCD_txt ( Terme              IN    VARCHAR2,
                                 Typ                IN    INTEGER,
                                 Val                IN    INTEGER,
                                 RefUCD             OUT   UCD_PUBRES.UcdCurRef)
                RETURN NUMBER;
----------------------------------------
-- Recherche par Cip
----------------------------------------
           Procedure GetCipUCD_txt( Cip                 IN    VARCHAR2,
                                RefUCD              OUT   UCD_PUBRES.UcdCurTyp,
                                 Ret                OUT   NUMBER);

           FUNCTION GetCipUCD_txt ( Cip               IN    VARCHAR2,
                                 RefUCD            OUT   UCD_PUBRES.UcdCurTyp)
                RETURN NUMBER;

end AVIDAL_UCD;
/

CREATE OR REPLACE PACKAGE BODY AVIDAL_UCD AS

-- ====================================================================
-- Script     : AVIDAL_UCD    Type : Corps du package
-- Objet      : Cette procédure permet d'avoir un recherche
--              complète par UCD
-- Owner      : VIDAL
-- Création   : 02/02/2004 11:54:11
-- Auteur     : MALIKA LAGHLA
-- Généré par : VIDAL Version : 2.00
-- ====================================================================


           PROCEDURE GetUCD_txt ( Terme             IN    VARCHAR2,
                               Typ                  IN    INTEGER,
                               Val                  IN    INTEGER,
                               RefUCD               OUT   UCD_PUBRES.UcdCurRef,
                               Ret                  OUT   NUMBER)
           IS
           BEGIN
                 Ret:= GetUCD_txt ( Terme, Typ,Val, Refucd);
           END GetUCD_txt;

          FUNCTION GetUCD_txt( Terme                 IN    VARCHAR2,
                               Typ                   IN    INTEGER,
                               Val                   IN    INTEGER,
                               RefUCD                OUT   UCD_PUBRES.UcdCurRef)

                            RETURN NUMBER IS



       BEGIN

    IF Val = 0 THEN

       -------------------------------------------------
			 -- recherche par Libelle d'UCD
			 -------------------------------------------------
			 IF typ = 11 THEN

        OPEN GetUCD_txt.RefUCD FOR

        SELECT
        Distinct code_ucd, (rtrim(ltrim(libelle_ucd))) libelle_ucd
        from UCD
        WHERE   UPPER(TRANSLATE(libelle_ucd, Avidal_Pubres.ch1, Avidal_Pubres.ch2))
         LIKE UPPER(TRANSLATE(GetUCD_txt.Terme, Avidal_Pubres.ch1, Avidal_Pubres.ch2));


       -------------------------------------------------
			 -- recherche par Code d'UCD
			 -------------------------------------------------
			 ELSIF typ = 7 THEN

       OPEN GetUCD_txt.RefUCD FOR
			     SELECT
           Distinct code_ucd, (rtrim(ltrim(libelle_ucd))) libelle_ucd
           from UCD
           WHERE code_ucd = GetUCD_txt.Terme;


			 END IF;

    ELSIF Val = 1 Then


      	IF typ = 11 THEN

        OPEN GetUCD_txt.RefUCD FOR
          SELECT
 			  	DISTINCT a.code_ucd, a.code_cip, a.libelle_ucd, c.DENOMSPE||DECODE(Condi,NULL,'',' : '||Condi) DenomCip
   	  		FROM UCD a, spepresentation b, specialite c
          WHERE   UPPER(TRANSLATE(libelle_ucd, Avidal_Pubres.ch1, Avidal_Pubres.ch2))
             LIKE UPPER(TRANSLATE(GetUCD_txt.Terme, Avidal_Pubres.ch1, Avidal_Pubres.ch2))
				     and  a.code_cip =  b.cip
				     and  a.code_ucd =  b.ucd
				     and  b.id_specialite = c.id_specialite
        	ORDER BY libelle_ucd;


       -------------------------------------------------
			 -- recherche par Code d'UCD
			 -------------------------------------------------
			 ELSIF typ = 7 THEN

       OPEN GetUCD_txt.RefUCD FOR
          SELECT
 			  	DISTINCT a.code_ucd, a.code_cip, a.libelle_ucd, c.DENOMSPE||DECODE(Condi,NULL,'',' : '||Condi) DenomCip
           from UCD a, spepresentation b, specialite c
           WHERE code_ucd = GetUCD_txt.Terme
			          and  a.code_cip =  b.cip
		            and  a.code_ucd =  b.ucd
			          and  b.id_specialite = c.id_specialite
         	ORDER BY libelle_ucd;

			 END IF;

      END IF;



-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetUCD_txt%');
--         COMMIT;
-------------------------------------------------------------

           RETURN 1;
           EXCEPTION
             WHEN OTHERS THEN
               RETURN SQLCODE;

         END GetUCD_txt;

       -------------------------------------------------
			 -- recherche par Cip
			 -------------------------------------------------
        PROCEDURE GetCipUCD_txt ( Cip                  IN    VARCHAR2,
                               RefUCD               OUT   UCD_PUBRES.UcdCurTyp,
                               Ret                  OUT   NUMBER)
           IS
           BEGIN
                 Ret:= GetCipUCD_txt ( Cip, Refucd);
           END GetCipUCD_txt;

        FUNCTION GetCipUCD_txt( Cip                    IN    VARCHAR2,
                             RefUCD                 OUT   UCD_PUBRES.UcdCurTyp)

                            RETURN NUMBER IS



         BEGIN
         OPEN GetCipUCD_txt.RefUCD FOR
			     SELECT
           code_ucd, code_cip,
           libelle_ucd
           from UCD
           WHERE code_cip = GetCipUCD_txt.Cip;


-------------------------------------------------------------
--Statistiques sur la procedure - rempli la table Marqueurs
--le 25/05/2004
-------------------------------------------------------------
--         Update Marqueurs SET
--                  Compteur = Compteur + 1
--                  where upper(proc_name) Like UPPER('%GetCipUCD_txt%');
--         COMMIT;
-------------------------------------------------------------


           RETURN 1;
           EXCEPTION
             WHEN OTHERS THEN
               RETURN SQLCODE;

         END GetCipUCD_txt;

end AVIDAL_UCD;
/
CREATE OR REPLACE PACKAGE CIM10_PUBRES  Is
-- ====================================================================
-- Script     : CIM10_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 02/05/02 17:35:33
-- Auteur     :
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

-- --------------------------------------------------------------------
-- Sous-types table : CIM10
-- --------------------------------------------------------------------
  SubType Id_DICORF_CIM	     Is  DICORF_CIM.ID_DICORF_CIM%Type;
  SubType libelle	         Is  DICORF_CIM.Libelle%Type;
  --SubType lib_CIM10	     Is  DICORF_CIM.ordre%Type;
-- --------------------------------------------------------------------
-- Record : CIM10
-- --------------------------------------------------------------------
  Type CIM10Rec Is Record
  (
	Id_DICORF_CIM	 CIM10_Pubres.Id_DICORF_CIM,
	libelle	         CIM10_Pubres.Libelle );
	--lib_CIM10    CIM10_Pubres.ordre);
-- --------------------------------------------------------------------
-- Ref Cursor : CIM10
-- --------------------------------------------------------------------
  Type CIM10CurTyp 	Is Ref Cursor Return CIM10_Pubres.CIM10Rec;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : CIM10
-- --------------------------------------------------------------------
  Type Id_DICORF_CIMTab	Is Table Of CIM10_Pubres.Id_DICORF_CIM Index By Binary_Integer;
 Type libelleTab	    Is Table Of CIM10_Pubres.Libelle    Index By Binary_Integer;
  --Type lib_CIM10Tab	Is Table Of CIM10_Pubres.ordre; --Index By Binary_Integer
-- --------------------------------------------------------------------
-- tableau record de table : CIM10
-- --------------------------------------------------------------------
  Type CIM10TabRec 	Is Table Of CIM10_Pubres.CIM10Rec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End CIM10_Pubres;
/
CREATE OR REPLACE Package DICOCOMCLASSIRIS_Pubres Is
-- ====================================================================
-- Script     : DICOCOMCLASSIRIS_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:33
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

-- --------------------------------------------------------------------
-- Sous-types table : DICOCOMCLASSIRIS
-- --------------------------------------------------------------------
  SubType Id_Dicocomclassiris	 Is  DICOCOMCLASSIRIS.Id_Dicocomclassiris%Type;
  SubType Dic_Id_Dicocomclassiris	 Is  DICOCOMCLASSIRIS.Dic_Id_Dicocomclassiris%Type;
  SubType Libelle	 Is  DICOCOMCLASSIRIS.Libelle%Type;
  SubType Ordre	 Is  DICOCOMCLASSIRIS.Ordre%Type;
-- --------------------------------------------------------------------
-- Record : DICOCOMCLASSIRIS
-- --------------------------------------------------------------------
  Type DICOCOMCLASSIRISRec Is Record
  (
	Id_Dicocomclassiris	 DICOCOMCLASSIRIS_Pubres.Id_Dicocomclassiris,
	Dic_Id_Dicocomclassiris	 DICOCOMCLASSIRIS_Pubres.Dic_Id_Dicocomclassiris,
	Libelle	 DICOCOMCLASSIRIS_Pubres.Libelle,
	Ordre	 DICOCOMCLASSIRIS_Pubres.Ordre);

  Type DICOCOMCLASSIRISRec2 Is Record
  (
	Id_Dicocomclassiris	 	DICOCOMCLASSIRIS_Pubres.Id_Dicocomclassiris,
	Libelle	 				DICOCOMCLASSIRIS_Pubres.Libelle,
	Dic_Id_Dicocomclassiris	DICOCOMCLASSIRIS_Pubres.Dic_Id_Dicocomclassiris,
	Dic_Libelle	 			DICOCOMCLASSIRIS_Pubres.Libelle,
	Ordre	 				DICOCOMCLASSIRIS_Pubres.Ordre);

  Type DICOCOMCLASSIRISRec3 Is Record
  (
	Id_Dicocomclassiris	 DICOCOMCLASSIRIS_Pubres.Id_Dicocomclassiris,
	Dic_Id_Dicocomclassiris	 DICOCOMCLASSIRIS_Pubres.Dic_Id_Dicocomclassiris,
	Libelle	 DICOCOMCLASSIRIS_Pubres.Libelle,
	Ordre	 DICOCOMCLASSIRIS_Pubres.Ordre,
	HasChild	 Number);

 Type DICOCOMCLASSIRISRec4 Is Record
  (
	Id_Dicocomclassiris	 DICOCOMCLASSIRIS_Pubres.Id_Dicocomclassiris,
	Libelle	 DICOCOMCLASSIRIS_Pubres.Libelle,
	Dic_Id_Dicocomclassiris	 DICOCOMCLASSIRIS_Pubres.Dic_Id_Dicocomclassiris,
	Dic_Libelle	 DICOCOMCLASSIRIS_Pubres.Libelle);

-- --------------------------------------------------------------------
-- Ref Cursor : DICOCOMCLASSIRIS
-- --------------------------------------------------------------------
  Type DICOCOMCLASSIRISCurTyp 	Is Ref Cursor Return DICOCOMCLASSIRIS_Pubres.DICOCOMCLASSIRISRec;
  Type DICOCOMCLASSIRISCurTyp2 	Is Ref Cursor Return DICOCOMCLASSIRIS_Pubres.DICOCOMCLASSIRISRec2;
  Type DICOCOMCLASSIRISCurTyp3 	Is Ref Cursor Return DICOCOMCLASSIRIS_Pubres.DICOCOMCLASSIRISRec3;
  Type DICOCOMCLASSIRISCurTyp4 	Is Ref Cursor Return DICOCOMCLASSIRIS_Pubres.DICOCOMCLASSIRISRec4;
  Type DICOCOMCLASSIRISCurRef   Is Ref Cursor;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : DICOCOMCLASSIRIS
-- --------------------------------------------------------------------
  Type Id_DicocomclassirisTab	Is Table Of DICOCOMCLASSIRIS_Pubres.Id_Dicocomclassiris Index By Binary_Integer;
  Type Dic_Id_DicocomclassirisTab	Is Table Of DICOCOMCLASSIRIS_Pubres.Dic_Id_Dicocomclassiris Index By Binary_Integer;
  Type LibelleTab	Is Table Of DICOCOMCLASSIRIS_Pubres.Libelle Index By Binary_Integer;
  Type OrdreTab	Is Table Of DICOCOMCLASSIRIS_Pubres.Ordre Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : DICOCOMCLASSIRIS
-- --------------------------------------------------------------------
  Type DICOCOMCLASSIRISTabRec 	Is Table Of DICOCOMCLASSIRIS_Pubres.DICOCOMCLASSIRISRec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End DICOCOMCLASSIRIS_Pubres;
/
CREATE OR REPLACE Package DICOT_ATC_IRIS_Pubres Is
-- ====================================================================
-- Script     : DICOT_ATC_IRIS_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 31/01/02
-- Auteur     : AL
-- ====================================================================

-- --------------------------------------------------------------------
-- Sous-types table : DICOT_ATC_IRIS
-- --------------------------------------------------------------------
  SubType Id_DicoT_ATC_IRIS	 Is  DICOT_ATC_IRIS.Id_DicoT_ATC_IRIS%Type;
  SubType Dic_Id_DicoT_ATC_IRIS	 Is  DICOT_ATC_IRIS.Dic_Id_DicoT_ATC_IRIS%Type;
  SubType Libelle	 Is  DICOT_ATC_IRIS.Libelle%Type;
-- --------------------------------------------------------------------
-- Record : DICOT_ATC_IRIS
-- --------------------------------------------------------------------
  Type DICOT_ATC_IRISRec Is Record
  (
	Id_DicoT_ATC_IRIS	 DICOT_ATC_IRIS_Pubres.Id_DicoT_ATC_IRIS,
	Code			 DICOT_ATC_IRIS_Pubres.Libelle,
	Libelle	 DICOT_ATC_IRIS_Pubres.Libelle,
	HasChild	 Number);

  Type DICOT_ATC_IRISRec2 Is Record
  (
	Id_DicoT_ATC_IRIS	 	DICOT_ATC_IRIS_Pubres.Id_DicoT_ATC_IRIS,
	Code				DICOT_ATC_IRIS_Pubres.Libelle,
	Libelle	 				DICOT_ATC_IRIS_Pubres.Libelle,
	Dic_Id_DicoT_ATC_IRIS	DICOT_ATC_IRIS_Pubres.Dic_Id_DicoT_ATC_IRIS,
	Dic_Code	 			DICOT_ATC_IRIS_Pubres.Libelle,
	Dic_Libelle	 				DICOT_ATC_IRIS_Pubres.Libelle);


-- --------------------------------------------------------------------
-- Ref Cursor : DICOT_ATC_IRIS
-- --------------------------------------------------------------------
  Type DICOT_ATC_IRISCurTyp 	Is Ref Cursor Return DICOT_ATC_IRIS_Pubres.DICOT_ATC_IRISRec;
  Type DICOT_ATC_IRISCurTyp2 	Is Ref Cursor Return DICOT_ATC_IRIS_Pubres.DICOT_ATC_IRISRec2;

-- --------------------------------------------------------------------
-- tableaux colonnes de table : DICOT_ATC_IRIS
-- --------------------------------------------------------------------
  Type Id_DicoT_ATC_IRISTab	Is Table Of DICOT_ATC_IRIS_Pubres.Id_DicoT_ATC_IRIS Index By Binary_Integer;
  Type Dic_Id_DicoT_ATC_IRISTab	Is Table Of DICOT_ATC_IRIS_Pubres.Dic_Id_DicoT_ATC_IRIS Index By Binary_Integer;
  Type LibelleTab	Is Table Of DICOT_ATC_IRIS_Pubres.Libelle Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : DICOT_ATC_IRIS
-- --------------------------------------------------------------------
  Type DICOT_ATC_IRISTabRec 	Is Table Of DICOT_ATC_IRIS_Pubres.DICOT_ATC_IRISRec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End DICOT_ATC_IRIS_Pubres;
/
CREATE OR REPLACE Package DICOT_EPHMRA_Pubres Is
-- ====================================================================
-- Script     : DICOT_EPHMRA_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:33
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

-- --------------------------------------------------------------------
-- Sous-types table : DICOT_EPHMRA
-- --------------------------------------------------------------------
  SubType Id_DICOEPHMRA	 Is  DICOEPHMRA.Id_DICOEPHMRA%Type;
  SubType Dic_Id_DICOEPHMRA	 Is  DICOEPHMRA.Dic_Id_DICOEPHMRA%Type;
  SubType Libelle	 Is  DICOEPHMRA.Libelle%Type;
  SubType Ordre	 Is  DICOEPHMRA.Ordre%Type;
-- --------------------------------------------------------------------
-- Record : DICOT_EPHMRA
-- --------------------------------------------------------------------
  Type DICOT_EPHMRARec Is Record
  (
	Id_DICOEPHMRA	 DICOT_EPHMRA_Pubres.Id_DICOEPHMRA,
	Dic_Id_DICOEPHMRA	 DICOT_EPHMRA_Pubres.Dic_Id_DICOEPHMRA,
	Libelle	 DICOT_EPHMRA_Pubres.Libelle,
	Ordre	 DICOT_EPHMRA_Pubres.Ordre);



-- --------------------------------------------------------------------
-- Ref Cursor : DICOT_EPHMRA
-- --------------------------------------------------------------------
  Type DICOT_EPHMRACurTyp 	Is Ref Cursor Return DICOT_EPHMRA_Pubres.DICOT_EPHMRARec;

-- --------------------------------------------------------------------
-- tableaux colonnes de table : DICOT_EPHMRA
-- --------------------------------------------------------------------
  Type Id_DICOT_EPHMRATab	Is Table Of DICOT_EPHMRA_Pubres.Id_DICOEPHMRA Index By Binary_Integer;
  Type Dic_Id_DICOT_EPHMRATab	Is Table Of DICOT_EPHMRA_Pubres.Dic_Id_DICOEPHMRA Index By Binary_Integer;
  Type LibelleTab	Is Table Of DICOT_EPHMRA_Pubres.Libelle Index By Binary_Integer;
  Type OrdreTab	Is Table Of DICOT_EPHMRA_Pubres.Ordre Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : DICOT_EPHMRA
-- --------------------------------------------------------------------
  Type DICOT_EPHMRATabRec 	Is Table Of DICOT_EPHMRA_Pubres.DICOT_EPHMRARec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End DICOT_EPHMRA_Pubres;
/
CREATE OR REPLACE PACKAGE GPE_GENERIQUE_PUBRES IS

  -- Author  : MALIKA LAGHLA
  -- Created : 12/03/2003 11:52:16
  -- Purpose : Curseurs sur les groupes génériques



  -- Public function and procedure declarations
-- --------------------------------------------------------------------
-- Sous-types table : SPEPRESENTATION
-- --------------------------------------------------------------------

  SubType  ID_DICOCODEGENE       Is  SPEPRESENTATION.ID_DICOCODEGENE%Type;
  SubType  CIP                   Is  SPEPRESENTATION.CIP%Type;
--  SubType  CODEREFERANTGENERIQUE Is  SPEPRESENTATION.CODEREFERANTGENERIQUE%Type;
  SubType  LIBELLE               Is  DICOCODEGENE.LIBELLE%Type;
  SubType  DOSAGE                Is  SPECIALITE.DOSAGE%Type;
  SubType  FORME                 Is  SPECIALITE.FORME%Type;
  SubType  VOIE                  Is  SPEVOIE.VOIE%Type;
 -- SubType   Is  NBElement number,
  SubType  CODEEXPEN             Is  DICOCODEGENE.CODEEXPEN%Type;
  SubType  CODEINDIC             Is  DICOCODEGENE.CODEINDIC%Type;
  SubType  CODECI                Is  DICOCODEGENE.CODECI%Type;
  SubType  CODECIALLERGIES       Is  DICOCODEGENE.CODECIALLERGIES%Type;
  SubType  CODEIAM               Is  DICOCODEGENE.CODEIAM%Type;

 Type GPE_GENERIQUERec Is Record
  (
     ID_DICOCODEGENE          GPE_GENERIQUE_PUBRES.ID_DICOCODEGENE,
     CODEGroupGen             varchar2(10),
     TypeGroupe               varchar2(10),
     LIBELLE                  GPE_GENERIQUE_PUBRES.LIBELLE,
     DOSAGE                   GPE_GENERIQUE_PUBRES.DOSAGE,
     FORME                    GPE_GENERIQUE_PUBRES.FORME,
     VOIE                     GPE_GENERIQUE_PUBRES.VOIE,
     NBElement                varchar2(10),
     CODEEXPEN                GPE_GENERIQUE_PUBRES.CODEEXPEN,
     CODEINDIC                GPE_GENERIQUE_PUBRES.CODEEXPEN,
     CODECI                   GPE_GENERIQUE_PUBRES.CODECI,
     CODECIALLERGIES          GPE_GENERIQUE_PUBRES.CODECIALLERGIES,
     CODEIAM                  GPE_GENERIQUE_PUBRES.CODEIAM
     );

-- --------------------------------------------------------------------
-- Ref Cursor :
-- --------------------------------------------------------------------
  Type GPE_GENERIQUECurTyp 	Is Ref Cursor Return GPE_GENERIQUE_PUBRES.GPE_GENERIQUERec;
  Type GPE_GENERIQUECurRef 	Is Ref Cursor;


end GPE_GENERIQUE_PUBRES;
/
CREATE OR REPLACE Package GROUPINDIC_Pubres Is
-- ====================================================================
-- Script     : GROUPINDIC_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:33
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

-- --------------------------------------------------------------------
-- Sous-types table : GROUPINDIC
-- --------------------------------------------------------------------
  SubType Id_Groupindic	 Is  GROUPINDIC.Id_Groupindic%Type;
  SubType Libelle	 Is  GROUPINDIC.Libelle%Type;
  SubType Type_	 Is  GROUPINDIC.Type_%Type;
-- --------------------------------------------------------------------
-- Record : GROUPINDIC
-- --------------------------------------------------------------------
  Type GROUPINDICRec Is Record
  (
	Id_Groupindic	 GROUPINDIC_Pubres.Id_Groupindic,
	Libelle	 GROUPINDIC_Pubres.Libelle,
	Type_	 GROUPINDIC_Pubres.Type_);
-- --------------------------------------------------------------------
-- Ref Cursor : GROUPINDIC
-- --------------------------------------------------------------------
  Type GROUPINDICCurTyp 	Is Ref Cursor Return GROUPINDIC_Pubres.GROUPINDICRec;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : GROUPINDIC
-- --------------------------------------------------------------------
  Type Id_GroupindicTab	Is Table Of GROUPINDIC_Pubres.Id_Groupindic Index By Binary_Integer;
  Type LibelleTab	Is Table Of GROUPINDIC_Pubres.Libelle Index By Binary_Integer;
  Type Type_Tab	Is Table Of GROUPINDIC_Pubres.Type_ Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : GROUPINDIC
-- --------------------------------------------------------------------
  Type GROUPINDICTabRec 	Is Table Of GROUPINDIC_Pubres.GROUPINDICRec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End GROUPINDIC_Pubres;
/
CREATE OR REPLACE Package IAMCLASSE_IAMCOUPLE_Pubres Is
-- ====================================================================
-- Script     : IAMCLASSE_IAMCOUPLE_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:33
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

-- --------------------------------------------------------------------
-- Sous-types table : IAMCLASSE_IAMCOUPLE
-- --------------------------------------------------------------------
  SubType Id_Iamclasse	 Is  IAMCLASSE_IAMCOUPLE.Id_Iamclasse%Type;
  SubType Id_Iamcouple	 Is  IAMCLASSE_IAMCOUPLE.Id_Iamcouple%Type;
-- --------------------------------------------------------------------
-- Record : IAMCLASSE_IAMCOUPLE
-- --------------------------------------------------------------------
  Type IAMCLASSE_IAMCOUPLERec Is Record
  (
	Id_Iamclasse	 IAMCLASSE_IAMCOUPLE_Pubres.Id_Iamclasse,
	Id_Iamcouple	 IAMCLASSE_IAMCOUPLE_Pubres.Id_Iamcouple);
-- --------------------------------------------------------------------
-- Ref Cursor : IAMCLASSE_IAMCOUPLE
-- --------------------------------------------------------------------
  Type IAMCLASSE_IAMCOUPLECurTyp 	Is Ref Cursor Return IAMCLASSE_IAMCOUPLE_Pubres.IAMCLASSE_IAMCOUPLERec;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : IAMCLASSE_IAMCOUPLE
-- --------------------------------------------------------------------
  Type Id_IamclasseTab	Is Table Of IAMCLASSE_IAMCOUPLE_Pubres.Id_Iamclasse Index By Binary_Integer;
  Type Id_IamcoupleTab	Is Table Of IAMCLASSE_IAMCOUPLE_Pubres.Id_Iamcouple Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : IAMCLASSE_IAMCOUPLE
-- --------------------------------------------------------------------
  Type IAMCLASSE_IAMCOUPLETabRec 	Is Table Of IAMCLASSE_IAMCOUPLE_Pubres.IAMCLASSE_IAMCOUPLERec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End IAMCLASSE_IAMCOUPLE_Pubres;
/
CREATE OR REPLACE Package IAMCLASS_Pubres Is
-- ====================================================================
-- Script     : IAMCLASS_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:33
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

-- --------------------------------------------------------------------
-- Sous-types table : IAMCLASS
-- --------------------------------------------------------------------
  SubType Id_Iamclasse	 Is  IAMCLASS.Id_Iamclasse%Type;
  SubType Classe	 Is  IAMCLASS.Classe%Type;
  SubType Remarque	 Is  IAMCLASS.Remarque%Type;
  SubType Dcreat	 Is  IAMCLASS.Dcreat%Type;
  SubType Dmodif	 Is  IAMCLASS.Dmodif%Type;
  SubType Drevis	 Is  IAMCLASS.Drevis%Type;
-- --------------------------------------------------------------------
-- Record : IAMCLASS
-- --------------------------------------------------------------------
  Type IAMCLASSRec Is Record
  (
	Id_Iamclasse	 IAMCLASS_Pubres.Id_Iamclasse,
	Classe	 IAMCLASS_Pubres.Classe,
	Remarque	 IAMCLASS_Pubres.Remarque,
	Dcreat	 IAMCLASS_Pubres.Dcreat,
	Dmodif	 IAMCLASS_Pubres.Dmodif,
	Drevis	 IAMCLASS_Pubres.Drevis);
-- --------------------------------------------------------------------
-- Ref Cursor : IAMCLASS
-- --------------------------------------------------------------------
  Type IAMCLASSCurTyp 	Is Ref Cursor Return IAMCLASS_Pubres.IAMCLASSRec;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : IAMCLASS
-- --------------------------------------------------------------------
  Type Id_IamclasseTab	Is Table Of IAMCLASS_Pubres.Id_Iamclasse Index By Binary_Integer;
  Type ClasseTab	Is Table Of IAMCLASS_Pubres.Classe Index By Binary_Integer;
  Type RemarqueTab	Is Table Of IAMCLASS_Pubres.Remarque Index By Binary_Integer;
  Type DcreatTab	Is Table Of IAMCLASS_Pubres.Dcreat Index By Binary_Integer;
  Type DmodifTab	Is Table Of IAMCLASS_Pubres.Dmodif Index By Binary_Integer;
  Type DrevisTab	Is Table Of IAMCLASS_Pubres.Drevis Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : IAMCLASS
-- --------------------------------------------------------------------
  Type IAMCLASSTabRec 	Is Table Of IAMCLASS_Pubres.IAMCLASSRec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End IAMCLASS_Pubres;
/
CREATE OR REPLACE PACKAGE      "IAMCOUPLE_PUBRES"  AS
-- ===================================================================================================
-- Script      : IAMCOUPLE_Pubres    Type : Package
-- Objet       : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner       : VIDAL
-- Création    : 14/09/99 18:31:33
-- Auteur      : AGDF (2000) from Data to Information
-- Généré par  : Kercaps - AGDF_GEN_PAC Version : 2.02
-- Modifié par : Manuel Rouault - 23/03/2001 : Ajout du curseur IAMSPECurTyp et record IAMCOUPLESPERec
-- ====================================================================================================
-- --------------------------------------------------------------------
-- Sous-types table : IAMCOUPLE
-- --------------------------------------------------------------------
  SubType Id_Iamcouple   Is  IAMCOUPLE.Id_Iamcouple%Type;
  SubType Niveaugravite  Is  IAMCOUPLE.Niveaugravite%Type;
  SubType Risqetmecan    Is  IAMCOUPLE.Risqetmecan%Type;
  SubType Conduiteatenir Is  IAMCOUPLE.Conduiteatenir%Type;
  SubType Remarque       Is  IAMCOUPLE.Remarque%Type;
  SubType Dcreat         Is  IAMCOUPLE.Dcreat%Type;
  SubType Dmodif         Is  IAMCOUPLE.Dmodif%Type;
  SubType Drevis         Is  IAMCOUPLE.Drevis%Type;
  -- --------------------------------------------------------------------
-- Sous-types table : SPEPRESENTATION
-- --------------------------------------------------------------------
  SubType id_spepresentation   Is   SPEPRESENTATION.Id_Spepresentation%Type;
  SubType Libelle_CIP          Is   VARCHAR2(125);
-- --------------------------------------------------------------------
-- Record : IAMCOUPLE
-- --------------------------------------------------------------------
  Type IAMCOUPLERec Is Record
  (
        Id_Iamcouple     IAMCOUPLE_Pubres.Id_Iamcouple,
        Niveaugravite    IAMCOUPLE_Pubres.Niveaugravite,
        Risqetmecan      IAMCOUPLE_Pubres.Risqetmecan,
        Conduiteatenir   IAMCOUPLE_Pubres.Conduiteatenir,
        Remarque         IAMCOUPLE_Pubres.Remarque,
        Dcreat           IAMCOUPLE_Pubres.Dcreat,
        Dmodif           IAMCOUPLE_Pubres.Dmodif,
        Drevis           IAMCOUPLE_Pubres.Drevis);
-- --------------------------------------------------------------------
-- Ref Cursor : IAMCOUPLE
-- --------------------------------------------------------------------
  Type IAMCOUPLECurTyp  Is Ref Cursor Return IAMCOUPLE_Pubres.IAMCOUPLERec;
-- --------------------------------------------------------------------
-- Record : IAMCOUPLE2
-- --------------------------------------------------------------------
  Type IAMCOUPLERec2 Is Record
  (
        Id_Iamcouple     IAMCOUPLE_Pubres.Id_Iamcouple,
        Id_Iamcouple_2   IAMCOUPLE_Pubres.Id_Iamcouple,
        Classe           IAMCLASS_Pubres.Classe,
        Niveaugravite    IAMCOUPLE_Pubres.Niveaugravite,
        Risqetmecan      IAMCOUPLE_Pubres.Risqetmecan,
        Conduiteatenir   IAMCOUPLE_Pubres.Conduiteatenir,
        Remarque         IAMCOUPLE_Pubres.Remarque,
        Dcreat           IAMCOUPLE_Pubres.Dcreat,
        Dmodif           IAMCOUPLE_Pubres.Dmodif,
        Drevis           IAMCOUPLE_Pubres.Drevis);
-- --------------------------------------------------------------------
-- Ref Cursor : IAMCOUPLE2
-- --------------------------------------------------------------------
  Type IAMCOUPLECurTyp2         Is Ref Cursor Return IAMCOUPLE_Pubres.IAMCOUPLERec2;
-- --------------------------------------------------------------------
-- Record : IAMCOUPLE3
-- --------------------------------------------------------------------
  Type IAMCOUPLERec3 Is Record
  (
        id_specialite    SPECIALITE_Pubres.Id_specialite,
        denomspe         SPECIALITE_Pubres.denomspe,
        id_iamclasse1    SPECIALITE_IAMCLASS_pubres.id_iamclasse,
        classe1          IAMCLASS_Pubres.Classe,
        id_specialite2   SPECIALITE_Pubres.Id_specialite,
        denomspe2        SPECIALITE_Pubres.denomspe,
        id_iamclasse2    IAMCLASSE_IAMCOUPLE_Pubres.id_iamclasse,
        classe2          IAMCLASS_Pubres.Classe,
        Niveaugravite    IAMCOUPLE_Pubres.Niveaugravite,
        Risqetmecan      IAMCOUPLE_Pubres.Risqetmecan,
        Conduiteatenir   IAMCOUPLE_Pubres.Conduiteatenir);
-- --------------------------------------------------------------------
-- Ref Cursor : IAMCOUPLE3
-- --------------------------------------------------------------------
  Type IAMCOUPLECurTyp3 Is Ref Cursor;
-- --------------------------------------------------------------------
-- Record : IAMCOUPLESPE
-- --------------------------------------------------------------------
  Type IAMCOUPLESPERec Is Record
  (
        id_spepresentation   IAMCOUPLE_Pubres.Id_spepresentation,
        Libelle_CIP          IAMCOUPLE_Pubres.Libelle_CIP,
        id_iamclasse         SPECIALITE_IAMCLASS_pubres.id_iamclasse,
        classe               IAMCLASS_Pubres.Classe);
-- --------------------------------------------------------------------
-- Ref Cursor : IAMSPE
-- --------------------------------------------------------------------
  Type IAMSPECOUPLESCurTyp         Is Ref Cursor Return IAMCOUPLE_Pubres.IAMCOUPLESPERec;
  Type IAMSPECurTyp Is Ref Cursor;
-- --------------------------------------------------------------------
-- Record : IAMCOUPLESPE
-- --------------------------------------------------------------------
  Type IAMCOUPLESPERec2 Is Record
  (
        id_spepresentation   IAMCOUPLE_Pubres.Id_spepresentation,
        Libelle_CIP          IAMCOUPLE_Pubres.Libelle_CIP);
-- --------------------------------------------------------------------
-- Ref Cursor : IAMSPE2
-- --------------------------------------------------------------------
  Type IAMSPECurTyp2 Is Ref Cursor;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : IAMCOUPLE
-- --------------------------------------------------------------------
  Type Id_IamcoupleTab   Is Table Of IAMCOUPLE_Pubres.Id_Iamcouple Index By Binary_Integer;
  Type NiveaugraviteTab  Is Table Of IAMCOUPLE_Pubres.Niveaugravite Index By Binary_Integer;
  Type RisqetmecanTab    Is Table Of IAMCOUPLE_Pubres.Risqetmecan Index By Binary_Integer;
  Type ConduiteatenirTab Is Table Of IAMCOUPLE_Pubres.Conduiteatenir Index By Binary_Integer;
  Type RemarqueTab       Is Table Of IAMCOUPLE_Pubres.Remarque Index By Binary_Integer;
  Type DcreatTab         Is Table Of IAMCOUPLE_Pubres.Dcreat Index By Binary_Integer;
  Type DmodifTab         Is Table Of IAMCOUPLE_Pubres.Dmodif Index By Binary_Integer;
  Type DrevisTab         Is Table Of IAMCOUPLE_Pubres.Drevis Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : IAMCOUPLE
-- --------------------------------------------------------------------
  Type IAMCOUPLETabRec  Is Table Of IAMCOUPLE_Pubres.IAMCOUPLERec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End IAMCOUPLE_Pubres;
/
CREATE OR REPLACE Package INDEXSUB_REL_Pubres Is
-- ====================================================================
-- Script     : INDEXSUB_REL_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:33
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

-- --------------------------------------------------------------------
-- Sous-types table : INDEXSUB_REL
-- --------------------------------------------------------------------
  SubType Id_T_Sub	 Is  INDEXSUB_REL.Id_T_Sub%Type;
  SubType Id_Typeindex	 Is  INDEXSUB_REL.Id_Typeindex%Type;
  SubType Texte	 Is  INDEXSUB_REL.Texte%Type;
-- --------------------------------------------------------------------
-- Record : INDEXSUB_REL
-- --------------------------------------------------------------------
  Type INDEXSUB_RELRec Is Record
  (
	Id_T_Sub	 INDEXSUB_REL_Pubres.Id_T_Sub,
	Id_Typeindex	 INDEXSUB_REL_Pubres.Id_Typeindex,
	Texte	 INDEXSUB_REL_Pubres.Texte);
-- --------------------------------------------------------------------
-- Ref Cursor : INDEXSUB_REL
-- --------------------------------------------------------------------
  Type INDEXSUB_RELCurTyp 	Is Ref Cursor Return INDEXSUB_REL_Pubres.INDEXSUB_RELRec;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : INDEXSUB_REL
-- --------------------------------------------------------------------
  Type Id_T_SubTab	Is Table Of INDEXSUB_REL_Pubres.Id_T_Sub Index By Binary_Integer;
  Type Id_TypeindexTab	Is Table Of INDEXSUB_REL_Pubres.Id_Typeindex Index By Binary_Integer;
  Type TexteTab	Is Table Of INDEXSUB_REL_Pubres.Texte Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : INDEXSUB_REL
-- --------------------------------------------------------------------
  Type INDEXSUB_RELTabRec 	Is Table Of INDEXSUB_REL_Pubres.INDEXSUB_RELRec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End INDEXSUB_REL_Pubres;
/
CREATE OR REPLACE Package LABORATOIRE_Pubres Is
-- ====================================================================
-- Script     : LABORATOIRE_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:33
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

-- --------------------------------------------------------------------
-- Sous-types table : LABORATOIRE
-- --------------------------------------------------------------------
  SubType Id_Laboratoire	 Is  LABORATOIRE.Id_Laboratoire%Type;
  SubType Lab_Id_Laboratoire Is  LABORATOIRE.Lab_Id_Laboratoire%Type;
  SubType Laboratoir	 	 Is  LABORATOIRE.Laboratoire%Type;
  SubType Adr1	 			 Is  LABORATOIRE.Adr1%Type;
  SubType Adr2	 			 Is  LABORATOIRE.Adr2%Type;
  SubType Adr3	 			 Is  LABORATOIRE.Adr3%Type;
  SubType Cp	 			 Is  LABORATOIRE.Cp%Type;
  SubType Ville	 			 Is  LABORATOIRE.Ville%Type;
  SubType Cedex	 			 Is  LABORATOIRE.Cedex%Type;
  SubType Pays	 			 Is  LABORATOIRE.Pays%Type;
  SubType Telephone	 		 Is  LABORATOIRE.Telephone%Type;
  SubType Telecopie	 		 Is  LABORATOIRE.Telecopie%Type;
  SubType Email	 			 Is  LABORATOIRE.Email%Type;
  SubType Internet	 		 Is  LABORATOIRE.Internet%Type;
  SubType Commentaire	 	 Is  LABORATOIRE.Commentaire%Type;
  SubType Mort	     		 Is  LABORATOIRE.Mort%Type;
  SubType Dcreat	   		 Is  LABORATOIRE.Dcreat%Type;
  SubType Dmodif	   		 Is  LABORATOIRE.Dmodif%Type;
  SubType Drevis	   		 Is  LABORATOIRE.Drevis%Type;
  SubType Vignette	 		 Is  LABORATOIRE.Vignette%Type;
-- --------------------------------------------------------------------
-- Record : LABORATOIRE
-- --------------------------------------------------------------------
  Type LABORATOIRERec Is Record
  (
	Id_Laboratoire	  	 LABORATOIRE_Pubres.Id_Laboratoire,
	Lab_Id_Laboratoire	 LABORATOIRE_Pubres.Lab_Id_Laboratoire,
	Laboratoir	 		 LABORATOIRE_Pubres.Laboratoir,
	Adr1	 			 LABORATOIRE_Pubres.Adr1,
	Adr2	 			 LABORATOIRE_Pubres.Adr2,
	Adr3	 			 LABORATOIRE_Pubres.Adr3,
	Cp	 				 LABORATOIRE_Pubres.Cp,
	Ville	 			 LABORATOIRE_Pubres.Ville,
	Cedex	 			 LABORATOIRE_Pubres.Cedex,
	Pays	 			 LABORATOIRE_Pubres.Pays,
	Telephone	 		 LABORATOIRE_Pubres.Telephone,
	Telecopie	 		 LABORATOIRE_Pubres.Telecopie,
	Email	 			 LABORATOIRE_Pubres.Email,
	Internet	 		 LABORATOIRE_Pubres.Internet,
	Commentaire	 		 LABORATOIRE_Pubres.Commentaire,
	Mort	 			 LABORATOIRE_Pubres.Mort,
	Dcreat	 			 LABORATOIRE_Pubres.Dcreat,
	Dmodif	 			 LABORATOIRE_Pubres.Dmodif,
	Drevis	 			 LABORATOIRE_Pubres.Drevis,
  	Vignette 			 LABORATOIRE_Pubres.Vignette);
-- --------------------------------------------------------------------
-- Ref Cursor : LABORATOIRE
-- --------------------------------------------------------------------
  Type LABORATOIRECurTyp 	Is Ref Cursor Return LABORATOIRE_Pubres.LABORATOIRERec;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : LABORATOIRE
-- --------------------------------------------------------------------
  Type Id_LaboratoireTab		Is Table Of LABORATOIRE_Pubres.Id_Laboratoire Index By Binary_Integer;
  Type Lab_Id_LaboratoireTab	Is Table Of LABORATOIRE_Pubres.Lab_Id_Laboratoire Index By Binary_Integer;
  Type LaboratoirTab			Is Table Of LABORATOIRE_Pubres.Laboratoir Index By Binary_Integer;
  Type Adr1Tab					Is Table Of LABORATOIRE_Pubres.Adr1 Index By Binary_Integer;
  Type Adr2Tab					Is Table Of LABORATOIRE_Pubres.Adr2 Index By Binary_Integer;
  Type Adr3Tab					Is Table Of LABORATOIRE_Pubres.Adr3 Index By Binary_Integer;
  Type CpTab					Is Table Of LABORATOIRE_Pubres.Cp Index By Binary_Integer;
  Type VilleTab					Is Table Of LABORATOIRE_Pubres.Ville Index By Binary_Integer;
  Type CedexTab					Is Table Of LABORATOIRE_Pubres.Cedex Index By Binary_Integer;
  Type PaysTab					Is Table Of LABORATOIRE_Pubres.Pays Index By Binary_Integer;
  Type TelephoneTab				Is Table Of LABORATOIRE_Pubres.Telephone Index By Binary_Integer;
  Type TelecopieTab				Is Table Of LABORATOIRE_Pubres.Telecopie Index By Binary_Integer;
  Type EmailTab					Is Table Of LABORATOIRE_Pubres.Email Index By Binary_Integer;
  Type InternetTab				Is Table Of LABORATOIRE_Pubres.Internet Index By Binary_Integer;
  Type CommentaireTab			Is Table Of LABORATOIRE_Pubres.Commentaire Index By Binary_Integer;
  Type MortTab					Is Table Of LABORATOIRE_Pubres.Mort Index By Binary_Integer;
  Type DcreatTab				Is Table Of LABORATOIRE_Pubres.Dcreat Index By Binary_Integer;
  Type DmodifTab				Is Table Of LABORATOIRE_Pubres.Dmodif Index By Binary_Integer;
  Type DrevisTab				Is Table Of LABORATOIRE_Pubres.Drevis Index By Binary_Integer;
  Type VignetteTab				Is Table Of LABORATOIRE_Pubres.Vignette Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : LABORATOIRE
-- --------------------------------------------------------------------
  Type LABORATOIRETabRec 	Is Table Of LABORATOIRE_Pubres.LABORATOIRERec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End LABORATOIRE_Pubres;
/
CREATE OR REPLACE Package PHARMACODYNAMIE_Pubres Is
-- ====================================================================
-- Script     : PHARMACODYNAMIE_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:33
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

-- --------------------------------------------------------------------
-- Sous-types table : PHARMACODYNAMIE
-- --------------------------------------------------------------------
  SubType Id_Specialite  Is  SPEPHARMACODYNAMIE.Id_Specialite%Type;
  SubType Atc_Iris  Is  SPEPHARMACODYNAMIE.Atc_Iris%Type;
  SubType Batc  Is  SPEPHARMACODYNAMIE.Batc%Type;
  SubType Codeephmra  Is  SPEPHARMACODYNAMIE.Codeephmra%Type;
  SubType Commamm  Is  SPEPHARMACODYNAMIE.Commamm%Type;
  SubType Dcreat  Is  SPEPHARMACODYNAMIE.Dcreat%Type;
  SubType Dmodif  Is  SPEPHARMACODYNAMIE.Dmodif%Type;
-- --------------------------------------------------------------------
-- Record : PHARMACODYNAMIE
-- --------------------------------------------------------------------
  Type PHARMACODYNAMIERec Is Record
  (
 Id_Specialite  PHARMACODYNAMIE_Pubres.Id_Specialite,
 Atc_Iris  PHARMACODYNAMIE_Pubres.Atc_Iris,
 Batc  PHARMACODYNAMIE_Pubres.Batc,
 Codeephmra  PHARMACODYNAMIE_Pubres.Codeephmra,
 Commamm  PHARMACODYNAMIE_Pubres.Commamm,
 Dcreat  PHARMACODYNAMIE_Pubres.Dcreat,
 Dmodif  PHARMACODYNAMIE_Pubres.Dmodif);
-- --------------------------------------------------------------------
-- Ref Cursor : PHARMACODYNAMIE
-- --------------------------------------------------------------------
  Type PHARMACODYNAMIECurTyp  Is Ref Cursor Return PHARMACODYNAMIE_Pubres.PHARMACODYNAMIERec;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : PHARMACODYNAMIE
-- --------------------------------------------------------------------
  Type Id_SpecialiteTab Is Table Of PHARMACODYNAMIE_Pubres.Id_Specialite Index By Binary_Integer;
  Type Atc_IrisTab Is Table Of PHARMACODYNAMIE_Pubres.Atc_Iris Index By Binary_Integer;
  Type BatcTab Is Table Of PHARMACODYNAMIE_Pubres.Batc Index By Binary_Integer;
  Type CodeephmraTab Is Table Of PHARMACODYNAMIE_Pubres.Codeephmra Index By Binary_Integer;
  Type CommammTab Is Table Of PHARMACODYNAMIE_Pubres.Commamm Index By Binary_Integer;
  Type DcreatTab Is Table Of PHARMACODYNAMIE_Pubres.Dcreat Index By Binary_Integer;
  Type DmodifTab Is Table Of PHARMACODYNAMIE_Pubres.Dmodif Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : PHARMACODYNAMIE
-- --------------------------------------------------------------------
  Type PHARMACODYNAMIETabRec  Is Table Of PHARMACODYNAMIE_Pubres.PHARMACODYNAMIERec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End PHARMACODYNAMIE_Pubres;
/
CREATE OR REPLACE Package RMC_CLE_Pubres Is
-- ====================================================================
-- Script     : RMC_CLE_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 15/12/00 14:23:41
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.10
-- ====================================================================

  -- ---------------------------------------------------------------
  -- Fonction         : Version
  -- Objet            : Retourne les informations de version du package
  -- --------------------------------------------------------------
  Function Version   Return Varchar2;
  Pragma Restrict_references(Version, WNDS, WNPS);
-- --------------------------------------------------------------------
-- Sous-types table : RMC_CLE
-- --------------------------------------------------------------------
  SubType Cle_Ide  Is  RMC_CLE.Cle_Ide%Type;
  SubType Ori_Ide  Is  RMC_CLE.Ori_Ide%Type;
  SubType Type_Ide  Is  RMC_CLE.Type_Ide%Type;
  SubType Cle_Lib  Is  RMC_CLE.Cle_Lib%Type;
  SubType Dat_Maj  Is  RMC_CLE.Dat_Maj%Type;
  SubType Usr_Maj  Is  RMC_CLE.Usr_Maj%Type;
  SubType Obs_Maj  Is  RMC_CLE.Obs_Maj%Type;
-- --------------------------------------------------------------------
-- Record : RMC_CLE
-- --------------------------------------------------------------------
  Type RMC_CLERec Is Record
  (
 Cle_Ide  RMC_CLE_Pubres.Cle_Ide,
 Ori_Ide  RMC_CLE_Pubres.Ori_Ide,
 Type_Ide  RMC_CLE_Pubres.Type_Ide,
 Cle_Lib  RMC_CLE_Pubres.Cle_Lib,
 Dat_Maj  RMC_CLE_Pubres.Dat_Maj := SysDate,
 Usr_Maj  RMC_CLE_Pubres.Usr_Maj,
 Obs_Maj  RMC_CLE_Pubres.Obs_Maj);
-- --------------------------------------------------------------------
-- Ref Cursor : RMC_CLE
-- --------------------------------------------------------------------
  Type RMC_CLECurTyp  Is Ref Cursor Return RMC_CLE_Pubres.RMC_CLERec;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : RMC_CLE
-- --------------------------------------------------------------------
  Type Cle_IdeTab Is Table Of RMC_CLE_Pubres.Cle_Ide Index By Binary_Integer;
  Type Ori_IdeTab Is Table Of RMC_CLE_Pubres.Ori_Ide Index By Binary_Integer;
  Type Type_IdeTab Is Table Of RMC_CLE_Pubres.Type_Ide Index By Binary_Integer;
  Type Cle_LibTab Is Table Of RMC_CLE_Pubres.Cle_Lib Index By Binary_Integer;
  Type Dat_MajTab Is Table Of RMC_CLE_Pubres.Dat_Maj Index By Binary_Integer;
  Type Usr_MajTab Is Table Of RMC_CLE_Pubres.Usr_Maj Index By Binary_Integer;
  Type Obs_MajTab Is Table Of RMC_CLE_Pubres.Obs_Maj Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : RMC_CLE
-- --------------------------------------------------------------------
  Type RMC_CLETabRec  Is Table Of RMC_CLE_Pubres.RMC_CLERec Index By Binary_Integer;
  Type TheCurtyp        Is Ref Cursor;
-- ====================================================================
-- Fin de package
-- ====================================================================
End RMC_CLE_Pubres;
/

CREATE OR REPLACE Package Body RMC_CLE_Pubres Is
-- ====================================================================
-- Script     : RMC_CLE_Pubres    Type : Package Body
-- Objet      : Ressources publiques. Fonction version
-- Owner      : VIDAL
-- Création   : 15/12/00 14:23:41
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.10
-- ====================================================================

 LastVersion CONSTANT VARCHAR2(255) := 'RMC_CLE_Pubres - Version 1.0.0 Génération du 15 décembre 2000';
  -- ---------------------------------------------------------------
  -- Fonction         : Version
  -- Objet            : Retourne les informations de version du package
  -- --------------------------------------------------------------
  Function Version   Return Varchar2 Is
  Begin
     Return(LastVersion);
  End Version;
-- ====================================================================
-- Fin de package
-- ====================================================================
End RMC_CLE_Pubres;
/
CREATE OR REPLACE PACKAGE      "RMC_THE_PUBRES"     AS
  LastVersion Constant Varchar2(255) := 'RMC_THE : AGDF - Version 1.0.0 - 30 Nov 2000';
  -- ----------------------------------------------------------
  -- Fonction 		  : Version
  -- Objet	  	  	  : Fournit la version du package
  -- Historique	  	  :
  -- ----------------------------------------------------------
  Function Version
	Return VarChar2;
  Pragma Restrict_References(Version,WNDS,WNPS);
  -- ----------------------------------------------------------
  -- Definition des SUBTYPES nécessaires
  -- ----------------------------------------------------------
  SubType THE_IDE	 Is RMC_THE.THE_IDE%Type;
  SubType TYPE_IDE Is RMC_THE.TYPE_IDE%Type;
  SubType THE_CAF	 Is RMC_THE.THE_CAF%Type;
  SubType THE_LAF	 Is RMC_THE.THE_LAF%Type;
  SubType ID	 	   Is RMC_THE.ID%Type;
  SubType THE_VIS	 Is RMC_THE.THE_VIS%Type;
  SubType DAT_MAJ	 Is RMC_THE.DAT_MAJ%Type;
  SubType USR_MAJ	 Is RMC_THE.USR_MAJ%Type;
  SubType OBS_MAJ	 Is RMC_THE.OBS_MAJ%Type;
  -- ----------------------------------------------------------
  -- Definition des Records
  -- ----------------------------------------------------------
  -- ----------------------------------------------------------
  -- Record pour Table : RMC_THE
  -- ----------------------------------------------------------
  Type RMC_THERec Is Record
  (
	RMC_THE_IDE   RMC_THE_PubRes.THE_IDE,
	TYPE_IDE  	  RMC_THE_PubRes.TYPE_IDE,
	RMC_THE_CAF	  RMC_THE_PubRes.THE_CAF,
	RMC_THE_LAF	  RMC_THE_PubRes.THE_LAF,
	ID		        RMC_THE_PubRes.ID,
	RMC_THE_VIS	  RMC_THE_PubRes.THE_VIS,
	DAT_MAJ	  	  RMC_THE_PubRes.DAT_MAJ,
	USR_MAJ	  	  RMC_THE_PubRes.USR_MAJ,
	OBS_MAJ	  	  RMC_THE_PubRes.OBS_MAJ);
  Type RRMC_THERec Is Record
  (
	RMC_THE_IDE   RMC_THE_PubRes.THE_IDE,
	TYPE_IDE  	  RMC_THE_PubRes.TYPE_IDE,
	RMC_THE_CAF	  RMC_THE_PubRes.THE_CAF,
	RMC_THE_LAF	  RMC_THE_PubRes.THE_LAF,
	ID		        RMC_THE_PubRes.ID);
  Type GINDIC_PROBRec Is Record
  (
        THEIDE           RMC_THE_PubRes.THE_IDE,
        THETYPE          RMC_THE_PubRes.TYPE_IDE,
        THECAF           RMC_THE_PubRes.THE_CAF,
        THELAF           RMC_THE_PubRes.THE_LAF,
        THEID            RMC_THE_PubRes.ID,
        OCCUR            Number);
  Type DETECTRec Is Record
  (
        id_specialite1   SPECIALITE_Pubres.Id_specialite,
        denomspe1        SPECIALITE_Pubres.denomspe,
        id_iamclasse1    SPECIALITE_IAMCLASS_pubres.id_iamclasse,
        classe1          IAMCLASS_Pubres.Classe,
        id_specialite2   SPECIALITE_Pubres.Id_specialite,
        denomspe2        SPECIALITE_Pubres.denomspe,
        id_iamclasse2    IAMCLASSE_IAMCOUPLE_Pubres.id_iamclasse,
        classe2          IAMCLASS_Pubres.Classe,
        Niveaugravite    IAMCOUPLE_Pubres.Niveaugravite,
        Risqetmecan      IAMCOUPLE_Pubres.Risqetmecan,
        Conduiteatenir   IAMCOUPLE_Pubres.Conduiteatenir,
        Cim_ini          RMC_THE_PubRes.THE_IDE,
        Denom_Cim_ini    RMC_THE_PubRes.THE_LAF,
        Flag_p_d_f       Number,
        Cim_fin          RMC_THE_PubRes.THE_IDE,
        Spec             RMC_THE_PubRes.THE_IDE,
        Denom_Spec       RMC_THE_PubRes.THE_LAF,
        Flag_K           Number);
  -- ----------------------------------------------------------
  -- Ref Cursor associé
  -- ----------------------------------------------------------
  Type RMC_THECurTyp 	   Is Ref Cursor Return RMC_THE_PubRes.RMC_THERec;
  Type RRMC_THECurTyp 	 Is Ref Cursor Return RMC_THE_PubRes.RRMC_THERec;
  Type RRMC_THECurTyp1   Is Ref Cursor;
  Type GINDIC_PROBCurTyp Is Ref Cursor;
  Type DETECTCurTyp      Is Ref Cursor;

  Type RMC_THE_LNKRec Is Record
  (
    RMC_THE_OID RMC_THE_Pubres.THE_ide,
    RMC_THE_IDE RMC_THE_Pubres.THE_Ide,
    ORI_SRC 	Varchar2(255),
    RMC_THE_CAF	RMC_THE_Pubres.THE_Caf,
    RMC_THE_Laf	Varchar2(1000),
    RMC_THE_TRI Varchar2(1024),
    RMC_THE_ORI Varchar2(10));
  Type RMC_THERecR Is Record
  (
    RMC_THE_Oid	RMC_THE_PubRes.THE_ide,
    RMC_THE_Caf	RMC_THE_PubRes.THE_Caf,
    RMC_THE_Laf	RMC_THE_PubRes.THE_Laf);
  -- ----------------------------------------------------------
  -- Record pour Table : ATT - Restreint
  -- ----------------------------------------------------------
  --   Type ATTRecR Is Record
  --   (
  -- 	Att_Ide	RMC_THE_PubRes.Att_Ide,
  -- 	Att_Lib	RMC_THE_PubRes.Att_Lib,
  -- 	Att_Typ	RMC_THE_PubRes.Att_Typ);
  -- ----------------------------------------------------------
  -- Ref Cursor associé
  -- ----------------------------------------------------------
  Type RMC_THE_LNKCurTyp 	Is Ref Cursor Return RMC_THE_PubRes.RMC_THE_LNKRec;
  Type RMC_THECurTypR 	    Is Ref Cursor Return RMC_THE_PubRes.RMC_THERecR;
  --  Type ATTCurTypR 	    Is Ref Cursor Return RMC_THE_PubRes.ATTRecR;
  -- ----------------------------------------------------------
  -- Definition des tableaux
  -- ----------------------------------------------------------
  -- ----------------------------------------------------------
  -- Tableau pour Table : RMC_THE
  -- ----------------------------------------------------------
  --  Type ATTTabRecR 	Is Table Of ATTRecR
  --	Index By Binary_Integer;
      Type RMC_THETabRec 	Is Table Of RMC_THERec
        Index By Binary_Integer;
      Type RMC_THE_LnkTabRec 	Is Table Of RMC_THE_LnkRec
	Index By Binary_Integer;
      Type RMC_THE_OidTab	Is Table Of RMC_THE_PubRes.THE_ide
	Index By Binary_Integer;
  --  Type ORI_IdeTab	Is Table Of RMC_THE_PubRes.ORI_Ide
  --	Index By Binary_Integer;
      Type RMC_THE_IdeTab	Is Table Of RMC_THE_PubRes.THE_Ide
	Index By Binary_Integer;
  --  Type FRM_OidTab	Is Table Of RMC_THE_PubRes.FRM_Oid
  --	Index By Binary_Integer;
      Type RMC_THE_CafTab	Is Table Of RMC_THE_PubRes.THE_Caf
	Index By Binary_Integer;
      Type RMC_THE_LafTab	Is Table Of RMC_THE_PubRes.THE_Laf
	Index By Binary_Integer;
  --  Type RMC_THE_TypTab	Is Table Of RMC_THE_PubRes.RMC_THE_Typ
  --	Index By Binary_Integer;
  --  Type RMC_THE_VisTab	Is Table Of RMC_THE_PubRes.RMC_THE_Vis
  --	Index By Binary_Integer;
      Type Obs_MajTab	Is Table Of RMC_THE_PubRes.Obs_Maj
	Index By Binary_Integer;
      Type TabType_Cst is Table Of RMC_TYPE.TYP_LIB%TYPE
        Index by Binary_Integer;
END RMC_THE_PubRes;
/

CREATE OR REPLACE PACKAGE BODY RMC_THE_PubRes AS
	   Function Version Return VarChar2
	   Is
	   Begin
 			Return (RMC_THE_PubRes.LastVersion);
	   End Version;
END RMC_THE_PubRes;
/
CREATE OR REPLACE Package SPECIALITE_IAMCLASS_Pubres Is
-- ====================================================================
-- Script     : SPECIALITE_IAMCLASS_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:33
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

-- --------------------------------------------------------------------
-- Sous-types table : SPECIALITE_IAMCLASS
-- --------------------------------------------------------------------
  SubType Id_Iamclasse	 Is  SPECIALITE_IAMCLASS.Id_Iamclasse%Type;
  SubType Id_Specialite	 Is  SPECIALITE_IAMCLASS.Id_Specialite%Type;
-- --------------------------------------------------------------------
-- Record : SPECIALITE_IAMCLASS
-- --------------------------------------------------------------------
  Type SPECIALITE_IAMCLASSRec Is Record
  (
	Id_Iamclasse	 SPECIALITE_IAMCLASS_Pubres.Id_Iamclasse,
	Id_Specialite	 SPECIALITE_IAMCLASS_Pubres.Id_Specialite);
-- --------------------------------------------------------------------
-- Ref Cursor : SPECIALITE_IAMCLASS
-- --------------------------------------------------------------------
  Type SPECIALITE_IAMCLASSCurTyp 	Is Ref Cursor Return SPECIALITE_IAMCLASS_Pubres.SPECIALITE_IAMCLASSRec;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : SPECIALITE_IAMCLASS
-- --------------------------------------------------------------------
  Type Id_IamclasseTab	Is Table Of SPECIALITE_IAMCLASS_Pubres.Id_Iamclasse Index By Binary_Integer;
  Type Id_SpecialiteTab	Is Table Of SPECIALITE_IAMCLASS_Pubres.Id_Specialite Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : SPECIALITE_IAMCLASS
-- --------------------------------------------------------------------
  Type SPECIALITE_IAMCLASSTabRec 	Is Table Of SPECIALITE_IAMCLASS_Pubres.SPECIALITE_IAMCLASSRec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End SPECIALITE_IAMCLASS_Pubres;
/
CREATE OR REPLACE PACKAGE SPECIALITE_Pubres AS
-- ===========================================================================
-- Script      : SPECIALITE_Pubres    Type : Package
-- Objet       : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner       : VIDAL
-- Création    : 14/09/99 18:31:33
-- Auteur      : AGDF (2000) from Data to Information
-- Généré par  : Kercaps - AGDF_GEN_PAC Version : 2.02
-- Modifié par : MR - 23/03/2001 : MODIFICATION #1 : Ajout de SPECIALITERec2
--                                                   et de SPECIALITECurTyp2
-- ============================================================================

-- --------------------------------------------------------------------
-- Sous-types table : SPECIALITE
-- --------------------------------------------------------------------
  SubType Id_Specialite  Is  SPECIALITE.Id_Specialite%Type;
  SubType Bvalid         Is  SPECIALITE.Bvalid%Type;
  SubType Bencours       Is  SPECIALITE.Bencours%Type;
  SubType Nomuser        Is  SPECIALITE.Nomuser%Type;
  SubType Denomspe       Is  SPECIALITE.Denomspe%Type;
  SubType Forme          Is  SPECIALITE.Forme%Type;
  SubType Dosage         Is  SPECIALITE.Dosage%Type;
  SubType Complement     Is  SPECIALITE.Complement%Type;
  SubType Commammposo    Is  SPECIALITE.Commammposo%Type;
  SubType Reserve        Is  SPECIALITE.Reserve%Type;
  SubType Inferieurage   Is  SPECIALITE.Inferieurage%Type;
  SubType Unitinf        Is  SPECIALITE.Unitinf%Type;
  SubType Superieurage   Is  SPECIALITE.Superieurage%Type;
  SubType Unifsup        Is  SPECIALITE.Unifsup%Type;
  SubType Inferieurpoids Is  SPECIALITE.Inferieurpoids%Type;
  SubType Superieurpoids Is  SPECIALITE.Superieurpoids%Type;
  SubType Denomamm       Is  SPECIALITE.Denomamm%Type;
  SubType Numdosamm      Is  SPECIALITE.Numdosamm%Type;
  SubType Specategorie   Is  SPECIALITE.Specategorie%Type;
  SubType Source         Is  SPECIALITE.Source%Type;
  SubType Datesource     Is  SPECIALITE.Datesource%Type;
  SubType Remarques      Is  SPECIALITE.Remarques%Type;
  SubType Dcreat         Is  SPECIALITE.Dcreat%Type;
  SubType Dmodif         Is  SPECIALITE.Dmodif%Type;
  SubType Drevis         Is  SPECIALITE.Drevis%Type;
  SubType BDOPANT		 Is	 SPECIALITE.BDOPANT%Type;
-- --------------------------------------------------------------------
-- Sous-types table : SPEPRESENTATION
-- --------------------------------------------------------------------
  SubType Id_Spepresentation  Is  SPEPRESENTATION.Id_Spepresentation%Type;
-- --------------------------------------------------------------------
-- Sous-types table : LIVRETVIDAL
-- --------------------------------------------------------------------
  SubType Idorganisme    Is  LIVRETVIDAL.Idorganisme%Type;
-- --------------------------------------------------------------------
-- Record : SPECIALITE
-- --------------------------------------------------------------------
  Type SPECIALITERec Is Record
  (
        Id_Specialite    SPECIALITE_Pubres.Id_Specialite,
        Bvalid           SPECIALITE_Pubres.Bvalid,
        Bencours         SPECIALITE_Pubres.Bencours,
        Nomuser          SPECIALITE_Pubres.Nomuser,
        Denomspe         SPECIALITE_Pubres.Denomspe,
        Forme            SPECIALITE_Pubres.Forme,
        Dosage           SPECIALITE_Pubres.Dosage,
        Complement       SPECIALITE_Pubres.Complement,
        Commammposo      SPECIALITE_Pubres.Commammposo,
        Reserve          SPECIALITE_Pubres.Reserve,
        Inferieurage     SPECIALITE_Pubres.Inferieurage,
        Unitinf          SPECIALITE_Pubres.Unitinf,
        Superieurage     SPECIALITE_Pubres.Superieurage,
        Unifsup          SPECIALITE_Pubres.Unifsup,
        Inferieurpoids   SPECIALITE_Pubres.Inferieurpoids,
        Superieurpoids   SPECIALITE_Pubres.Superieurpoids,
        Denomamm         SPECIALITE_Pubres.Denomamm,
        Numdosamm        SPECIALITE_Pubres.Numdosamm,
        Specategorie     SPECIALITE_Pubres.Specategorie,
        Source           SPECIALITE_Pubres.Source,
        Datesource       SPECIALITE_Pubres.Datesource,
        Remarques        SPECIALITE_Pubres.Remarques,
        Dcreat           SPECIALITE_Pubres.Dcreat,
        Dmodif           SPECIALITE_Pubres.Dmodif,
        Drevis           SPECIALITE_Pubres.Drevis);
-- --------------------------------------------------------------------
-- Record : SPECIALITE2
-- --------------------------------------------------------------------
  Type SPECIALITERec2 Is Record
  (
        Id_Specialite       SPECIALITE_Pubres.Id_Specialite,
        Bvalid              SPECIALITE_Pubres.Bvalid,
        Bencours            SPECIALITE_Pubres.Bencours,
        Nomuser             SPECIALITE_Pubres.Nomuser,
        Denomspe            SPECIALITE_Pubres.Denomspe,
        Forme               SPECIALITE_Pubres.Forme,
        Dosage              SPECIALITE_Pubres.Dosage,
        Complement          SPECIALITE_Pubres.Complement,
        Commammposo         SPECIALITE_Pubres.Commammposo,
        Reserve             SPECIALITE_Pubres.Reserve,
        Inferieurage        SPECIALITE_Pubres.Inferieurage,
        Unitinf             SPECIALITE_Pubres.Unitinf,
        Superieurage        SPECIALITE_Pubres.Superieurage,
        Unifsup             SPECIALITE_Pubres.Unifsup,
        Inferieurpoids      SPECIALITE_Pubres.Inferieurpoids,
        Superieurpoids      SPECIALITE_Pubres.Superieurpoids,
        Denomamm            SPECIALITE_Pubres.Denomamm,
        Numdosamm           SPECIALITE_Pubres.Numdosamm,
        Specategorie        SPECIALITE_Pubres.Specategorie,
        Source              SPECIALITE_Pubres.Source,
        Datesource          SPECIALITE_Pubres.Datesource,
        Remarques           SPECIALITE_Pubres.Remarques,
        Dcreat              SPECIALITE_Pubres.Dcreat,
        Dmodif              SPECIALITE_Pubres.Dmodif,
        Drevis              SPECIALITE_Pubres.Drevis,
        Id_Spepresentation  SPECIALITE_Pubres.Id_Spepresentation,
        Idorganisme         SPECIALITE_Pubres.Idorganisme,
        Flag_livret         VARCHAR2(1));
-- --------------------------------------------------------------------
-- Record : SPECIALITE Dopante
-- --------------------------------------------------------------------
  Type SPECIALITEDopanteRec Is Record
  (
        Id_Specialite    SPECIALITE_Pubres.Id_Specialite,
        Bvalid           SPECIALITE_Pubres.Bvalid,
        Bencours         SPECIALITE_Pubres.Bencours,
        Nomuser          SPECIALITE_Pubres.Nomuser,
        Denomspe         SPECIALITE_Pubres.Denomspe,
        Forme            SPECIALITE_Pubres.Forme,
        Dosage           SPECIALITE_Pubres.Dosage,
        Complement       SPECIALITE_Pubres.Complement,
        Commammposo      SPECIALITE_Pubres.Commammposo,
        Reserve          SPECIALITE_Pubres.Reserve,
        Inferieurage     SPECIALITE_Pubres.Inferieurage,
        Unitinf          SPECIALITE_Pubres.Unitinf,
        Superieurage     SPECIALITE_Pubres.Superieurage,
        Unifsup          SPECIALITE_Pubres.Unifsup,
        Inferieurpoids   SPECIALITE_Pubres.Inferieurpoids,
        Superieurpoids   SPECIALITE_Pubres.Superieurpoids,
        Denomamm         SPECIALITE_Pubres.Denomamm,
        Numdosamm        SPECIALITE_Pubres.Numdosamm,
        Specategorie     SPECIALITE_Pubres.Specategorie,
        Source           SPECIALITE_Pubres.Source,
        Datesource       SPECIALITE_Pubres.Datesource,
        Remarques        SPECIALITE_Pubres.Remarques,
        Dcreat           SPECIALITE_Pubres.Dcreat,
        Dmodif           SPECIALITE_Pubres.Dmodif,
        Drevis           SPECIALITE_Pubres.Drevis,
        BDopant          SPECIALITE_Pubres.BDOPANT);
-- --------------------------------------------------------------------
-- Ref Cursor : SPECIALITE
-- --------------------------------------------------------------------
  Type SPECIALITECurTyp         Is Ref Cursor Return SPECIALITE_Pubres.SPECIALITERec;
  Type SPECIALITECurRef         Is Ref Cursor;
-- --------------------------------------------------------------------
-- Ref Cursor : SPECIALITE2
-- --------------------------------------------------------------------
  Type SPECIALITECurTyp2        Is Ref Cursor Return SPECIALITE_Pubres.SPECIALITERec2;
-- --------------------------------------------------------------------
-- Ref Cursor : SPECIALITEDopante
-- --------------------------------------------------------------------
  Type SPECIALITEDopantCurTyp   Is Ref Cursor Return SPECIALITE_Pubres.SPECIALITEDopanteRec;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : SPECIALITE
-- --------------------------------------------------------------------
  Type Id_SpecialiteTab         Is Table Of SPECIALITE_Pubres.Id_Specialite Index By Binary_Integer;
  Type BvalidTab                Is Table Of SPECIALITE_Pubres.Bvalid Index By Binary_Integer;
  Type BencoursTab              Is Table Of SPECIALITE_Pubres.Bencours Index By Binary_Integer;
  Type NomuserTab               Is Table Of SPECIALITE_Pubres.Nomuser Index By Binary_Integer;
  Type DenomspeTab              Is Table Of SPECIALITE_Pubres.Denomspe Index By Binary_Integer;
  Type FormeTab                 Is Table Of SPECIALITE_Pubres.Forme Index By Binary_Integer;
  Type DosageTab                Is Table Of SPECIALITE_Pubres.Dosage Index By Binary_Integer;
  Type ComplementTab            Is Table Of SPECIALITE_Pubres.Complement Index By Binary_Integer;
  Type CommammposoTab           Is Table Of SPECIALITE_Pubres.Commammposo Index By Binary_Integer;
  Type ReserveTab               Is Table Of SPECIALITE_Pubres.Reserve Index By Binary_Integer;
  Type InferieurageTab          Is Table Of SPECIALITE_Pubres.Inferieurage Index By Binary_Integer;
  Type UnitinfTab               Is Table Of SPECIALITE_Pubres.Unitinf Index By Binary_Integer;
  Type SuperieurageTab          Is Table Of SPECIALITE_Pubres.Superieurage Index By Binary_Integer;
  Type UnifsupTab               Is Table Of SPECIALITE_Pubres.Unifsup Index By Binary_Integer;
  Type InferieurpoidsTab        Is Table Of SPECIALITE_Pubres.Inferieurpoids Index By Binary_Integer;
  Type SuperieurpoidsTab        Is Table Of SPECIALITE_Pubres.Superieurpoids Index By Binary_Integer;
  Type DenomammTab              Is Table Of SPECIALITE_Pubres.Denomamm Index By Binary_Integer;
  Type NumdosammTab             Is Table Of SPECIALITE_Pubres.Numdosamm Index By Binary_Integer;
  Type SpecategorieTab          Is Table Of SPECIALITE_Pubres.Specategorie Index By Binary_Integer;
  Type SourceTab                Is Table Of SPECIALITE_Pubres.Source Index By Binary_Integer;
  Type DatesourceTab            Is Table Of SPECIALITE_Pubres.Datesource Index By Binary_Integer;
  Type RemarquesTab             Is Table Of SPECIALITE_Pubres.Remarques Index By Binary_Integer;
  Type DcreatTab                Is Table Of SPECIALITE_Pubres.Dcreat Index By Binary_Integer;
  Type DmodifTab                Is Table Of SPECIALITE_Pubres.Dmodif Index By Binary_Integer;
  Type DrevisTab                Is Table Of SPECIALITE_Pubres.Drevis Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : SPECIALITE
-- --------------------------------------------------------------------
  Type SPECIALITETabRec         Is Table Of SPECIALITE_Pubres.SPECIALITERec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End SPECIALITE_Pubres;
/
CREATE OR REPLACE Package SPECONSTITUANT_Pubres Is
-- ====================================================================
-- Script     : SPECONSTITUANT_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:33
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

-- --------------------------------------------------------------------
-- Sous-types table : SPECONSTITUANT
-- --------------------------------------------------------------------
  SubType Id_Speconstituant	 Is  SPECONSTITUANT.Id_Speconstituant%Type;
  SubType Id_Specompo	 Is  SPECONSTITUANT.Id_Specompo%Type;
  SubType Denomsub	 Is  SPECONSTITUANT.Denomsub%Type;
  SubType Homeopathie	 Is  SPECONSTITUANT.Homeopathie%Type;
  SubType Bconstactif	 Is  SPECONSTITUANT.Bconstactif%Type;
  SubType Natureexcip	 Is  SPECONSTITUANT.Natureexcip%Type;
  SubType Prefixeconstituant	 Is  SPECONSTITUANT.Prefixeconstituant%Type;
  SubType Postfixeconstituant	 Is  SPECONSTITUANT.Postfixeconstituant%Type;
  SubType Dcreat	 Is  SPECONSTITUANT.Dcreat%Type;
  SubType Excipientcomm	 Is  SPECONSTITUANT.Excipientcomm%Type;
  SubType Ordre	 Is  SPECONSTITUANT.Ordre%Type;
-- --------------------------------------------------------------------
-- Record : SPECONSTITUANT
-- --------------------------------------------------------------------
  Type SPECONSTITUANTRec Is Record
  (
	Id_Speconstituant	 SPECONSTITUANT_Pubres.Id_Speconstituant,
	Id_Specompo	 SPECONSTITUANT_Pubres.Id_Specompo,
	Denomsub	 SPECONSTITUANT_Pubres.Denomsub,
	Homeopathie	 SPECONSTITUANT_Pubres.Homeopathie,
	Bconstactif	 SPECONSTITUANT_Pubres.Bconstactif,
	Natureexcip	 SPECONSTITUANT_Pubres.Natureexcip,
	Prefixeconstituant	 SPECONSTITUANT_Pubres.Prefixeconstituant,
	Postfixeconstituant	 SPECONSTITUANT_Pubres.Postfixeconstituant,
	Dcreat	 SPECONSTITUANT_Pubres.Dcreat,
	Excipientcomm	 SPECONSTITUANT_Pubres.Excipientcomm,
	Ordre	 SPECONSTITUANT_Pubres.Ordre);
-- --------------------------------------------------------------------
-- Ref Cursor : SPECONSTITUANT
-- --------------------------------------------------------------------
  Type SPECONSTITUANTCurTyp 	Is Ref Cursor Return SPECONSTITUANT_Pubres.SPECONSTITUANTRec;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : SPECONSTITUANT
-- --------------------------------------------------------------------
  Type Id_SpeconstituantTab	Is Table Of SPECONSTITUANT_Pubres.Id_Speconstituant Index By Binary_Integer;
  Type Id_SpecompoTab	Is Table Of SPECONSTITUANT_Pubres.Id_Specompo Index By Binary_Integer;
  Type DenomsubTab	Is Table Of SPECONSTITUANT_Pubres.Denomsub Index By Binary_Integer;
  Type HomeopathieTab	Is Table Of SPECONSTITUANT_Pubres.Homeopathie Index By Binary_Integer;
  Type BconstactifTab	Is Table Of SPECONSTITUANT_Pubres.Bconstactif Index By Binary_Integer;
  Type NatureexcipTab	Is Table Of SPECONSTITUANT_Pubres.Natureexcip Index By Binary_Integer;
  Type PrefixeconstituantTab	Is Table Of SPECONSTITUANT_Pubres.Prefixeconstituant Index By Binary_Integer;
  Type PostfixeconstituantTab	Is Table Of SPECONSTITUANT_Pubres.Postfixeconstituant Index By Binary_Integer;
  Type DcreatTab	Is Table Of SPECONSTITUANT_Pubres.Dcreat Index By Binary_Integer;
  Type ExcipientcommTab	Is Table Of SPECONSTITUANT_Pubres.Excipientcomm Index By Binary_Integer;
  Type OrdreTab	Is Table Of SPECONSTITUANT_Pubres.Ordre Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : SPECONSTITUANT
-- --------------------------------------------------------------------
  Type SPECONSTITUANTTabRec 	Is Table Of SPECONSTITUANT_Pubres.SPECONSTITUANTRec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End SPECONSTITUANT_Pubres;
/
CREATE OR REPLACE Package SPEEVT_Pubres Is
-- ====================================================================
-- Script     : SPEEVT_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:33
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

-- --------------------------------------------------------------------
-- Sous-types table : SPEEVT
-- --------------------------------------------------------------------
  SubType Id_Speevt	 Is  SPEEVT.Id_Speevt%Type;
  SubType Id_Specialite	 Is  SPEEVT.Id_Specialite%Type;
  SubType Evenement	 Is  SPEEVT.Evenement%Type;
  SubType Source	 Is  SPEEVT.Source%Type;
  SubType Datesource	 Is  SPEEVT.Datesource%Type;
  SubType Dateevenement	 Is  SPEEVT.Dateevenement%Type;
  SubType Traiteeven	 Is  SPEEVT.Traiteeven%Type;
-- --------------------------------------------------------------------
-- Record : SPEEVT
-- --------------------------------------------------------------------
  Type SPEEVTRec Is Record
  (
	Id_Speevt	 SPEEVT_Pubres.Id_Speevt,
	Id_Specialite	 SPEEVT_Pubres.Id_Specialite,
	Evenement	 SPEEVT_Pubres.Evenement,
	Source	 SPEEVT_Pubres.Source,
	Datesource	 SPEEVT_Pubres.Datesource,
	Dateevenement	 SPEEVT_Pubres.Dateevenement,
	Traiteeven	 SPEEVT_Pubres.Traiteeven);
-- --------------------------------------------------------------------
-- Ref Cursor : SPEEVT
-- --------------------------------------------------------------------
  Type SPEEVTCurTyp 	Is Ref Cursor Return SPEEVT_Pubres.SPEEVTRec;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : SPEEVT
-- --------------------------------------------------------------------
  Type Id_SpeevtTab	Is Table Of SPEEVT_Pubres.Id_Speevt Index By Binary_Integer;
  Type Id_SpecialiteTab	Is Table Of SPEEVT_Pubres.Id_Specialite Index By Binary_Integer;
  Type EvenementTab	Is Table Of SPEEVT_Pubres.Evenement Index By Binary_Integer;
  Type SourceTab	Is Table Of SPEEVT_Pubres.Source Index By Binary_Integer;
  Type DatesourceTab	Is Table Of SPEEVT_Pubres.Datesource Index By Binary_Integer;
  Type DateevenementTab	Is Table Of SPEEVT_Pubres.Dateevenement Index By Binary_Integer;
  Type TraiteevenTab	Is Table Of SPEEVT_Pubres.Traiteeven Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : SPEEVT
-- --------------------------------------------------------------------
  Type SPEEVTTabRec 	Is Table Of SPEEVT_Pubres.SPEEVTRec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End SPEEVT_Pubres;
/
CREATE OR REPLACE Package SPELABOSAUMON_Pubres Is
-- --------------------------------------------------------------------
-- Sous-types table : SAUMON
-- --------------------------------------------------------------------
  SubType idlaboratoire	 	 Is  LABOSAUMON.idlaboratoire%Type;
  SubType laboratoire	 	 Is  LABOSAUMON.laboratoire%Type;

-- --------------------------------------------------------------------
-- Ref Cursor : SPESAUMON
-- --------------------------------------------------------------------
Type SPELABOSAUMONCurTyp  Is Ref Cursor Return SPELABOSAUMON_Pubres.SPELABOSAUMONRec;

-- --------------------------------------------------------------------
-- Record : SPESAUMON
-- --------------------------------------------------------------------
  Type SPELABOSAUMONRec Is Record
  (
	laboratoire	 	   SPELABOSAUMON_Pubres.laboratoire,
	idlaboratoire	   SPELABOSAUMON_Pubres.idlaboratoire);

-- ====================================================================
-- Fin de package
-- ====================================================================
End SPELABOSAUMON_Pubres;
/
CREATE OR REPLACE Package SPELABS_REL_Pubres Is
-- ====================================================================
-- Script     : SPELABS_REL_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:33
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

-- --------------------------------------------------------------------
-- Sous-types table : SPELABS_REL
-- --------------------------------------------------------------------
  SubType Id_Specialite	 Is  SPELABS_REL.Id_Specialite%Type;
  SubType Id_Laboratoire	 Is  SPELABS_REL.Id_Laboratoire%Type;
  SubType Titulaireexploitant	 Is  SPELABS_REL.Titulaireexploitant%Type;
-- --------------------------------------------------------------------
-- Record : SPELABS_REL
-- --------------------------------------------------------------------
  Type SPELABS_RELRec Is Record
  (
	Id_Specialite	 SPELABS_REL_Pubres.Id_Specialite,
	Id_Laboratoire	 SPELABS_REL_Pubres.Id_Laboratoire,
	Titulaireexploitant	 SPELABS_REL_Pubres.Titulaireexploitant);
-- --------------------------------------------------------------------
-- Ref Cursor : SPELABS_REL
-- --------------------------------------------------------------------
  Type SPELABS_RELCurTyp 	Is Ref Cursor Return SPELABS_REL_Pubres.SPELABS_RELRec;
-- --------------------------------------------------------------------
-- Record : SPELABS_REL2
-- --------------------------------------------------------------------
  Type SPELABS_RELRec2 Is Record
  (
	Id_Specialite	 SPECIALITE_Pubres.Id_Specialite,
	Bvalid	 		 SPECIALITE_Pubres.Bvalid,
	Bencours	 	 SPECIALITE_Pubres.Bencours,
	Nomuser	 		 SPECIALITE_Pubres.Nomuser,
	Denomspe	 	 SPECIALITE_Pubres.Denomspe,
	Forme	 		 SPECIALITE_Pubres.Forme,
	Dosage	 		 SPECIALITE_Pubres.Dosage,
	Complement	 	 SPECIALITE_Pubres.Complement,
	Commammposo	 	 SPECIALITE_Pubres.Commammposo,
	Reserve	 		 SPECIALITE_Pubres.Reserve,
	Inferieurage	 SPECIALITE_Pubres.Inferieurage,
	Unitinf	 		 SPECIALITE_Pubres.Unitinf,
	Superieurage	 SPECIALITE_Pubres.Superieurage,
	Unifsup	 		 SPECIALITE_Pubres.Unifsup,
	Inferieurpoids	 SPECIALITE_Pubres.Inferieurpoids,
	Superieurpoids	 SPECIALITE_Pubres.Superieurpoids,
	Denomamm	 	 SPECIALITE_Pubres.Denomamm,
	Numdosamm	 	 SPECIALITE_Pubres.Numdosamm,
	Specategorie	 SPECIALITE_Pubres.Specategorie,
	Source	 		 SPECIALITE_Pubres.Source,
	Datesource	 	 SPECIALITE_Pubres.Datesource,
	Remarques	 	 SPECIALITE_Pubres.Remarques,
	Dcreat	 		 SPECIALITE_Pubres.Dcreat,
	Dmodif	 		 SPECIALITE_Pubres.Dmodif,
	Drevis	 		 SPECIALITE_Pubres.Drevis,
	Titulaireexploitant	 SPELABS_REL_Pubres.Titulaireexploitant);
-- --------------------------------------------------------------------
-- Ref Cursor : SPELABS_REL2
-- --------------------------------------------------------------------
  Type SPELABS_RELCurTyp2 	Is Ref Cursor Return SPELABS_REL_Pubres.SPELABS_RELRec2;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : SPELABS_REL
-- --------------------------------------------------------------------
  Type Id_SpecialiteTab	Is Table Of SPELABS_REL_Pubres.Id_Specialite Index By Binary_Integer;
  Type Id_LaboratoireTab	Is Table Of SPELABS_REL_Pubres.Id_Laboratoire Index By Binary_Integer;
  Type TitulaireexploitantTab	Is Table Of SPELABS_REL_Pubres.Titulaireexploitant Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : SPELABS_REL
-- --------------------------------------------------------------------
  Type SPELABS_RELTabRec 	Is Table Of SPELABS_REL_Pubres.SPELABS_RELRec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End SPELABS_REL_Pubres;
/
CREATE OR REPLACE package SpePE_PUBRES is

  -- Author  : MALIKLA
  -- Created : 20/03/2003 10:22:00
  -- Purpose : Curseur et recordset renvoyant la structure
  --           de la table SpePE

-- --------------------------------------------------------------------
-- Sous-types table : SpePE
-- --------------------------------------------------------------------
  SubType Id_Specialite       Is   SPEPE.Id_Specialite%Type;
  SubType Id_SpePE            Is   SPEPE.Id_SpePE%Type;
  SubType TERME               Is   SPEPE.TERME%Type;
  SubType ORIGINEOVP          Is   SPEPE.ORIGINEOVP%Type;
  SubType DATEORIGOVP         Is   SPEPE.DATEORIGOVP%Type;
  SubType ARGUMENTAIREAUTEUR  Is   SPEPE.ARGUMENTAIREAUTEUR%Type;
  SubType COMMAMM             Is   SPEPE.COMMAMM%Type;
  SubType ordre               Is   SPEPE.ordre%Type;

-- --------------------------------------------------------------------
-- Record : SpePE
-- --------------------------------------------------------------------
  Type SpePERec Is Record
  (id_Specialite       SpePE_PUBRES.Id_Specialite,
   Id_SpePE            SpePE_PUBRES.Id_SpePE,
   TERME               SpePE_PUBRES.TERME,
   ORIGINEOVP          SpePE_PUBRES.ORIGINEOVP,
   DATEORIGOVP         SpePE_PUBRES.DATEORIGOVP,
   ARGUMENTAIREAUTEUR  SpePE_PUBRES.ARGUMENTAIREAUTEUR,
   COMMAMM             SpePE_PUBRES.COMMAMM,
   ORDRE               SpePE_PUBRES.ordre
   );

-- --------------------------------------------------------------------
-- Ref Cursor : SpePECurTyp
-- --------------------------------------------------------------------
  Type SpePECurTyp          Is Ref Cursor Return SpePERec;

end SpePE_PUBRES;
/

CREATE OR REPLACE package body SpePE_PUBRES is

end SpePE_PUBRES;
/
CREATE OR REPLACE Package SPEPOSOINDIC_Pubres Is
-- ====================================================================
-- Script     : SPEPOSOINDIC_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:33
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

-- --------------------------------------------------------------------
-- Sous-types table : SPEPOSOINDIC
-- --------------------------------------------------------------------
  SubType Id_Speposo	 Is  SPEPOSOINDIC.Id_Speposo%Type;
  SubType Id_Speindic	 Is  SPEPOSOINDIC.Id_Speindic%Type;
-- --------------------------------------------------------------------
-- Record : SPEPOSOINDIC
-- --------------------------------------------------------------------
  Type SPEPOSOINDICRec Is Record
  (
	Id_Speposo	 SPEPOSOINDIC_Pubres.Id_Speposo,
	Id_Speindic	 SPEPOSOINDIC_Pubres.Id_Speindic);
-- --------------------------------------------------------------------
-- Ref Cursor : SPEPOSOINDIC
-- --------------------------------------------------------------------
  Type SPEPOSOINDICCurTyp 	Is Ref Cursor Return SPEPOSOINDIC_Pubres.SPEPOSOINDICRec;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : SPEPOSOINDIC
-- --------------------------------------------------------------------
  Type Id_SpeposoTab	Is Table Of SPEPOSOINDIC_Pubres.Id_Speposo Index By Binary_Integer;
  Type Id_SpeindicTab	Is Table Of SPEPOSOINDIC_Pubres.Id_Speindic Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : SPEPOSOINDIC
-- --------------------------------------------------------------------
  Type SPEPOSOINDICTabRec 	Is Table Of SPEPOSOINDIC_Pubres.SPEPOSOINDICRec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End SPEPOSOINDIC_Pubres;
/
CREATE OR REPLACE Package SPEPOSO_Pubres Is
-- ====================================================================
-- Script     : SPEPOSO_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:33
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

-- --------------------------------------------------------------------
-- Sous-types table : SPEPOSO
-- --------------------------------------------------------------------
  SubType Id_Specialite	 Is  SPEPOSO.Id_Specialite%Type;
  SubType Id_Speprise	 Is  SPEPOSO.Id_Speprise%Type;
  SubType Id_Speposo	 Is  SPEPOSO.Id_Speposo%Type;
  SubType Relecturepar	 Is  SPEPOSO.Relecturepar%Type;
  SubType Posousuinf	 Is  SPEPOSO.Posousuinf%Type;
  SubType Posoususup	 Is  SPEPOSO.Posoususup%Type;
  SubType Posousutype	 Is  SPEPOSO.Posousutype%Type;
  SubType Posomin	 Is  SPEPOSO.Posomin%Type;
  SubType Posomintype	 Is  SPEPOSO.Posomintype%Type;
  SubType Posomax	 Is  SPEPOSO.Posomax%Type;
  SubType Posomaxtype	 Is  SPEPOSO.Posomaxtype%Type;
  SubType Posototmax	 Is  SPEPOSO.Posototmax%Type;
  SubType Posototmaxtype	 Is  SPEPOSO.Posototmaxtype%Type;
  SubType Frequsuinf	 Is  SPEPOSO.Frequsuinf%Type;
  SubType Freqususup	 Is  SPEPOSO.Freqususup%Type;
  SubType Frequsutype	 Is  SPEPOSO.Frequsutype%Type;
  SubType Freqinfposomax	 Is  SPEPOSO.Freqinfposomax%Type;
  SubType Freqsupposomax	 Is  SPEPOSO.Freqsupposomax%Type;
  SubType Freqposomaxtype	 Is  SPEPOSO.Freqposomaxtype%Type;
  SubType Freqinfposomin	 Is  SPEPOSO.Freqinfposomin%Type;
  SubType Freqsupposomin	 Is  SPEPOSO.Freqsupposomin%Type;
  SubType Freqposomintype	 Is  SPEPOSO.Freqposomintype%Type;
  SubType Freqposototmaxtype	 Is  SPEPOSO.Freqposototmaxtype%Type;
  SubType Freqinfrenouv	 Is  SPEPOSO.Freqinfrenouv%Type;
  SubType Freqsuprenouv	 Is  SPEPOSO.Freqsuprenouv%Type;
  SubType Freqrenouvtype	 Is  SPEPOSO.Freqrenouvtype%Type;
  SubType Freqdiv	 Is  SPEPOSO.Freqdiv%Type;
  SubType Duradusuinf	 Is  SPEPOSO.Duradusuinf%Type;
  SubType Duradususup	 Is  SPEPOSO.Duradususup%Type;
  SubType Duradusutype	 Is  SPEPOSO.Duradusutype%Type;
  SubType Durmax	 Is  SPEPOSO.Durmax%Type;
  SubType Durmaxtype	 Is  SPEPOSO.Durmaxtype%Type;
  SubType Durtotal	 Is  SPEPOSO.Durtotal%Type;
  SubType Durtotaltype	 Is  SPEPOSO.Durtotaltype%Type;
  SubType Durarretinf	 Is  SPEPOSO.Durarretinf%Type;
  SubType Durarretsup	 Is  SPEPOSO.Durarretsup%Type;
  SubType Durarrettype	 Is  SPEPOSO.Durarrettype%Type;
  SubType Poidsinf	 Is  SPEPOSO.Poidsinf%Type;
  SubType Poidssup	 Is  SPEPOSO.Poidssup%Type;
  SubType Ageinf	 Is  SPEPOSO.Ageinf%Type;
  SubType Uniteageinf	 Is  SPEPOSO.Uniteageinf%Type;
  SubType Agesup	 Is  SPEPOSO.Agesup%Type;
  SubType Uniteagesup	 Is  SPEPOSO.Uniteagesup%Type;
  SubType Phase	 Is  SPEPOSO.Phase%Type;
  SubType Ordredephase	 Is  SPEPOSO.Ordredephase%Type;
  SubType Lienphase	 Is  SPEPOSO.Lienphase%Type;
  SubType Etatpreexistant	 Is  SPEPOSO.Etatpreexistant%Type;
  SubType Situdstempsposoinf	 Is  SPEPOSO.Situdstempsposoinf%Type;
  SubType Situdstempspososup	 Is  SPEPOSO.Situdstempspososup%Type;
  SubType Renouvellement	 Is  SPEPOSO.Renouvellement%Type;
  SubType Sexe	 Is  SPEPOSO.Sexe%Type;
  SubType Coprescription	 Is  SPEPOSO.Coprescription%Type;
  SubType Repas	 Is  SPEPOSO.Repas%Type;
  SubType Conseil	 Is  SPEPOSO.Conseil%Type;
  SubType Modeemploi	 Is  SPEPOSO.Modeemploi%Type;
  SubType Dcreat	 Is  SPEPOSO.Dcreat%Type;
  SubType Dmodif	 Is  SPEPOSO.Dmodif%Type;
  SubType Drevis	 Is  SPEPOSO.Drevis%Type;
-- --------------------------------------------------------------------
-- Record : SPEPOSO
-- --------------------------------------------------------------------
  Type SPEPOSORec Is Record
  (
	Id_Specialite	 SPEPOSO_Pubres.Id_Specialite,
	Id_Speprise	 SPEPOSO_Pubres.Id_Speprise,
	Id_Speposo	 SPEPOSO_Pubres.Id_Speposo,
	Relecturepar	 SPEPOSO_Pubres.Relecturepar,
	Posousuinf	 SPEPOSO_Pubres.Posousuinf,
	Posoususup	 SPEPOSO_Pubres.Posoususup,
	Posousutype	 SPEPOSO_Pubres.Posousutype,
	Posomin	 SPEPOSO_Pubres.Posomin,
	Posomintype	 SPEPOSO_Pubres.Posomintype,
	Posomax	 SPEPOSO_Pubres.Posomax,
	Posomaxtype	 SPEPOSO_Pubres.Posomaxtype,
	Posototmax	 SPEPOSO_Pubres.Posototmax,
	Posototmaxtype	 SPEPOSO_Pubres.Posototmaxtype,
	Frequsuinf	 SPEPOSO_Pubres.Frequsuinf,
	Freqususup	 SPEPOSO_Pubres.Freqususup,
	Frequsutype	 SPEPOSO_Pubres.Frequsutype,
	Freqinfposomax	 SPEPOSO_Pubres.Freqinfposomax,
	Freqsupposomax	 SPEPOSO_Pubres.Freqsupposomax,
	Freqposomaxtype	 SPEPOSO_Pubres.Freqposomaxtype,
	Freqinfposomin	 SPEPOSO_Pubres.Freqinfposomin,
	Freqsupposomin	 SPEPOSO_Pubres.Freqsupposomin,
	Freqposomintype	 SPEPOSO_Pubres.Freqposomintype,
	Freqposototmaxtype	 SPEPOSO_Pubres.Freqposototmaxtype,
	Freqinfrenouv	 SPEPOSO_Pubres.Freqinfrenouv,
	Freqsuprenouv	 SPEPOSO_Pubres.Freqsuprenouv,
	Freqrenouvtype	 SPEPOSO_Pubres.Freqrenouvtype,
	Freqdiv	 SPEPOSO_Pubres.Freqdiv,
	Duradusuinf	 SPEPOSO_Pubres.Duradusuinf,
	Duradususup	 SPEPOSO_Pubres.Duradususup,
	Duradusutype	 SPEPOSO_Pubres.Duradusutype,
	Durmax	 SPEPOSO_Pubres.Durmax,
	Durmaxtype	 SPEPOSO_Pubres.Durmaxtype,
	Durtotal	 SPEPOSO_Pubres.Durtotal,
	Durtotaltype	 SPEPOSO_Pubres.Durtotaltype,
	Durarretinf	 SPEPOSO_Pubres.Durarretinf,
	Durarretsup	 SPEPOSO_Pubres.Durarretsup,
	Durarrettype	 SPEPOSO_Pubres.Durarrettype,
	Poidsinf	 SPEPOSO_Pubres.Poidsinf,
	Poidssup	 SPEPOSO_Pubres.Poidssup,
	Ageinf	 SPEPOSO_Pubres.Ageinf,
	Uniteageinf	 SPEPOSO_Pubres.Uniteageinf,
	Agesup	 SPEPOSO_Pubres.Agesup,
	Uniteagesup	 SPEPOSO_Pubres.Uniteagesup,
	Phase	 SPEPOSO_Pubres.Phase,
	Ordredephase	 SPEPOSO_Pubres.Ordredephase,
	Lienphase	 SPEPOSO_Pubres.Lienphase,
	Etatpreexistant	 SPEPOSO_Pubres.Etatpreexistant,
	Situdstempsposoinf	 SPEPOSO_Pubres.Situdstempsposoinf,
	Situdstempspososup	 SPEPOSO_Pubres.Situdstempspososup,
	Renouvellement	 SPEPOSO_Pubres.Renouvellement,
	Sexe	 SPEPOSO_Pubres.Sexe,
	Coprescription	 SPEPOSO_Pubres.Coprescription,
	Repas	 SPEPOSO_Pubres.Repas,
	Conseil	 SPEPOSO_Pubres.Conseil,
	Modeemploi	 SPEPOSO_Pubres.Modeemploi,
	Dcreat	 SPEPOSO_Pubres.Dcreat,
	Dmodif	 SPEPOSO_Pubres.Dmodif,
	Drevis	 SPEPOSO_Pubres.Drevis);
-- --------------------------------------------------------------------
-- Ref Cursor : SPEPOSO
-- --------------------------------------------------------------------
  Type SPEPOSOCurTyp 	Is Ref Cursor Return SPEPOSO_Pubres.SPEPOSORec;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : SPEPOSO
-- --------------------------------------------------------------------
  Type Id_SpecialiteTab	Is Table Of SPEPOSO_Pubres.Id_Specialite Index By Binary_Integer;
  Type Id_SpepriseTab	Is Table Of SPEPOSO_Pubres.Id_Speprise Index By Binary_Integer;
  Type Id_SpeposoTab	Is Table Of SPEPOSO_Pubres.Id_Speposo Index By Binary_Integer;
  Type RelectureparTab	Is Table Of SPEPOSO_Pubres.Relecturepar Index By Binary_Integer;
  Type PosousuinfTab	Is Table Of SPEPOSO_Pubres.Posousuinf Index By Binary_Integer;
  Type PosoususupTab	Is Table Of SPEPOSO_Pubres.Posoususup Index By Binary_Integer;
  Type PosousutypeTab	Is Table Of SPEPOSO_Pubres.Posousutype Index By Binary_Integer;
  Type PosominTab	Is Table Of SPEPOSO_Pubres.Posomin Index By Binary_Integer;
  Type PosomintypeTab	Is Table Of SPEPOSO_Pubres.Posomintype Index By Binary_Integer;
  Type PosomaxTab	Is Table Of SPEPOSO_Pubres.Posomax Index By Binary_Integer;
  Type PosomaxtypeTab	Is Table Of SPEPOSO_Pubres.Posomaxtype Index By Binary_Integer;
  Type PosototmaxTab	Is Table Of SPEPOSO_Pubres.Posototmax Index By Binary_Integer;
  Type PosototmaxtypeTab	Is Table Of SPEPOSO_Pubres.Posototmaxtype Index By Binary_Integer;
  Type FrequsuinfTab	Is Table Of SPEPOSO_Pubres.Frequsuinf Index By Binary_Integer;
  Type FreqususupTab	Is Table Of SPEPOSO_Pubres.Freqususup Index By Binary_Integer;
  Type FrequsutypeTab	Is Table Of SPEPOSO_Pubres.Frequsutype Index By Binary_Integer;
  Type FreqinfposomaxTab	Is Table Of SPEPOSO_Pubres.Freqinfposomax Index By Binary_Integer;
  Type FreqsupposomaxTab	Is Table Of SPEPOSO_Pubres.Freqsupposomax Index By Binary_Integer;
  Type FreqposomaxtypeTab	Is Table Of SPEPOSO_Pubres.Freqposomaxtype Index By Binary_Integer;
  Type FreqinfposominTab	Is Table Of SPEPOSO_Pubres.Freqinfposomin Index By Binary_Integer;
  Type FreqsupposominTab	Is Table Of SPEPOSO_Pubres.Freqsupposomin Index By Binary_Integer;
  Type FreqposomintypeTab	Is Table Of SPEPOSO_Pubres.Freqposomintype Index By Binary_Integer;
  Type FreqposototmaxtypeTab	Is Table Of SPEPOSO_Pubres.Freqposototmaxtype Index By Binary_Integer;
  Type FreqinfrenouvTab	Is Table Of SPEPOSO_Pubres.Freqinfrenouv Index By Binary_Integer;
  Type FreqsuprenouvTab	Is Table Of SPEPOSO_Pubres.Freqsuprenouv Index By Binary_Integer;
  Type FreqrenouvtypeTab	Is Table Of SPEPOSO_Pubres.Freqrenouvtype Index By Binary_Integer;
  Type FreqdivTab	Is Table Of SPEPOSO_Pubres.Freqdiv Index By Binary_Integer;
  Type DuradusuinfTab	Is Table Of SPEPOSO_Pubres.Duradusuinf Index By Binary_Integer;
  Type DuradususupTab	Is Table Of SPEPOSO_Pubres.Duradususup Index By Binary_Integer;
  Type DuradusutypeTab	Is Table Of SPEPOSO_Pubres.Duradusutype Index By Binary_Integer;
  Type DurmaxTab	Is Table Of SPEPOSO_Pubres.Durmax Index By Binary_Integer;
  Type DurmaxtypeTab	Is Table Of SPEPOSO_Pubres.Durmaxtype Index By Binary_Integer;
  Type DurtotalTab	Is Table Of SPEPOSO_Pubres.Durtotal Index By Binary_Integer;
  Type DurtotaltypeTab	Is Table Of SPEPOSO_Pubres.Durtotaltype Index By Binary_Integer;
  Type DurarretinfTab	Is Table Of SPEPOSO_Pubres.Durarretinf Index By Binary_Integer;
  Type DurarretsupTab	Is Table Of SPEPOSO_Pubres.Durarretsup Index By Binary_Integer;
  Type DurarrettypeTab	Is Table Of SPEPOSO_Pubres.Durarrettype Index By Binary_Integer;
  Type PoidsinfTab	Is Table Of SPEPOSO_Pubres.Poidsinf Index By Binary_Integer;
  Type PoidssupTab	Is Table Of SPEPOSO_Pubres.Poidssup Index By Binary_Integer;
  Type AgeinfTab	Is Table Of SPEPOSO_Pubres.Ageinf Index By Binary_Integer;
  Type UniteageinfTab	Is Table Of SPEPOSO_Pubres.Uniteageinf Index By Binary_Integer;
  Type AgesupTab	Is Table Of SPEPOSO_Pubres.Agesup Index By Binary_Integer;
  Type UniteagesupTab	Is Table Of SPEPOSO_Pubres.Uniteagesup Index By Binary_Integer;
  Type PhaseTab	Is Table Of SPEPOSO_Pubres.Phase Index By Binary_Integer;
  Type OrdredephaseTab	Is Table Of SPEPOSO_Pubres.Ordredephase Index By Binary_Integer;
  Type LienphaseTab	Is Table Of SPEPOSO_Pubres.Lienphase Index By Binary_Integer;
  Type EtatpreexistantTab	Is Table Of SPEPOSO_Pubres.Etatpreexistant Index By Binary_Integer;
  Type SitudstempsposoinfTab	Is Table Of SPEPOSO_Pubres.Situdstempsposoinf Index By Binary_Integer;
  Type SitudstempspososupTab	Is Table Of SPEPOSO_Pubres.Situdstempspososup Index By Binary_Integer;
  Type RenouvellementTab	Is Table Of SPEPOSO_Pubres.Renouvellement Index By Binary_Integer;
  Type SexeTab	Is Table Of SPEPOSO_Pubres.Sexe Index By Binary_Integer;
  Type CoprescriptionTab	Is Table Of SPEPOSO_Pubres.Coprescription Index By Binary_Integer;
  Type RepasTab	Is Table Of SPEPOSO_Pubres.Repas Index By Binary_Integer;
  Type ConseilTab	Is Table Of SPEPOSO_Pubres.Conseil Index By Binary_Integer;
  Type ModeemploiTab	Is Table Of SPEPOSO_Pubres.Modeemploi Index By Binary_Integer;
  Type DcreatTab	Is Table Of SPEPOSO_Pubres.Dcreat Index By Binary_Integer;
  Type DmodifTab	Is Table Of SPEPOSO_Pubres.Dmodif Index By Binary_Integer;
  Type DrevisTab	Is Table Of SPEPOSO_Pubres.Drevis Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : SPEPOSO
-- --------------------------------------------------------------------
  Type SPEPOSOTabRec 	Is Table Of SPEPOSO_Pubres.SPEPOSORec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End SPEPOSO_Pubres;
/
CREATE OR REPLACE PACKAGE SPEPRESENTATION_Pubres AS
-- ====================================================================
-- Script      : SPEPRESENTATION_Pubres    Type : Package
-- Objet       : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner       : VIDAL
-- Création    : 14/09/99 18:31:34
-- Auteur      : AGDF (2000) from Data to Information
-- Généré par  : Kercaps - AGDF_GEN_PAC Version : 2.02
-- Modifié par : MR - K2/Pixelpark - 20/03/2001
--             : ajout de SPEPRESENTATIONRec3
-- ====================================================================
-- --------------------------------------------------------------------
-- Sous-types table : SPEPRESENTATION
-- --------------------------------------------------------------------
  SubType Id_Spepresentation       Is  SPEPRESENTATION.Id_Spepresentation%Type;
  SubType Id_Specialite            Is  SPEPRESENTATION.Id_Specialite%Type;
  SubType Cip                      Is  SPEPRESENTATION.Cip%Type;
  SubType Ucd                      Is  SPEPRESENTATION.Ucd%Type;
  SubType Ammeurope                Is  SPEPRESENTATION.Ammeurope%Type;
 -- SubType Qtetotale                Is  SPEPRESENTATION.Qtetotale%Type;
  SubType Lieudispo                Is  SPEPRESENTATION.Lieudispo%Type;
  SubType Conddispo                Is  SPEPRESENTATION.Conddispo%Type;
  SubType Liste                    Is  SPEPRESENTATION.Liste%Type;
  SubType Dureeprescription        Is  SPEPRESENTATION.Dureeprescription%Type;
  SubType Prescriptioninitiale     Is  SPEPRESENTATION.Prescriptioninitiale%Type;
  SubType Prescriptionreservee     Is  SPEPRESENTATION.Prescriptionreservee%Type;
  SubType Renouvelreserve          Is  SPEPRESENTATION.Renouvelreserve%Type;
  SubType Medpartic                Is  SPEPRESENTATION.Medpartic%Type;
  SubType Naturesurveillance       Is  SPEPRESENTATION.Naturesurveillance%Type;
  SubType Codereferantgenerique    Is  SPEPRESENTATION.Codereferantgenerique%Type;
  SubType Remplace                 Is  SPEPRESENTATION.Remplace%Type;
  SubType Sourceremplace           Is  SPEPRESENTATION.Sourceremplace%Type;
  SubType Datesourceremplace       Is  SPEPRESENTATION.Datesourceremplace%Type;
  SubType Remplacepar              Is  SPEPRESENTATION.Remplacepar%Type;
  SubType Sourceremplacepar        Is  SPEPRESENTATION.Sourceremplacepar%Type;
  SubType Datesourceremplacepar    Is  SPEPRESENTATION.Datesourceremplacepar%Type;
  SubType Prixprodhtf              Is  SPEPRESENTATION.Prixprodhtf%Type;
  SubType Prixpublicttcf           Is  SPEPRESENTATION.Prixpublicttcf%Type;
  SubType Prixprodhte              Is  SPEPRESENTATION.Prixprodhte%Type;
  SubType Prixpublicttce           Is  SPEPRESENTATION.Prixpublicttce%Type;
  SubType Tva                      Is  SPEPRESENTATION.Tva%Type;
  SubType Dcreat                   Is  SPEPRESENTATION.Dcreat%Type;
  SubType Dmodif                   Is  SPEPRESENTATION.Dmodif%Type;
  SubType Drevis                   Is  SPEPRESENTATION.Drevis%Type;
  SubType Cipreferant              Is  SPEPRESENTATION.Cipreferant%Type;
  SubType Evenement                Is  SPEEVTPRESENTATION.EVENEMENT%Type;
  SubType DATEEVENEMENT            Is  SPEEVTPRESENTATION.DATEEVENEMENT%Type;
  SubType DISPONIBILITE            Is  SPEPRESENTATION.DISPONIBILITE%Type;
  SubType NbPRISE                  Is  SPEPRESENTATION.NBPRISE%Type;
  SubType PRISEUNITAIRE            Is  SPEPRESENTATION.PRISEUNITAIRE%Type;
  SubType CODEDISPO                Is  SPEPRESENTATION.CODEDISPO%Type;
  SubType PrixTTCF                 Is  LIVRETVIDAL.prix_ttc_f%Type;
  SubType PRIXTTCE                 Is  LIVRETVIDAL.prix_ttc_e%Type;
  SubType Dispo                    Is  LIVRETVIDAL.dispo%Type;
  SubType Commentaire              Is  LIVRETVIDAL.commentaire%Type;
  SubType Id_organisme             Is  LIVRETVIDAL.Idorganisme%Type;
  SubType Nom                      Is  SPEPRESENTATIONHOP.nom%Type;
  SubType presentation             Is  SPEPRESENTATIONHOP.presentation%Type;
  SubType forme                    Is  SPEPRESENTATIONHOP.forme%Type;
  SubType dosage                   Is  SPEPRESENTATIONHOP.dosage%Type;
  SubType labo                     Is  SPEPRESENTATIONHOP.labo%Type;
  SubType codhopital               Is  LIVRETVIDAL.codhopital%Type;
  SubType EAN13                    Is  SPEPRESENTATION.EAN13%Type;
  SubType REFERENCECATALOGUE       Is  SPEPRESENTATION.REFERENCECATALOGUE%Type;
  SubType CLINIQUE                 Is  SPEPRESENTATION.CLINIQUE%Type;
  SubType MARQUE                   Is  SPEPRESENTATION.MARQUE%Type;
  SubType CLASSIFICATIONSTRUCTUREE Is  SPEPRESENTATION.CLASSIFICATIONSTRUCTUREE%Type;
  SubType FAMILLESEMP_LIBELLE      Is  SPEPRESENTATION.FAMILLESEMP_LIBELLE%Type;
  SubType GRANDEURUNITEMESURE      Is  SPEPRESENTATION.GRANDEURUNITEMESURE%Type;
  SubType REFERENCEUNITEMESURE     Is  SPEPRESENTATION.REFERENCEUNITEMESURE%Type;
  SubType CODEINVENTOREX           Is  SPEPRESENTATION.CODEINVENTOREX%Type;
  SubType LIBELLEINVENTOREX        Is  SPEPRESENTATION.LIBELLEINVENTOREX%Type;
  SubType PRIXHOPITALHT            Is  SPEPRESENTATION.PRIXHOPITALHT%Type;
  SubType PRIXDEPARTLABORATOIREHT  Is  SPEPRESENTATION.PRIXDEPARTLABORATOIREHT%Type;
  SubType TVAMULTIPLICATEUR        Is  SPEPRESENTATION.TVAMULTIPLICATEUR%Type;
  SubType TVADIVISEUR              Is  SPEPRESENTATION.TVADIVISEUR%Type;
  SubType DUREESTOCKAGE            Is  SPEPRESENTATION.DUREESTOCKAGE%Type;
  SubType TEMPSSTOCKAGE            Is  SPEPRESENTATION.TEMPSSTOCKAGE%Type;
  SubType TEMPERATUREMIN           Is  SPEPRESENTATION.TEMPERATUREMIN%Type;
  SubType TEMPERATUREMAX           Is  SPEPRESENTATION.TEMPERATUREMAX%Type;
  SubType DUREEAPRESDESTOCKAGE     Is  SPEPRESENTATION.DUREEAPRESDESTOCKAGE%Type;
  SubType TEMPSAPRESDESTOCKAGE     Is  SPEPRESENTATION.TEMPSAPRESDESTOCKAGE%Type;
  SubType POIDSNET                 Is  SPEPRESENTATION.POIDSNET%Type;
  SubType VOLUMENET                Is  SPEPRESENTATION.VOLUMENET%Type;
  SubType CODEB2                   Is  SPEPRESENTATION.CODEB2%Type;
  SubType TIPS                     Is  SPEPRESENTATION.TIPS%Type;
  SubType FICHECARACTERISTIQUE     Is  SPEPRESENTATION.FICHECARACTERISTIQUE%Type;
  SubType BASEREMBOURSEMENT		     Is  SPEPRESENTATION.BASEREMBOURSEMENT%Type;
-- --------------------------------------------------------------------
-- Record : SPEPRESENTATION
-- --------------------------------------------------------------------
  Type SPEPRESENTATIONRec Is Record
  (
     Id_Spepresentation       SPEPRESENTATION_Pubres.Id_Spepresentation,
     Id_Specialite            SPEPRESENTATION_Pubres.Id_Specialite,
     Cip                      SPEPRESENTATION_Pubres.Cip,
     Ucd                      SPEPRESENTATION_Pubres.Ucd,
     Ammeurope                SPEPRESENTATION_Pubres.Ammeurope,
   --  Qtetotale                SPEPRESENTATION_Pubres.Qtetotale,
     Lieudispo                SPEPRESENTATION_Pubres.Lieudispo,
     Conddispo                SPEPRESENTATION_Pubres.Conddispo,
     Liste                    SPEPRESENTATION_Pubres.Liste,
     Dureeprescription        SPEPRESENTATION_Pubres.Dureeprescription,
     Prescriptioninitiale     SPEPRESENTATION_Pubres.Prescriptioninitiale,
     Prescriptionreservee     SPEPRESENTATION_Pubres.Prescriptionreservee,
     Renouvelreserve          SPEPRESENTATION_Pubres.Renouvelreserve,
     Medpartic                SPEPRESENTATION_Pubres.Medpartic,
     Naturesurveillance       SPEPRESENTATION_Pubres.Naturesurveillance,
     Codereferantgenerique    SPEPRESENTATION_Pubres.Codereferantgenerique,
     Remplace                 SPEPRESENTATION_Pubres.Remplace,
     Sourceremplace           SPEPRESENTATION_Pubres.Sourceremplace,
     Datesourceremplace       SPEPRESENTATION_Pubres.Datesourceremplace,
     Remplacepar              SPEPRESENTATION_Pubres.Remplacepar,
     Sourceremplacepar        SPEPRESENTATION_Pubres.Sourceremplacepar,
     Datesourceremplacepar    SPEPRESENTATION_Pubres.Datesourceremplacepar,
     Prixprodhtf              SPEPRESENTATION_Pubres.Prixprodhtf,
     Prixpublicttcf           SPEPRESENTATION_Pubres.Prixpublicttcf,
     Prixprodhte              SPEPRESENTATION_Pubres.Prixprodhte,
     Prixpublicttce           SPEPRESENTATION_Pubres.Prixpublicttce,
     Tva                      SPEPRESENTATION_Pubres.Tva,
     Dcreat                   SPEPRESENTATION_Pubres.Dcreat,
     Dmodif                   SPEPRESENTATION_Pubres.Dmodif,
     Drevis                   SPEPRESENTATION_Pubres.Drevis,
     Cipreferant              SPEPRESENTATION_Pubres.Cipreferant,
     DenomCip                 VARCHAR2(125),
     DISPONIBILITE            SPEPRESENTATION_Pubres.Disponibilite,
     NbPrise                  SPEPRESENTATION_PUBRES.NBPRISE,
     PRISEUNITAIRE            SPEPRESENTATION_PUBRES.PRISEUNITAIRE,
     CODEDISPO                SPEPRESENTATION_PUBRES.codedispo);
-- --------------------------------------------------------------------
-- Ref Cursor : SPEPRESENTATION
-- --------------------------------------------------------------------
  Type SPEPRESENTATIONCurTyp  Is Ref Cursor Return SPEPRESENTATION_Pubres.SPEPRESENTATIONRec;
-- --------------------------------------------------------------------
-- Record : SPEPRESENTATIONFULL
-- --------------------------------------------------------------------
  Type SPEPRESENTATIONFULLRec Is Record
  (
     Id_Spepresentation       SPEPRESENTATION_Pubres.Id_Spepresentation,
     Id_Specialite            SPEPRESENTATION_Pubres.Id_Specialite,
     Cip                      SPEPRESENTATION_Pubres.Cip,
     Ucd                      SPEPRESENTATION_Pubres.Ucd,
     Ammeurope                SPEPRESENTATION_Pubres.Ammeurope,
   --  Qtetotale                SPEPRESENTATION_Pubres.Qtetotale,
     Lieudispo                SPEPRESENTATION_Pubres.Lieudispo,
     Conddispo                SPEPRESENTATION_Pubres.Conddispo,
     Liste                    SPEPRESENTATION_Pubres.Liste,
     Dureeprescription        SPEPRESENTATION_Pubres.Dureeprescription,
     Prescriptioninitiale     SPEPRESENTATION_Pubres.Prescriptioninitiale,
     Prescriptionreservee     SPEPRESENTATION_Pubres.Prescriptionreservee,
     Renouvelreserve          SPEPRESENTATION_Pubres.Renouvelreserve,
     Medpartic                SPEPRESENTATION_Pubres.Medpartic,
     Naturesurveillance       SPEPRESENTATION_Pubres.Naturesurveillance,
     Codereferantgenerique    SPEPRESENTATION_Pubres.Codereferantgenerique,
     Remplace                 SPEPRESENTATION_Pubres.Remplace,
     Sourceremplace           SPEPRESENTATION_Pubres.Sourceremplace,
     Datesourceremplace       SPEPRESENTATION_Pubres.Datesourceremplace,
     Remplacepar              SPEPRESENTATION_Pubres.Remplacepar,
     Sourceremplacepar        SPEPRESENTATION_Pubres.Sourceremplacepar,
     Datesourceremplacepar    SPEPRESENTATION_Pubres.Datesourceremplacepar,
     Prixprodhtf              SPEPRESENTATION_Pubres.Prixprodhtf,
     Prixpublicttcf           SPEPRESENTATION_Pubres.Prixpublicttcf,
     Prixprodhte              SPEPRESENTATION_Pubres.Prixprodhte,
     Prixpublicttce           SPEPRESENTATION_Pubres.Prixpublicttce,
     Tva                      SPEPRESENTATION_Pubres.Tva,
     Dcreat                   SPEPRESENTATION_Pubres.Dcreat,
     Dmodif                   SPEPRESENTATION_Pubres.Dmodif,
     Drevis                   SPEPRESENTATION_Pubres.Drevis,
     Cipreferant              SPEPRESENTATION_Pubres.Cipreferant,
     DenomCip                 VARCHAR2(125),
     EAN13                    SPEPRESENTATION_Pubres.EAN13,
     REFERENCECATALOGUE       SPEPRESENTATION_Pubres.REFERENCECATALOGUE,
     CLINIQUE                 SPEPRESENTATION_Pubres.CLINIQUE,
     MARQUE                   SPEPRESENTATION_Pubres.MARQUE,
     CLASSIFICATIONSTRUCTUREE SPEPRESENTATION_Pubres.CLASSIFICATIONSTRUCTUREE,
     FAMILLESEMP_LIBELLE      SPEPRESENTATION_Pubres.FAMILLESEMP_LIBELLE,
     GRANDEURUNITEMESURE      SPEPRESENTATION_Pubres.GRANDEURUNITEMESURE,
     REFERENCEUNITEMESURE     SPEPRESENTATION_Pubres.REFERENCEUNITEMESURE,
     CODEINVENTOREX           SPEPRESENTATION_Pubres.CODEINVENTOREX,
     LIBELLEINVENTOREX        SPEPRESENTATION_Pubres.LIBELLEINVENTOREX,
     PRIXHOPITALHT            SPEPRESENTATION_Pubres.PRIXHOPITALHT,
     PRIXDEPARTLABORATOIREHT  SPEPRESENTATION_Pubres.PRIXDEPARTLABORATOIREHT,
     TVAMULTIPLICATEUR        SPEPRESENTATION_Pubres.TVAMULTIPLICATEUR,
     TVADIVISEUR              SPEPRESENTATION_Pubres.TVADIVISEUR,
     DUREESTOCKAGE            SPEPRESENTATION_Pubres.DUREESTOCKAGE,
     TEMPSSTOCKAGE            SPEPRESENTATION_Pubres.TEMPSSTOCKAGE,
     TEMPERATUREMIN           SPEPRESENTATION_Pubres.TEMPERATUREMIN,
     TEMPERATUREMAX           SPEPRESENTATION_Pubres.TEMPERATUREMAX,
     DUREEAPRESDESTOCKAGE     SPEPRESENTATION_Pubres.DUREEAPRESDESTOCKAGE,
     TEMPSAPRESDESTOCKAGE     SPEPRESENTATION_Pubres.TEMPSAPRESDESTOCKAGE,
     POIDSNET                 SPEPRESENTATION_Pubres.POIDSNET,
     VOLUMENET                SPEPRESENTATION_Pubres.VOLUMENET,
     CODEB2                   SPEPRESENTATION_Pubres.CODEB2,
     TIPS                     SPEPRESENTATION_Pubres.TIPS,
     FICHECARACTERISTIQUE     SPEPRESENTATION_Pubres.FICHECARACTERISTIQUE,
	   BASEREMBOURSEMENT		    SPEPRESENTATION_Pubres.BASEREMBOURSEMENT,
     DISPONIBILITE            SPEPRESENTATION_Pubres.Disponibilite,
     NbPrise                  SPEPRESENTATION_PUBRES.NBPRISE,
     PRISEUNITAIRE            SPEPRESENTATION_PUBRES.PRISEUNITAIRE);
-- --------------------------------------------------------------------
-- Ref Cursor : SPEPRESENTATION
-- --------------------------------------------------------------------
  Type SPEPRESENTATIONFULLCurTyp  Is Ref Cursor Return SPEPRESENTATION_Pubres.SPEPRESENTATIONFULLRec;
-- --------------------------------------------------------------------
-- Record : SPEPRESENTATION1
-- --------------------------------------------------------------------
  Type SPEPRESENTATIONRec1 Is Record
  (
     Id_Spepresentation       SPEPRESENTATION_Pubres.Id_Spepresentation,
     Id_Specialite            SPEPRESENTATION_Pubres.Id_Specialite,
     Cip                      SPEPRESENTATION_Pubres.Cip,
     Ucd                      SPEPRESENTATION_Pubres.Ucd,
     Ammeurope                SPEPRESENTATION_Pubres.Ammeurope,
    -- Qtetotale                SPEPRESENTATION_Pubres.Qtetotale,
     Lieudispo                SPEPRESENTATION_Pubres.Lieudispo,
     Conddispo                SPEPRESENTATION_Pubres.Conddispo,
     Liste                    SPEPRESENTATION_Pubres.Liste,
     Dureeprescription        SPEPRESENTATION_Pubres.Dureeprescription,
     Prescriptioninitiale     SPEPRESENTATION_Pubres.Prescriptioninitiale,
     Prescriptionreservee     SPEPRESENTATION_Pubres.Prescriptionreservee,
     Renouvelreserve          SPEPRESENTATION_Pubres.Renouvelreserve,
     Medpartic                SPEPRESENTATION_Pubres.Medpartic,
     Naturesurveillance       SPEPRESENTATION_Pubres.Naturesurveillance,
     Codereferantgenerique    SPEPRESENTATION_Pubres.Codereferantgenerique,
     Remplace                 SPEPRESENTATION_Pubres.Remplace,
     Sourceremplace           SPEPRESENTATION_Pubres.Sourceremplace,
     Datesourceremplace       SPEPRESENTATION_Pubres.Datesourceremplace,
     Remplacepar              SPEPRESENTATION_Pubres.Remplacepar,
     Sourceremplacepar        SPEPRESENTATION_Pubres.Sourceremplacepar,
     Datesourceremplacepar    SPEPRESENTATION_Pubres.Datesourceremplacepar,
     Prixprodhtf              SPEPRESENTATION_Pubres.Prixprodhtf,
     Prixpublicttcf           SPEPRESENTATION_Pubres.Prixpublicttcf,
     Prixprodhte              SPEPRESENTATION_Pubres.Prixprodhte,
     Prixpublicttce           SPEPRESENTATION_Pubres.Prixpublicttce,
     Tva                      SPEPRESENTATION_Pubres.Tva,
     Dcreat                   SPEPRESENTATION_Pubres.Dcreat,
     Dmodif                   SPEPRESENTATION_Pubres.Dmodif,
     Drevis                   SPEPRESENTATION_Pubres.Drevis,
     Cipreferant              SPEPRESENTATION_Pubres.Cipreferant,
     Evenement                SPEPRESENTATION_Pubres.Evenement,
     DATEEVENEMENT            SPEPRESENTATION_Pubres.DATEEVENEMENT,
     DenomCip                 VARCHAR2(125),
     DISPONIBILITE            SPEPRESENTATION_Pubres.Disponibilite,
     NbPrise                  SPEPRESENTATION_PUBRES.NBPRISE,
     PRISEUNITAIRE            SPEPRESENTATION_PUBRES.PRISEUNITAIRE);
-- --------------------------------------------------------------------
-- Ref Cursor : SPEPRESENTATION1
-- --------------------------------------------------------------------
  Type SPEPRESENTATIONCurTyp1   Is Ref Cursor Return SPEPRESENTATION_Pubres.SPEPRESENTATIONRec1;
  Type SPEPRESENTATIONCurRef    Is Ref Cursor;
-- --------------------------------------------------------------------
-- Record : SPEPRESENTATION2
-- --------------------------------------------------------------------
  Type SPEPRESENTATIONRec2 Is Record
  (
     Id_Spepresentation       SPEPRESENTATION_Pubres.Id_Spepresentation,
     Id_Specialite            SPEPRESENTATION_Pubres.Id_Specialite,
     Cip                      SPEPRESENTATION_Pubres.Cip,
     Ucd                      SPEPRESENTATION_Pubres.Ucd,
     Ammeurope                SPEPRESENTATION_Pubres.Ammeurope,
  --   Qtetotale                SPEPRESENTATION_Pubres.Qtetotale,
     Lieudispo                SPEPRESENTATION_Pubres.Lieudispo,
     Conddispo                SPEPRESENTATION_Pubres.Conddispo,
     Liste                    SPEPRESENTATION_Pubres.Liste,
     Dureeprescription        SPEPRESENTATION_Pubres.Dureeprescription,
     Prescriptioninitiale     SPEPRESENTATION_Pubres.Prescriptioninitiale,
     Prescriptionreservee     SPEPRESENTATION_Pubres.Prescriptionreservee,
     Renouvelreserve          SPEPRESENTATION_Pubres.Renouvelreserve,
     Medpartic                SPEPRESENTATION_Pubres.Medpartic,
     Naturesurveillance       SPEPRESENTATION_Pubres.Naturesurveillance,
     Codereferantgenerique    SPEPRESENTATION_Pubres.Codereferantgenerique,
     Remplace                 SPEPRESENTATION_Pubres.Remplace,
     Sourceremplace           SPEPRESENTATION_Pubres.Sourceremplace,
     Datesourceremplace       SPEPRESENTATION_Pubres.Datesourceremplace,
     Remplacepar              SPEPRESENTATION_Pubres.Remplacepar,
     Sourceremplacepar        SPEPRESENTATION_Pubres.Sourceremplacepar,
     Datesourceremplacepar    SPEPRESENTATION_Pubres.Datesourceremplacepar,
     Prixprodhtf              SPEPRESENTATION_Pubres.Prixprodhtf,
     Prixpublicttcf           SPEPRESENTATION_Pubres.Prixpublicttcf,
     Prixprodhte              SPEPRESENTATION_Pubres.Prixprodhte,
     Prixpublicttce           SPEPRESENTATION_Pubres.Prixpublicttce,
     Tva                      SPEPRESENTATION_Pubres.Tva,
     Dcreat                   SPEPRESENTATION_Pubres.Dcreat,
     Dmodif                   SPEPRESENTATION_Pubres.Dmodif,
     Drevis                   SPEPRESENTATION_Pubres.Drevis,
     Cipreferant              SPEPRESENTATION_Pubres.Cipreferant,
     Evenement                SPEPRESENTATION_Pubres.Evenement,
     DATEEVENEMENT            SPEPRESENTATION_Pubres.DATEEVENEMENT,
     DenomCip                 VARCHAR2(125),
     Id_organisme             SPEPRESENTATION_Pubres.Id_organisme,
     PrixTTCF                 SPEPRESENTATION_Pubres.prixttcf,
     PRIXTTCE                 SPEPRESENTATION_Pubres.prixttce,
     Dispo                    SPEPRESENTATION_Pubres.dispo,
     Commentaire              SPEPRESENTATION_Pubres.commentaire,
     presentation             SPEPRESENTATION_Pubres.presentation,
     forme                    SPEPRESENTATION_Pubres.forme,
     dosage                   SPEPRESENTATION_Pubres.dosage,
     labo                     SPEPRESENTATION_Pubres.labo,
     codhopital               SPEPRESENTATION_Pubres.codhopital,
     Flag_CAN                 VARCHAR2(1),
     DISPONIBILITE            SPEPRESENTATION_Pubres.Disponibilite,
     NbPrise                  SPEPRESENTATION_PUBRES.NBPRISE,
     PRISEUNITAIRE            SPEPRESENTATION_PUBRES.PRISEUNITAIRE);

-- --------------------------------------------------------------------
-- Ref Cursor : SPEPRESENTATION2
-- --------------------------------------------------------------------
  Type SPEPRESENTATIONCurTyp2   Is Ref Cursor Return SPEPRESENTATION_Pubres.SPEPRESENTATIONRec2;
-- --------------------------------------------------------------------
-- Record : SPEPRESENTATION3
-- --------------------------------------------------------------------
  Type SPEPRESENTATIONRec3 Is Record
  (
     Id_Spepresentation       SPEPRESENTATION_Pubres.Id_Spepresentation,
     Id_Specialite            SPEPRESENTATION_Pubres.Id_Specialite,
     Cip                      SPEPRESENTATION_Pubres.Cip,
     Ucd                      SPEPRESENTATION_Pubres.Ucd,
     Ammeurope                SPEPRESENTATION_Pubres.Ammeurope,
 --    Qtetotale                SPEPRESENTATION_Pubres.Qtetotale,
     Lieudispo                SPEPRESENTATION_Pubres.Lieudispo,
     Conddispo                SPEPRESENTATION_Pubres.Conddispo,
     Liste                    SPEPRESENTATION_Pubres.Liste,
     Dureeprescription        SPEPRESENTATION_Pubres.Dureeprescription,
     Prescriptioninitiale     SPEPRESENTATION_Pubres.Prescriptioninitiale,
     Prescriptionreservee     SPEPRESENTATION_Pubres.Prescriptionreservee,
     Renouvelreserve          SPEPRESENTATION_Pubres.Renouvelreserve,
     Medpartic                SPEPRESENTATION_Pubres.Medpartic,
     Naturesurveillance       SPEPRESENTATION_Pubres.Naturesurveillance,
     Codereferantgenerique    SPEPRESENTATION_Pubres.Codereferantgenerique,
     Remplace                 SPEPRESENTATION_Pubres.Remplace,
     Sourceremplace           SPEPRESENTATION_Pubres.Sourceremplace,
     Datesourceremplace       SPEPRESENTATION_Pubres.Datesourceremplace,
     Remplacepar              SPEPRESENTATION_Pubres.Remplacepar,
     Sourceremplacepar        SPEPRESENTATION_Pubres.Sourceremplacepar,
     Datesourceremplacepar    SPEPRESENTATION_Pubres.Datesourceremplacepar,
     Prixprodhtf              SPEPRESENTATION_Pubres.Prixprodhtf,
     Prixpublicttcf           SPEPRESENTATION_Pubres.Prixpublicttcf,
     Prixprodhte              SPEPRESENTATION_Pubres.Prixprodhte,
     Prixpublicttce           SPEPRESENTATION_Pubres.Prixpublicttce,
     Tva                      SPEPRESENTATION_Pubres.Tva,
     Dcreat                   SPEPRESENTATION_Pubres.Dcreat,
     Dmodif                   SPEPRESENTATION_Pubres.Dmodif,
     Drevis                   SPEPRESENTATION_Pubres.Drevis,
     Cipreferant              SPEPRESENTATION_Pubres.Cipreferant,
     DenomCip                 VARCHAR2(125),
     Idorganisme              SPEPRESENTATION_Pubres.ID_ORGANISME,
     DISPONIBILITE            SPEPRESENTATION_Pubres.Disponibilite,
     NbPrise                  SPEPRESENTATION_PUBRES.NBPRISE,
     PRISEUNITAIRE            SPEPRESENTATION_PUBRES.PRISEUNITAIRE);
-- --------------------------------------------------------------------
-- Ref Cursor : SPEPRESENTATION3
-- --------------------------------------------------------------------
  Type SPEPRESENTATIONCurTyp3  Is Ref Cursor Return SPEPRESENTATION_Pubres.SPEPRESENTATIONRec3;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : SPEPRESENTATION
-- --------------------------------------------------------------------
  Type Id_SpepresentationTab    Is Table Of SPEPRESENTATION_Pubres.Id_Spepresentation Index By Binary_Integer;
  Type Id_SpecialiteTab         Is Table Of SPEPRESENTATION_Pubres.Id_Specialite Index By Binary_Integer;
  Type CipTab                   Is Table Of SPEPRESENTATION_Pubres.Cip Index By Binary_Integer;
  Type UcdTab                   Is Table Of SPEPRESENTATION_Pubres.Ucd Index By Binary_Integer;
  Type AmmeuropeTab             Is Table Of SPEPRESENTATION_Pubres.Ammeurope Index By Binary_Integer;
 -- Type QtetotaleTab             Is Table Of SPEPRESENTATION_Pubres.Qtetotale Index By Binary_Integer;
  Type LieudispoTab             Is Table Of SPEPRESENTATION_Pubres.Lieudispo Index By Binary_Integer;
  Type ConddispoTab             Is Table Of SPEPRESENTATION_Pubres.Conddispo Index By Binary_Integer;
  Type ListeTab                 Is Table Of SPEPRESENTATION_Pubres.Liste Index By Binary_Integer;
  Type DureeprescriptionTab     Is Table Of SPEPRESENTATION_Pubres.Dureeprescription Index By Binary_Integer;
  Type PrescriptioninitialeTab  Is Table Of SPEPRESENTATION_Pubres.Prescriptioninitiale Index By Binary_Integer;
  Type PrescriptionreserveeTab  Is Table Of SPEPRESENTATION_Pubres.Prescriptionreservee Index By Binary_Integer;
  Type RenouvelreserveTab       Is Table Of SPEPRESENTATION_Pubres.Renouvelreserve Index By Binary_Integer;
  Type MedparticTab             Is Table Of SPEPRESENTATION_Pubres.Medpartic Index By Binary_Integer;
  Type NaturesurveillanceTab    Is Table Of SPEPRESENTATION_Pubres.Naturesurveillance Index By Binary_Integer;
  Type CodereferantgeneriqueTab Is Table Of SPEPRESENTATION_Pubres.Codereferantgenerique Index By Binary_Integer;
  Type RemplaceTab              Is Table Of SPEPRESENTATION_Pubres.Remplace Index By Binary_Integer;
  Type SourceremplaceTab        Is Table Of SPEPRESENTATION_Pubres.Sourceremplace Index By Binary_Integer;
  Type DatesourceremplaceTab    Is Table Of SPEPRESENTATION_Pubres.Datesourceremplace Index By Binary_Integer;
  Type RemplaceparTab           Is Table Of SPEPRESENTATION_Pubres.Remplacepar Index By Binary_Integer;
  Type SourceremplaceparTab     Is Table Of SPEPRESENTATION_Pubres.Sourceremplacepar Index By Binary_Integer;
  Type DatesourceremplaceparTab Is Table Of SPEPRESENTATION_Pubres.Datesourceremplacepar Index By Binary_Integer;
  Type PrixprodhtfTab           Is Table Of SPEPRESENTATION_Pubres.Prixprodhtf Index By Binary_Integer;
  Type PrixpublicttcfTab        Is Table Of SPEPRESENTATION_Pubres.Prixpublicttcf Index By Binary_Integer;
  Type PrixprodhteTab           Is Table Of SPEPRESENTATION_Pubres.Prixprodhte Index By Binary_Integer;
  Type PrixpublicttceTab        Is Table Of SPEPRESENTATION_Pubres.Prixpublicttce Index By Binary_Integer;
  Type TvaTab                   Is Table Of SPEPRESENTATION_Pubres.Tva Index By Binary_Integer;
  Type DcreatTab                Is Table Of SPEPRESENTATION_Pubres.Dcreat Index By Binary_Integer;
  Type DmodifTab                Is Table Of SPEPRESENTATION_Pubres.Dmodif Index By Binary_Integer;
  Type DrevisTab                Is Table Of SPEPRESENTATION_Pubres.Drevis Index By Binary_Integer;
  Type CipreferantTab           Is Table Of SPEPRESENTATION_Pubres.Cipreferant Index By Binary_Integer;
  Type DisponibiliteTab         Is Table Of SPEPRESENTATION_Pubres.Disponibilite Index By Binary_Integer;

-- --------------------------------------------------------------------
-- tableau record de table : SPEPRESENTATION
-- --------------------------------------------------------------------
  Type SPEPRESENTATIONTabRec    Is Table Of SPEPRESENTATION_Pubres.SPEPRESENTATIONRec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End SPEPRESENTATION_Pubres;
/
CREATE OR REPLACE Package SPESAUMON_Pubres Is
-- --------------------------------------------------------------------
-- Sous-types table : SAUMON
-- --------------------------------------------------------------------
  SubType Produit	 	 Is  SAUMON.Produit%Type;
  SubType Docid	 	 	 Is  SAUMON.Docid%Type;
  SubType NomCompletMono Is  SAUMON.NomCompletMono%Type;
  SubType idlaboratoire	 Is  SAUMON.idlaboratoire%Type;

-- --------------------------------------------------------------------
-- Ref Cursor : SPESAUMON
-- --------------------------------------------------------------------
Type SPESAUMONCurTyp  Is Ref Cursor Return SPESAUMON_Pubres.SPESAUMONRec;
-- --------------------------------------------------------------------
-- Record : SPESAUMON
-- --------------------------------------------------------------------
  Type SPESAUMONRec Is Record
  (
	Produit	 		   SPESAUMON_Pubres.Produit,
	Docid	 		   SPESAUMON_Pubres.docid,
	NomCompletMono	   SPESAUMON_Pubres.NomCompletMono,
	idlaboratoire	   SPESAUMON_Pubres.idlaboratoire);

-- ====================================================================
-- Fin de package
-- ====================================================================
End SPESAUMON_Pubres;
/
CREATE OR REPLACE Package SPESUIVISGML_Pubres Is
-- ====================================================================
-- Script     : SPESUIVISGML_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:34
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

-- --------------------------------------------------------------------
-- Sous-types table : SPESUIVISGML
-- --------------------------------------------------------------------
  SubType Id_Spesuivisgml	 Is  SPESUIVISGML.Id_Spesuivisgml%Type;
  SubType Id_Spepresentation	 Is  SPESUIVISGML.Id_Spepresentation%Type;
  SubType Ouvrage	 Is  SPESUIVISGML.Ouvrage%Type;
  SubType Millesime	 Is  SPESUIVISGML.Millesime%Type;
  SubType Monographie	 Is  SPESUIVISGML.Monographie%Type;
  SubType Commtexte	 Is  SPESUIVISGML.Commtexte%Type;
  SubType Dcreat	 Is  SPESUIVISGML.Dcreat%Type;
  SubType Dateparution	 Is  SPESUIVISGML.Dateparution%Type;
-- --------------------------------------------------------------------
-- Record : SPESUIVISGML
-- --------------------------------------------------------------------
  Type SPESUIVISGMLRec Is Record
  (
	Id_Spesuivisgml	 SPESUIVISGML_Pubres.Id_Spesuivisgml,
	Id_Spepresentation	 SPESUIVISGML_Pubres.Id_Spepresentation,
	Ouvrage	 SPESUIVISGML_Pubres.Ouvrage,
	Millesime	 SPESUIVISGML_Pubres.Millesime,
	Monographie	 SPESUIVISGML_Pubres.Monographie,
	Commtexte	 SPESUIVISGML_Pubres.Commtexte,
	Dcreat	 SPESUIVISGML_Pubres.Dcreat,
	Dateparution	 SPESUIVISGML_Pubres.Dateparution);
  Type SPESUIVISGMLRecR Is Record
  (
	Id_Spesuivisgml	 SPESUIVISGML_Pubres.Id_Spesuivisgml,
	Id_Spepresentation	 SPESUIVISGML_Pubres.Id_Spepresentation,
	Monographie	 SPESUIVISGML_Pubres.Monographie);
-- --------------------------------------------------------------------
-- Ref Cursor : SPESUIVISGML
--     Complet
--     Restreint
-- --------------------------------------------------------------------
  Type SPESUIVISGMLCurTyp 	Is Ref Cursor Return SPESUIVISGML_Pubres.SPESUIVISGMLRec;
  Type SPESUIVISGMLCurTypR 	Is Ref Cursor Return SPESUIVISGML_Pubres.SPESUIVISGMLRecR;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : SPESUIVISGML
-- --------------------------------------------------------------------
  Type Id_SpesuivisgmlTab	Is Table Of SPESUIVISGML_Pubres.Id_Spesuivisgml Index By Binary_Integer;
  Type Id_SpepresentationTab	Is Table Of SPESUIVISGML_Pubres.Id_Spepresentation Index By Binary_Integer;
  Type OuvrageTab	Is Table Of SPESUIVISGML_Pubres.Ouvrage Index By Binary_Integer;
  Type MillesimeTab	Is Table Of SPESUIVISGML_Pubres.Millesime Index By Binary_Integer;
  Type MonographieTab	Is Table Of SPESUIVISGML_Pubres.Monographie Index By Binary_Integer;
  Type CommtexteTab	Is Table Of SPESUIVISGML_Pubres.Commtexte Index By Binary_Integer;
  Type DcreatTab	Is Table Of SPESUIVISGML_Pubres.Dcreat Index By Binary_Integer;
  Type DateparutionTab	Is Table Of SPESUIVISGML_Pubres.Dateparution Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : SPESUIVISGML
-- --------------------------------------------------------------------
  Type SPESUIVISGMLTabRec 	Is Table Of SPESUIVISGML_Pubres.SPESUIVISGMLRec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End SPESUIVISGML_Pubres;
/
CREATE OR REPLACE Package SPEVOIE_Pubres Is
-- ====================================================================
-- Script     : SPEVOIE_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:34
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

-- --------------------------------------------------------------------
-- Sous-types table : SPEVOIE
-- --------------------------------------------------------------------
  SubType Id_Specialite	 Is  SPEVOIE.Id_Specialite%Type;
  SubType Voie	 Is  SPEVOIE.Voie%Type;
  SubType Ordre	 Is  SPEVOIE.Ordre%Type;
-- --------------------------------------------------------------------
-- Record : SPEVOIE
-- --------------------------------------------------------------------
  Type SPEVOIERec Is Record
  (
	Id_Specialite	 SPEVOIE_Pubres.Id_Specialite,
	Voie	 SPEVOIE_Pubres.Voie,
	Ordre	 SPEVOIE_Pubres.Ordre);
-- --------------------------------------------------------------------
-- Ref Cursor : SPEVOIE
-- --------------------------------------------------------------------
  Type SPEVOIECurTyp 	Is Ref Cursor Return SPEVOIE_Pubres.SPEVOIERec;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : SPEVOIE
-- --------------------------------------------------------------------
  Type Id_SpecialiteTab	Is Table Of SPEVOIE_Pubres.Id_Specialite Index By Binary_Integer;
  Type VoieTab	Is Table Of SPEVOIE_Pubres.Voie Index By Binary_Integer;
  Type OrdreTab	Is Table Of SPEVOIE_Pubres.Ordre Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : SPEVOIE
-- --------------------------------------------------------------------
  Type SPEVOIETabRec 	Is Table Of SPEVOIE_Pubres.SPEVOIERec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End SPEVOIE_Pubres;
/
CREATE OR REPLACE Package T_CI_Pubres Is
-- ====================================================================
-- Script     : T_CI_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:34
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

-- --------------------------------------------------------------------
-- Sous-types table : T_CI
-- --------------------------------------------------------------------
  SubType Id_T_Ci	 Is  T_CI.Id_T_Ci%Type;
  SubType Libelle	 Is  T_CI.Libelle%Type;
  SubType Texte	 Is  T_CI.Texte%Type;
  SubType Creation	 Is  T_CI.Creation%Type;
  SubType Validation	 Is  T_CI.Validation%Type;
  SubType Remarques	 Is  T_CI.Remarques%Type;
-- --------------------------------------------------------------------
-- Record : T_CI
-- --------------------------------------------------------------------
  Type T_CIRec Is Record
  (
	Id_T_Ci	 T_CI_Pubres.Id_T_Ci,
	Libelle	 T_CI_Pubres.Libelle,
	Texte	 T_CI_Pubres.Texte,
	Creation	 T_CI_Pubres.Creation,
	Validation	 T_CI_Pubres.Validation,
	Remarques	 T_CI_Pubres.Remarques);
-- --------------------------------------------------------------------
-- Ref Cursor : T_CI
-- --------------------------------------------------------------------
  Type T_CICurTyp 	Is Ref Cursor Return T_CI_Pubres.T_CIRec;
-- --------------------------------------------------------------------
-- Record : T_CI
-- --------------------------------------------------------------------
  Type T_CIRec2 Is Record
  (
	Id_T_Ci	 T_CI_Pubres.Id_T_Ci,
	Libelle	 T_CI_Pubres.Libelle,
	Texte	 T_CI_Pubres.Texte,
	Creation	 T_CI_Pubres.Creation,
	Validation	 T_CI_Pubres.Validation,
	Remarques	 T_CI_Pubres.Remarques,
	HasChild	 Number);
-- --------------------------------------------------------------------
-- Ref Cursor : T_CI2
-- --------------------------------------------------------------------
  Type T_CICurTyp2 	Is Ref Cursor Return T_CI_Pubres.T_CIRec2;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : T_CI
-- --------------------------------------------------------------------
  Type Id_T_CiTab	Is Table Of T_CI_Pubres.Id_T_Ci Index By Binary_Integer;
  Type LibelleTab	Is Table Of T_CI_Pubres.Libelle Index By Binary_Integer;
  Type TexteTab	Is Table Of T_CI_Pubres.Texte Index By Binary_Integer;
  Type CreationTab	Is Table Of T_CI_Pubres.Creation Index By Binary_Integer;
  Type ValidationTab	Is Table Of T_CI_Pubres.Validation Index By Binary_Integer;
  Type RemarquesTab	Is Table Of T_CI_Pubres.Remarques Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : T_CI
-- --------------------------------------------------------------------
  Type T_CITabRec 	Is Table Of T_CI_Pubres.T_CIRec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End T_CI_Pubres;
/
CREATE OR REPLACE Package T_INDIC_Pubres Is
-- ====================================================================
-- Script     : T_INDIC_Pubres    Type : Package
-- Objet      : Ressources publiques. Sous types, Ref Cursor, Tableau, record
-- Owner      : VIDAL
-- Création   : 14/09/99 18:31:34
-- Auteur     : AGDF (2000) from Data to Information
-- Généré par : Kercaps - AGDF_GEN_PAC Version : 2.02
-- ====================================================================

-- --------------------------------------------------------------------
-- Sous-types table : T_INDIC
-- --------------------------------------------------------------------
  SubType Id_T_Indic	 Is  T_INDIC.Id_T_Indic%Type;
  SubType Libelle	 Is  T_INDIC.Libelle%Type;
  SubType Texte	 Is  T_INDIC.Texte%Type;
  SubType Creation	 Is  T_INDIC.Creation%Type;
  SubType Validation	 Is  T_INDIC.Validation%Type;
  SubType Remarques	 Is  T_INDIC.Remarques%Type;
-- --------------------------------------------------------------------
-- Record : T_INDIC
-- --------------------------------------------------------------------
  Type T_INDICRec Is Record
  (
	Id_T_Indic	 T_INDIC_Pubres.Id_T_Indic,
	Libelle	 T_INDIC_Pubres.Libelle,
	Texte	 T_INDIC_Pubres.Texte,
	Creation	 T_INDIC_Pubres.Creation,
	Validation	 T_INDIC_Pubres.Validation,
	Remarques	 T_INDIC_Pubres.Remarques);
-- --------------------------------------------------------------------
-- Ref Cursor : T_INDIC
-- --------------------------------------------------------------------
  Type T_INDICCurTyp 	Is Ref Cursor Return T_INDIC_Pubres.T_INDICRec;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : T_INDIC
-- --------------------------------------------------------------------
  Type Id_T_IndicTab	Is Table Of T_INDIC_Pubres.Id_T_Indic Index By Binary_Integer;
  Type LibelleTab	Is Table Of T_INDIC_Pubres.Libelle Index By Binary_Integer;
  Type TexteTab	Is Table Of T_INDIC_Pubres.Texte Index By Binary_Integer;
  Type CreationTab	Is Table Of T_INDIC_Pubres.Creation Index By Binary_Integer;
  Type ValidationTab	Is Table Of T_INDIC_Pubres.Validation Index By Binary_Integer;
  Type RemarquesTab	Is Table Of T_INDIC_Pubres.Remarques Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : T_INDIC
-- --------------------------------------------------------------------
  Type T_INDICTabRec 	Is Table Of T_INDIC_Pubres.T_INDICRec Index By Binary_Integer;
-- ====================================================================
-- Fin de package
-- ====================================================================
End T_INDIC_Pubres;
/
CREATE OR REPLACE PACKAGE T_SUB_PUBRES AS
-- --------------------------------------------------------------------
-- Sous-types table : T_SUB
-- --------------------------------------------------------------------
  SubType Id_T_Sub            Is   T_SUB.Id_T_Sub%Type;
  SubType Libelle             Is   T_SUB.Libelle%Type;
  SubType Homeopathie         Is   T_SUB.Homeopathie%Type;
  SubType Texte               Is   T_SUB.Texte%Type;
  SubType Dc                  Is   T_SUB.Dc%Type;
  SubType Complementindexsub  Is   T_SUB.Complementindexsub%Type;
  SubType Idorganisme         Is   LIVRETVIDAL.Idorganisme%Type;
  SubType HasChild            Is   Number;
  SubType LibelleHomeo        Is   Varchar2(215);
  SubType Flag_CAN            Is   Varchar2(1);
  SubType BVALID              Is   Substance.BVALID%Type;
  SubType BENCOURS            Is   Substance.BENCOURS%Type;
  SubType NOMUSER             Is   Substance.NOMUSER%Type;
  SubType CAS                 Is   Substance.CAS%Type;
  SubType CASREPLACED         Is   Substance.CASREPLACED%Type;
  SubType NATURE              Is   Substance.NATURE%Type;
  SubType CHIMIE              Is   Substance.CHIMIE%Type;
  SubType LISTE               Is   Substance.LISTE%Type;
  SubType COMMLISTE           Is   Substance.COMMLISTE%Type;
  SubType ORIGINEEXCIPIENT    Is   Substance.ORIGINEEXCIPIENT%Type;
  SubType DCREAT              Is   Substance.DCREAT%Type;
  SubType DMODIF              Is   Substance.DMODIF%Type;
  SubType DREVIS              Is   Substance.DREVIS%Type;
 -- SubType OMS                 Is   SUBSTANCE_ETENDUE.OMS%Type;
  SubType OMS                 Is   varchar2(215);
  SubType CLASSEDOPANT        Is   Substance.CLASSDOPANT%Type;
  SubType COMM                Is   SubPE.Comm%Type;
  SubType ID_SUBSTANCE        Is   Substance.ID_SUBSTANCE%Type;
  SubType DENOMSUB            Is   Substance.DENOMSUB%Type;
  SubType HOMEO               Is   Substance.HOMEO%Type;


-- --------------------------------------------------------------------
-- Sous-types table : SPECONSTITUANT
-- --------------------------------------------------------------------
  SubType Bconstactif         Is   SPECONSTITUANT.Bconstactif%Type;
  SubType NATUREEXCIP         Is   SPECONSTITUANT.NATUREEXCIP%Type;
  SubType QUANTITE            Is   SPECONSTITUANT.QUANTITE%Type;
  SubType UNITE               Is   SPECONSTITUANT.Unite%Type;
  SubType TETIERE             Is   SPECONSTITUANT.TETIERE%Type;
-- --------------------------------------------------------------------
-- Record : T_SUB
-- --------------------------------------------------------------------
  Type T_SUBRec Is Record
  (
     Id_T_Sub            T_SUB_Pubres.Id_T_Sub,
     Libelle             T_SUB_Pubres.Libelle,
     Homeopathie         T_SUB_Pubres.Homeopathie,
     Texte               T_SUB_Pubres.Texte,
     Dc                  T_SUB_Pubres.Dc,
     Complementindexsub  T_SUB_Pubres.Complementindexsub,
     BCONSTACTIF         T_SUB_Pubres.BCONSTACTIF,
     NATUREEXCIP         T_SUB_Pubres.NATUREEXCIP,
     QUANTITE            T_SUB_Pubres.QUANTITE,
     UNITE               T_SUB_Pubres.UNITE,
     TETIERE             T_SUB_Pubres.TETIERE

     );
-- --------------------------------------------------------------------
-- Record : T_SUB_HasChild
-- --------------------------------------------------------------------
  Type T_SUB_HasChildRec Is Record
  (
     Id_T_Sub            T_SUB_Pubres.Id_T_Sub,
     Libelle             T_SUB_Pubres.Libelle,
     Homeopathie         T_SUB_Pubres.Homeopathie,
     Texte               T_SUB_Pubres.Texte,
     Dc                  T_SUB_Pubres.Dc,
     Complementindexsub  T_SUB_Pubres.Complementindexsub,
     HasChild            T_SUB_PubRes.HasChild);
-- --------------------------------------------------------------------
-- Record : T_SUB_HasChildFull
-- --------------------------------------------------------------------
  Type T_SUB_HasChildFullRec Is Record
  (
     Id_T_Sub            T_SUB_Pubres.Id_T_Sub,
     Libelle             T_SUB_Pubres.Libelle,
     Homeopathie         T_SUB_Pubres.Homeopathie,
     Texte               T_SUB_Pubres.Texte,
     Dc                  T_SUB_Pubres.Dc,
     Complementindexsub  T_SUB_Pubres.Complementindexsub,
     HasChild            T_SUB_PubRes.HasChild,
     BVALID              T_SUB_Pubres.BVALID,
     BENCOURS            T_SUB_Pubres.BENCOURS,
     NOMUSER             T_SUB_Pubres.NOMUSER,
     CAS                 T_SUB_Pubres.CAS,
     CASREPLACED         T_SUB_Pubres.CASREPLACED,
     NATURE              T_SUB_Pubres.NATURE,
     CHIMIE              T_SUB_Pubres.CHIMIE,
     LISTE               T_SUB_Pubres.LISTE,
     COMMLISTE           T_SUB_Pubres.COMMLISTE,
     ORIGINEEXCIPIENT    T_SUB_Pubres.ORIGINEEXCIPIENT,
     DCREAT              T_SUB_Pubres.DCREAT,
     DMODIF              T_SUB_Pubres.DMODIF,
     DREVIS              T_SUB_PubRes.DREVIS,
     Oms                 T_SUB_PubRes.Oms,
     ClasseDopant        T_SUB_PubRes.ClasseDopant);
-- --------------------------------------------------------------------
-- Record : T_SUB_HasChildHomeo
-- --------------------------------------------------------------------
  Type T_SUB_HasChildRecHomeo Is Record
  (
     Id_T_Sub            T_SUB_Pubres.Id_T_Sub,
     Libelle             T_SUB_Pubres.LibelleHomeo,
     Homeopathie         T_SUB_Pubres.Homeopathie,
     Texte               T_SUB_Pubres.Texte,
     Dc                  T_SUB_Pubres.Dc,
     Complementindexsub  T_SUB_Pubres.Complementindexsub,
     HasChild            T_SUB_PubRes.HasChild);
-- --------------------------------------------------------------------
-- Record : T_SUB_HasChildHomeo2
-- --------------------------------------------------------------------
  Type T_SUB_HasChildRecHomeo2 Is Record
  (
     Id_T_Sub            T_SUB_Pubres.Id_T_Sub,
     Libelle             T_SUB_Pubres.LibelleHomeo,
     Homeopathie         T_SUB_Pubres.Homeopathie,
     Texte               T_SUB_Pubres.Texte,
     Dc                  T_SUB_Pubres.Dc,
     Complementindexsub  T_SUB_Pubres.Complementindexsub,
     HasChild            T_SUB_PubRes.HasChild,
     Bconstactif         T_SUB_PubRes.Bconstactif);
-- --------------------------------------------------------------------
-- Record : T_SUB_HasChildHomeoLivret
-- --------------------------------------------------------------------
  Type T_SUB_HasChildRecHomeoLivret Is Record
  (
     Id_T_Sub            T_SUB_Pubres.Id_T_Sub,
     Libelle             T_SUB_Pubres.LibelleHomeo,
     Homeopathie         T_SUB_Pubres.Homeopathie,
     Texte               T_SUB_Pubres.Texte,
     Dc                  T_SUB_Pubres.Dc,
     Complementindexsub  T_SUB_Pubres.Complementindexsub,
     HasChild            T_SUB_PubRes.HasChild,
     Idorganisme         T_SUB_PubRes.Idorganisme,
     Flag_CAN            T_SUB_PubRes.Flag_CAN );
-- --------------------------------------------------------------------
-- Record : T_SUB_HasChildHomeoLivre2
-- --------------------------------------------------------------------
  Type T_SUB_HasChildRecHomeoLivre2 Is Record
  (
     Id_T_Sub            T_SUB_Pubres.Id_T_Sub,
     Libelle             T_SUB_Pubres.LibelleHomeo,
     Homeopathie         T_SUB_Pubres.Homeopathie,
     Texte               T_SUB_Pubres.Texte,
     Dc                  T_SUB_Pubres.Dc,
     Complementindexsub  T_SUB_Pubres.Complementindexsub,
     HasChild            T_SUB_PubRes.HasChild,
     Idorganisme         T_SUB_PubRes.Idorganisme,
     Flag_CAN            T_SUB_PubRes.Flag_CAN,
     Bconstactif         T_SUB_PubRes.Bconstactif);

-- --------------------------------------------------------------------
-- Record : T_SUB_DopantRec
-- --------------------------------------------------------------------
  Type T_SUB_DopantRec Is Record
  (
     Id_T_Sub            T_SUB_Pubres.Id_T_Sub,
     Denomsub            T_SUB_Pubres.Denomsub,
     Homeo               T_SUB_Pubres.Homeo,
     BVALID              T_SUB_Pubres.BVALID,
     BENCOURS            T_SUB_Pubres.BENCOURS,
     NOMUSER             T_SUB_Pubres.NOMUSER,
     CAS                 T_SUB_Pubres.CAS,
     CASREPLACED         T_SUB_Pubres.CASREPLACED,
     NATURE              T_SUB_Pubres.NATURE,
     CHIMIE              T_SUB_Pubres.CHIMIE,
     LISTE               T_SUB_Pubres.LISTE,
     COMMLISTE           T_SUB_Pubres.COMMLISTE,
     ORIGINEEXCIPIENT    T_SUB_Pubres.ORIGINEEXCIPIENT,
     DCREAT              T_SUB_Pubres.DCREAT,
     DMODIF              T_SUB_Pubres.DMODIF,
     DREVIS              T_SUB_PubRes.DREVIS,
     ClasseDopant        T_SUB_PubRes.ClasseDopant,
     COMM                T_SUB_PUBRES.COMM);
-- --------------------------------------------------------------------
-- Ref Cursor : T_SUB_DopantCurTyp
-- --------------------------------------------------------------------
  Type T_SUB_DopantCurTyp          Is Ref Cursor Return T_SUB_DopantRec;
-- --------------------------------------------------------------------
-- --------------------------------------------------------------------
-- Ref Cursor : T_SUB_HasChildHomeoRef
-- --------------------------------------------------------------------
  Type T_SUBHasChildCurTypHomeoRef  Is Ref Cursor;
-- --------------------------------------------------------------------
-- Ref Cursor : T_SUB
-- --------------------------------------------------------------------
  Type T_SUBCurTyp          Is Ref Cursor Return T_SUB_Pubres.T_SUBRec;
-- --------------------------------------------------------------------
-- Ref Cursor : T_SUB_HasChild
-- --------------------------------------------------------------------
  Type T_SUBHasChildCurTyp  Is Ref Cursor Return T_SUB_Pubres.T_SUB_HasChildRec;
-- --------------------------------------------------------------------
-- Ref Cursor : T_SUB_HasChild
-- --------------------------------------------------------------------
  Type T_SUBHasChildFullCurTyp  Is Ref Cursor Return T_SUB_Pubres.T_SUB_HasChildFullRec;
-- --------------------------------------------------------------------
-- Ref Cursor : T_SUB_HasChildHomeo
-- --------------------------------------------------------------------
  Type T_SUBHasChildCurTypHomeo  Is Ref Cursor Return T_SUB_Pubres.T_SUB_HasChildRecHomeo;
-- --------------------------------------------------------------------
-- Ref Cursor : T_SUB_HasChildHomeo2
-- --------------------------------------------------------------------
  Type T_SUBHasChildCurTypHomeo2  Is Ref Cursor Return T_SUB_Pubres.T_SUB_HasChildRecHomeo2;
-- --------------------------------------------------------------------
-- Ref Cursor : T_SUB_HasChildHomeoLivret
-- --------------------------------------------------------------------
  Type T_SUBHasChildCurTypHomeoLivret  Is Ref Cursor Return T_SUB_Pubres.T_SUB_HasChildRecHomeoLivret;
-- --------------------------------------------------------------------
-- Ref Cursor : T_SUB_HasChildHomeoLivret2
-- --------------------------------------------------------------------
  Type T_SUBHasChildCurTypHomeoLivre2  Is Ref Cursor Return T_SUB_Pubres.T_SUB_HasChildRecHomeoLivre2;
-- --------------------------------------------------------------------
-- tableaux colonnes de table : T_SUB
-- --------------------------------------------------------------------
  Type Id_T_SubTab            Is Table Of T_SUB_Pubres.Id_T_Sub Index By Binary_Integer;
  Type LibelleTab             Is Table Of T_SUB_Pubres.Libelle Index By Binary_Integer;
  Type HomeopathieTab         Is Table Of T_SUB_Pubres.Homeopathie Index By Binary_Integer;
  Type TexteTab               Is Table Of T_SUB_Pubres.Texte Index By Binary_Integer;
  Type DcTab                  Is Table Of T_SUB_Pubres.Dc Index By Binary_Integer;
  Type ComplementindexsubTab  Is Table Of T_SUB_Pubres.Complementindexsub Index By Binary_Integer;
-- --------------------------------------------------------------------
-- tableau record de table : T_SUB
-- --------------------------------------------------------------------
  Type T_SUBTabRec          Is Table Of T_SUB_Pubres.T_SUBRec Index By Binary_Integer;
-- --------------------------------------------------------------------
-- Ref Cursor : T_SUBPere  ( retourne un tableau de Id_T_Sub )
-- --------------------------------------------------------------------
  Type T_SUBPereCurRef Is Ref Cursor;
-- ====================================================================
-- Fin de package
-- ====================================================================
End T_SUB_PUBRES;
/
CREATE OR REPLACE package UCD_PUBRES is

  -- Author  : MALIKLA
  -- Created : 02/02/2004 16:55:00
  -- Purpose : Curseur Typé reprenant le contenu partiel de la table UCD

-- --------------------------------------------------------------------
-- Sous-types table : UCD
-- --------------------------------------------------------------------
  SubType code_ucd             Is   UCD.code_ucd%Type;
  SubType code_cip             Is   UCD.code_cip%Type;
  SubType Libelle_ucd          Is   UCD.Libelle_ucd%Type;
-- --------------------------------------------------------------------
-- Record : UCD
-- --------------------------------------------------------------------
  Type UCDRec Is Record
  (
  code_ucd               UCD_PUBRES.code_ucd,
  code_cip               UCD_PUBRES.code_cip,
  Libelle_ucd            UCD_PUBRES.Libelle_ucd );

-- --------------------------------------------------------------------
-- Ref Cursor : UCDCurTyp
-- --------------------------------------------------------------------
  Type UCDCurTyp          Is Ref Cursor Return UCD_PUBRES.UCDRec;
  Type UCDCurRef          Is Ref Cursor;

end UCD_PUBRES;
/

CREATE OR REPLACE package body UCD_PUBRES is


end UCD_PUBRES;
/

